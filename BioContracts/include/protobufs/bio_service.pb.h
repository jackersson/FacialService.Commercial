// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bio_service.proto

#ifndef PROTOBUF_bio_5fservice_2eproto__INCLUDED
#define PROTOBUF_bio_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace BioService {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_bio_5fservice_2eproto();
void protobuf_AssignDesc_bio_5fservice_2eproto();
void protobuf_ShutdownFile_bio_5fservice_2eproto();

class AccessDevice;
class AccessInfo;
class AcquiredData;
class BioClient;
class BioFingerprintData;
class BioIdentificationRecord;
class BioPersonData;
class BiometricData;
class BiometricDataList;
class BiometricLocation;
class CaptureDevice;
class Card;
class CardList;
class Criminal;
class DatabaseFacialImageResponse;
class EnrollmentFeedback;
class EyesCharacteristic;
class FaceCharacteristic;
class FacialImage;
class FingerprintAcquiredData;
class FingerprintCharacteristic;
class FingerprintDevice;
class FingerprintImage;
class FullVisitorData;
class IdentificationData;
class IrisDevice;
class Location;
class LocationList;
class LogRecord;
class Person;
class PersonList;
class Photo;
class PhotoList;
class PortraitCharacteristic;
class QueryLocations;
class QueryPersons;
class QueryPhoto;
class QueryVisitors;
class RawIndexes;
class Response;
class SocketConfiguration;
class VerificationFeedback;
class Visitor;
class VisitorList;

enum AccessInfo_AccessType {
  AccessInfo_AccessType_None = 0,
  AccessInfo_AccessType_All = 1,
  AccessInfo_AccessType_Custom = 2,
  AccessInfo_AccessType_AccessInfo_AccessType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AccessInfo_AccessType_AccessInfo_AccessType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AccessInfo_AccessType_IsValid(int value);
const AccessInfo_AccessType AccessInfo_AccessType_AccessType_MIN = AccessInfo_AccessType_None;
const AccessInfo_AccessType AccessInfo_AccessType_AccessType_MAX = AccessInfo_AccessType_Custom;
const int AccessInfo_AccessType_AccessType_ARRAYSIZE = AccessInfo_AccessType_AccessType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccessInfo_AccessType_descriptor();
inline const ::std::string& AccessInfo_AccessType_Name(AccessInfo_AccessType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccessInfo_AccessType_descriptor(), value);
}
inline bool AccessInfo_AccessType_Parse(
    const ::std::string& name, AccessInfo_AccessType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccessInfo_AccessType>(
    AccessInfo_AccessType_descriptor(), name, value);
}
enum QueryPhoto_PhotoResultType {
  QueryPhoto_PhotoResultType_Undefined = 0,
  QueryPhoto_PhotoResultType_Full = 1,
  QueryPhoto_PhotoResultType_OnlyBytes = 2,
  QueryPhoto_PhotoResultType_NoBytes = 3,
  QueryPhoto_PhotoResultType_QueryPhoto_PhotoResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  QueryPhoto_PhotoResultType_QueryPhoto_PhotoResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool QueryPhoto_PhotoResultType_IsValid(int value);
const QueryPhoto_PhotoResultType QueryPhoto_PhotoResultType_PhotoResultType_MIN = QueryPhoto_PhotoResultType_Undefined;
const QueryPhoto_PhotoResultType QueryPhoto_PhotoResultType_PhotoResultType_MAX = QueryPhoto_PhotoResultType_NoBytes;
const int QueryPhoto_PhotoResultType_PhotoResultType_ARRAYSIZE = QueryPhoto_PhotoResultType_PhotoResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QueryPhoto_PhotoResultType_descriptor();
inline const ::std::string& QueryPhoto_PhotoResultType_Name(QueryPhoto_PhotoResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QueryPhoto_PhotoResultType_descriptor(), value);
}
inline bool QueryPhoto_PhotoResultType_Parse(
    const ::std::string& name, QueryPhoto_PhotoResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueryPhoto_PhotoResultType>(
    QueryPhoto_PhotoResultType_descriptor(), name, value);
}
enum ImageFormat {
  JPEG = 0,
  JPEG2000 = 1,
  PNG = 2,
  BMP = 3,
  PGM = 4,
  GRAYSCALE_8BIT = 5,
  ImageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ImageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ImageFormat_IsValid(int value);
const ImageFormat ImageFormat_MIN = JPEG;
const ImageFormat ImageFormat_MAX = GRAYSCALE_8BIT;
const int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor();
inline const ::std::string& ImageFormat_Name(ImageFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageFormat_descriptor(), value);
}
inline bool ImageFormat_Parse(
    const ::std::string& name, ImageFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageFormat>(
    ImageFormat_descriptor(), name, value);
}
enum EntityState {
  Unchanged = 0,
  Added = 1,
  Modified = 2,
  Deleted = 3,
  EntityState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EntityState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EntityState_IsValid(int value);
const EntityState EntityState_MIN = Unchanged;
const EntityState EntityState_MAX = Deleted;
const int EntityState_ARRAYSIZE = EntityState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EntityState_descriptor();
inline const ::std::string& EntityState_Name(EntityState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EntityState_descriptor(), value);
}
inline bool EntityState_Parse(
    const ::std::string& name, EntityState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntityState>(
    EntityState_descriptor(), name, value);
}
enum Finger {
  Any = 0,
  RightThumb = 1,
  LeftThumb = 2,
  RightIndex = 3,
  LeftIndex = 4,
  RightMiddle = 5,
  LeftMiddle = 6,
  RightRing = 7,
  LeftRing = 8,
  RightLittle = 9,
  LeftLittle = 10,
  Finger_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Finger_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Finger_IsValid(int value);
const Finger Finger_MIN = Any;
const Finger Finger_MAX = LeftLittle;
const int Finger_ARRAYSIZE = Finger_MAX + 1;

const ::google::protobuf::EnumDescriptor* Finger_descriptor();
inline const ::std::string& Finger_Name(Finger value) {
  return ::google::protobuf::internal::NameOfEnum(
    Finger_descriptor(), value);
}
inline bool Finger_Parse(
    const ::std::string& name, Finger* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Finger>(
    Finger_descriptor(), name, value);
}
enum EyeType {
  NoneEye = 0,
  Left = 1,
  Right = 2,
  Both = 3,
  EyeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EyeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EyeType_IsValid(int value);
const EyeType EyeType_MIN = NoneEye;
const EyeType EyeType_MAX = Both;
const int EyeType_ARRAYSIZE = EyeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EyeType_descriptor();
inline const ::std::string& EyeType_Name(EyeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EyeType_descriptor(), value);
}
inline bool EyeType_Parse(
    const ::std::string& name, EyeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EyeType>(
    EyeType_descriptor(), name, value);
}
enum Result {
  Success = 0,
  Failed = 1,
  Result_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Result_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Result_IsValid(int value);
const Result Result_MIN = Success;
const Result Result_MAX = Failed;
const int Result_ARRAYSIZE = Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* Result_descriptor();
inline const ::std::string& Result_Name(Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    Result_descriptor(), value);
}
inline bool Result_Parse(
    const ::std::string& name, Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Result>(
    Result_descriptor(), name, value);
}
enum Gender {
  None = 0,
  Male = 1,
  Female = 2,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Gender_IsValid(int value);
const Gender Gender_MIN = None;
const Gender Gender_MAX = Female;
const int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gender_descriptor();
inline const ::std::string& Gender_Name(Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gender_descriptor(), value);
}
inline bool Gender_Parse(
    const ::std::string& name, Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
enum Rights {
  Custom = 0,
  Operator = 1,
  Manager = 2,
  Supervisor = 3,
  Rights_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Rights_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Rights_IsValid(int value);
const Rights Rights_MIN = Custom;
const Rights Rights_MAX = Supervisor;
const int Rights_ARRAYSIZE = Rights_MAX + 1;

const ::google::protobuf::EnumDescriptor* Rights_descriptor();
inline const ::std::string& Rights_Name(Rights value) {
  return ::google::protobuf::internal::NameOfEnum(
    Rights_descriptor(), value);
}
inline bool Rights_Parse(
    const ::std::string& name, Rights* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Rights>(
    Rights_descriptor(), name, value);
}
enum MessageType {
  Information = 0,
  Error = 1,
  Warning = 2,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = Information;
const MessageType MessageType_MAX = Warning;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum PhotoSizeType {
  Full = 0,
  Croped = 1,
  PhotoSizeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PhotoSizeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PhotoSizeType_IsValid(int value);
const PhotoSizeType PhotoSizeType_MIN = Full;
const PhotoSizeType PhotoSizeType_MAX = Croped;
const int PhotoSizeType_ARRAYSIZE = PhotoSizeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhotoSizeType_descriptor();
inline const ::std::string& PhotoSizeType_Name(PhotoSizeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhotoSizeType_descriptor(), value);
}
inline bool PhotoSizeType_Parse(
    const ::std::string& name, PhotoSizeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhotoSizeType>(
    PhotoSizeType_descriptor(), name, value);
}
enum PhotoOriginType {
  Enrolled = 0,
  Verified = 1,
  Thumbnail = 2,
  PhotoOriginType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PhotoOriginType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PhotoOriginType_IsValid(int value);
const PhotoOriginType PhotoOriginType_MIN = Enrolled;
const PhotoOriginType PhotoOriginType_MAX = Thumbnail;
const int PhotoOriginType_ARRAYSIZE = PhotoOriginType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhotoOriginType_descriptor();
inline const ::std::string& PhotoOriginType_Name(PhotoOriginType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhotoOriginType_descriptor(), value);
}
inline bool PhotoOriginType_Parse(
    const ::std::string& name, PhotoOriginType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhotoOriginType>(
    PhotoOriginType_descriptor(), name, value);
}
// ===================================================================

class RawIndexes : public ::google::protobuf::Message {
 public:
  RawIndexes();
  virtual ~RawIndexes();

  RawIndexes(const RawIndexes& from);

  inline RawIndexes& operator=(const RawIndexes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawIndexes& default_instance();

  void Swap(RawIndexes* other);

  // implements Message ----------------------------------------------

  inline RawIndexes* New() const { return New(NULL); }

  RawIndexes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawIndexes& from);
  void MergeFrom(const RawIndexes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RawIndexes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 indexes = 1;
  int indexes_size() const;
  void clear_indexes();
  static const int kIndexesFieldNumber = 1;
  ::google::protobuf::int64 indexes(int index) const;
  void set_indexes(int index, ::google::protobuf::int64 value);
  void add_indexes(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      indexes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_indexes();

  // @@protoc_insertion_point(class_scope:BioService.RawIndexes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > indexes_;
  mutable int _indexes_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static RawIndexes* default_instance_;
};
// -------------------------------------------------------------------

class Criminal : public ::google::protobuf::Message {
 public:
  Criminal();
  virtual ~Criminal();

  Criminal(const Criminal& from);

  inline Criminal& operator=(const Criminal& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Criminal& default_instance();

  void Swap(Criminal* other);

  // implements Message ----------------------------------------------

  inline Criminal* New() const { return New(NULL); }

  Criminal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Criminal& from);
  void MergeFrom(const Criminal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Criminal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string alert = 3;
  void clear_alert();
  static const int kAlertFieldNumber = 3;
  const ::std::string& alert() const;
  void set_alert(const ::std::string& value);
  void set_alert(const char* value);
  void set_alert(const char* value, size_t size);
  ::std::string* mutable_alert();
  ::std::string* release_alert();
  void set_allocated_alert(::std::string* alert);

  // @@protoc_insertion_point(class_scope:BioService.Criminal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr alert_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Criminal* default_instance_;
};
// -------------------------------------------------------------------

class FullVisitorData : public ::google::protobuf::Message {
 public:
  FullVisitorData();
  virtual ~FullVisitorData();

  FullVisitorData(const FullVisitorData& from);

  inline FullVisitorData& operator=(const FullVisitorData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FullVisitorData& default_instance();

  void Swap(FullVisitorData* other);

  // implements Message ----------------------------------------------

  inline FullVisitorData* New() const { return New(NULL); }

  FullVisitorData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FullVisitorData& from);
  void MergeFrom(const FullVisitorData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FullVisitorData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.Visitor visitor = 1;
  bool has_visitor() const;
  void clear_visitor();
  static const int kVisitorFieldNumber = 1;
  const ::BioService::Visitor& visitor() const;
  ::BioService::Visitor* mutable_visitor();
  ::BioService::Visitor* release_visitor();
  void set_allocated_visitor(::BioService::Visitor* visitor);

  // optional .BioService.FacialImage face = 2;
  bool has_face() const;
  void clear_face();
  static const int kFaceFieldNumber = 2;
  const ::BioService::FacialImage& face() const;
  ::BioService::FacialImage* mutable_face();
  ::BioService::FacialImage* release_face();
  void set_allocated_face(::BioService::FacialImage* face);

  // optional .BioService.FingerprintImage fingerprint = 3;
  bool has_fingerprint() const;
  void clear_fingerprint();
  static const int kFingerprintFieldNumber = 3;
  const ::BioService::FingerprintImage& fingerprint() const;
  ::BioService::FingerprintImage* mutable_fingerprint();
  ::BioService::FingerprintImage* release_fingerprint();
  void set_allocated_fingerprint(::BioService::FingerprintImage* fingerprint);

  // @@protoc_insertion_point(class_scope:BioService.FullVisitorData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::Visitor* visitor_;
  ::BioService::FacialImage* face_;
  ::BioService::FingerprintImage* fingerprint_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FullVisitorData* default_instance_;
};
// -------------------------------------------------------------------

class Person : public ::google::protobuf::Message {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  inline Person* New() const { return New(NULL); }

  Person* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string firstname = 2;
  void clear_firstname();
  static const int kFirstnameFieldNumber = 2;
  const ::std::string& firstname() const;
  void set_firstname(const ::std::string& value);
  void set_firstname(const char* value);
  void set_firstname(const char* value, size_t size);
  ::std::string* mutable_firstname();
  ::std::string* release_firstname();
  void set_allocated_firstname(::std::string* firstname);

  // optional string lastname = 3;
  void clear_lastname();
  static const int kLastnameFieldNumber = 3;
  const ::std::string& lastname() const;
  void set_lastname(const ::std::string& value);
  void set_lastname(const char* value);
  void set_lastname(const char* value, size_t size);
  ::std::string* mutable_lastname();
  ::std::string* release_lastname();
  void set_allocated_lastname(::std::string* lastname);

  // optional int64 dateofbirth = 4;
  void clear_dateofbirth();
  static const int kDateofbirthFieldNumber = 4;
  ::google::protobuf::int64 dateofbirth() const;
  void set_dateofbirth(::google::protobuf::int64 value);

  // optional .BioService.Gender gender = 5;
  void clear_gender();
  static const int kGenderFieldNumber = 5;
  ::BioService::Gender gender() const;
  void set_gender(::BioService::Gender value);

  // optional string country = 6;
  void clear_country();
  static const int kCountryFieldNumber = 6;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string city = 7;
  void clear_city();
  static const int kCityFieldNumber = 7;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string comments = 8;
  void clear_comments();
  static const int kCommentsFieldNumber = 8;
  const ::std::string& comments() const;
  void set_comments(const ::std::string& value);
  void set_comments(const char* value);
  void set_comments(const char* value, size_t size);
  ::std::string* mutable_comments();
  ::std::string* release_comments();
  void set_allocated_comments(::std::string* comments);

  // optional .BioService.Rights rights = 9;
  void clear_rights();
  static const int kRightsFieldNumber = 9;
  ::BioService::Rights rights() const;
  void set_rights(::BioService::Rights value);

  // optional string email = 10;
  void clear_email();
  static const int kEmailFieldNumber = 10;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional int64 thumbnailid = 11;
  void clear_thumbnailid();
  static const int kThumbnailidFieldNumber = 11;
  ::google::protobuf::int64 thumbnailid() const;
  void set_thumbnailid(::google::protobuf::int64 value);

  // optional .BioService.Criminal criminal = 12;
  bool has_criminal() const;
  void clear_criminal();
  static const int kCriminalFieldNumber = 12;
  const ::BioService::Criminal& criminal() const;
  ::BioService::Criminal* mutable_criminal();
  ::BioService::Criminal* release_criminal();
  void set_allocated_criminal(::BioService::Criminal* criminal);

  // repeated .BioService.Card cards = 13;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 13;
  const ::BioService::Card& cards(int index) const;
  ::BioService::Card* mutable_cards(int index);
  ::BioService::Card* add_cards();
  ::google::protobuf::RepeatedPtrField< ::BioService::Card >*
      mutable_cards();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Card >&
      cards() const;

  // repeated .BioService.Photo photos = 14;
  int photos_size() const;
  void clear_photos();
  static const int kPhotosFieldNumber = 14;
  const ::BioService::Photo& photos(int index) const;
  ::BioService::Photo* mutable_photos(int index);
  ::BioService::Photo* add_photos();
  ::google::protobuf::RepeatedPtrField< ::BioService::Photo >*
      mutable_photos();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Photo >&
      photos() const;

  // optional .BioService.BiometricData biometric_data = 15;
  bool has_biometric_data() const;
  void clear_biometric_data();
  static const int kBiometricDataFieldNumber = 15;
  const ::BioService::BiometricData& biometric_data() const;
  ::BioService::BiometricData* mutable_biometric_data();
  ::BioService::BiometricData* release_biometric_data();
  void set_allocated_biometric_data(::BioService::BiometricData* biometric_data);

  // optional .BioService.EntityState entity_state = 16;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 16;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // optional .BioService.Result dbresult = 17;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 17;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.Person)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr firstname_;
  ::google::protobuf::internal::ArenaStringPtr lastname_;
  ::google::protobuf::int64 dateofbirth_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  int gender_;
  int rights_;
  ::google::protobuf::internal::ArenaStringPtr comments_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::int64 thumbnailid_;
  ::BioService::Criminal* criminal_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Card > cards_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Photo > photos_;
  ::BioService::BiometricData* biometric_data_;
  int entity_state_;
  int dbresult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// -------------------------------------------------------------------

class AccessDevice : public ::google::protobuf::Message {
 public:
  AccessDevice();
  virtual ~AccessDevice();

  AccessDevice(const AccessDevice& from);

  inline AccessDevice& operator=(const AccessDevice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessDevice& default_instance();

  void Swap(AccessDevice* other);

  // implements Message ----------------------------------------------

  inline AccessDevice* New() const { return New(NULL); }

  AccessDevice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccessDevice& from);
  void MergeFrom(const AccessDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccessDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string portname = 1;
  void clear_portname();
  static const int kPortnameFieldNumber = 1;
  const ::std::string& portname() const;
  void set_portname(const ::std::string& value);
  void set_portname(const char* value);
  void set_portname(const char* value, size_t size);
  ::std::string* mutable_portname();
  ::std::string* release_portname();
  void set_allocated_portname(::std::string* portname);

  // optional .BioService.Result dbresult = 2;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 2;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // optional .BioService.EntityState entity_state = 3;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 3;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // @@protoc_insertion_point(class_scope:BioService.AccessDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr portname_;
  int dbresult_;
  int entity_state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static AccessDevice* default_instance_;
};
// -------------------------------------------------------------------

class CaptureDevice : public ::google::protobuf::Message {
 public:
  CaptureDevice();
  virtual ~CaptureDevice();

  CaptureDevice(const CaptureDevice& from);

  inline CaptureDevice& operator=(const CaptureDevice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaptureDevice& default_instance();

  void Swap(CaptureDevice* other);

  // implements Message ----------------------------------------------

  inline CaptureDevice* New() const { return New(NULL); }

  CaptureDevice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaptureDevice& from);
  void MergeFrom(const CaptureDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CaptureDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devicename = 1;
  void clear_devicename();
  static const int kDevicenameFieldNumber = 1;
  const ::std::string& devicename() const;
  void set_devicename(const ::std::string& value);
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  ::std::string* mutable_devicename();
  ::std::string* release_devicename();
  void set_allocated_devicename(::std::string* devicename);

  // optional .BioService.Result dbresult = 2;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 2;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // optional .BioService.EntityState entity_state = 3;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 3;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // @@protoc_insertion_point(class_scope:BioService.CaptureDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr devicename_;
  int dbresult_;
  int entity_state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static CaptureDevice* default_instance_;
};
// -------------------------------------------------------------------

class FingerprintDevice : public ::google::protobuf::Message {
 public:
  FingerprintDevice();
  virtual ~FingerprintDevice();

  FingerprintDevice(const FingerprintDevice& from);

  inline FingerprintDevice& operator=(const FingerprintDevice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FingerprintDevice& default_instance();

  void Swap(FingerprintDevice* other);

  // implements Message ----------------------------------------------

  inline FingerprintDevice* New() const { return New(NULL); }

  FingerprintDevice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FingerprintDevice& from);
  void MergeFrom(const FingerprintDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FingerprintDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devicename = 1;
  void clear_devicename();
  static const int kDevicenameFieldNumber = 1;
  const ::std::string& devicename() const;
  void set_devicename(const ::std::string& value);
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  ::std::string* mutable_devicename();
  ::std::string* release_devicename();
  void set_allocated_devicename(::std::string* devicename);

  // optional string serial_number = 2;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 2;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional .BioService.Result dbresult = 3;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 3;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // optional .BioService.EntityState entity_state = 4;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 4;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // @@protoc_insertion_point(class_scope:BioService.FingerprintDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr devicename_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  int dbresult_;
  int entity_state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FingerprintDevice* default_instance_;
};
// -------------------------------------------------------------------

class IrisDevice : public ::google::protobuf::Message {
 public:
  IrisDevice();
  virtual ~IrisDevice();

  IrisDevice(const IrisDevice& from);

  inline IrisDevice& operator=(const IrisDevice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IrisDevice& default_instance();

  void Swap(IrisDevice* other);

  // implements Message ----------------------------------------------

  inline IrisDevice* New() const { return New(NULL); }

  IrisDevice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IrisDevice& from);
  void MergeFrom(const IrisDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IrisDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string devicename = 1;
  void clear_devicename();
  static const int kDevicenameFieldNumber = 1;
  const ::std::string& devicename() const;
  void set_devicename(const ::std::string& value);
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  ::std::string* mutable_devicename();
  ::std::string* release_devicename();
  void set_allocated_devicename(::std::string* devicename);

  // optional string serial_number = 2;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 2;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional .BioService.Result dbresult = 3;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 3;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // optional .BioService.EntityState entity_state = 4;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 4;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // @@protoc_insertion_point(class_scope:BioService.IrisDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr devicename_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  int dbresult_;
  int entity_state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static IrisDevice* default_instance_;
};
// -------------------------------------------------------------------

class Card : public ::google::protobuf::Message {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  void Swap(Card* other);

  // implements Message ----------------------------------------------

  inline Card* New() const { return New(NULL); }

  Card* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 personid = 2;
  void clear_personid();
  static const int kPersonidFieldNumber = 2;
  ::google::protobuf::int64 personid() const;
  void set_personid(::google::protobuf::int64 value);

  // optional string unique_number = 3;
  void clear_unique_number();
  static const int kUniqueNumberFieldNumber = 3;
  const ::std::string& unique_number() const;
  void set_unique_number(const ::std::string& value);
  void set_unique_number(const char* value);
  void set_unique_number(const char* value, size_t size);
  ::std::string* mutable_unique_number();
  ::std::string* release_unique_number();
  void set_allocated_unique_number(::std::string* unique_number);

  // optional .BioService.EntityState entity_state = 4;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 4;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // optional .BioService.Result dbresult = 5;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 5;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.Card)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 personid_;
  ::google::protobuf::internal::ArenaStringPtr unique_number_;
  int entity_state_;
  int dbresult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Card* default_instance_;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  inline Location* New() const { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string location_name = 2;
  void clear_location_name();
  static const int kLocationNameFieldNumber = 2;
  const ::std::string& location_name() const;
  void set_location_name(const ::std::string& value);
  void set_location_name(const char* value);
  void set_location_name(const char* value, size_t size);
  ::std::string* mutable_location_name();
  ::std::string* release_location_name();
  void set_allocated_location_name(::std::string* location_name);

  // optional string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string mac_address = 4;
  void clear_mac_address();
  static const int kMacAddressFieldNumber = 4;
  const ::std::string& mac_address() const;
  void set_mac_address(const ::std::string& value);
  void set_mac_address(const char* value);
  void set_mac_address(const char* value, size_t size);
  ::std::string* mutable_mac_address();
  ::std::string* release_mac_address();
  void set_allocated_mac_address(::std::string* mac_address);

  // optional .BioService.CaptureDevice captureDevice = 5;
  bool has_capturedevice() const;
  void clear_capturedevice();
  static const int kCaptureDeviceFieldNumber = 5;
  const ::BioService::CaptureDevice& capturedevice() const;
  ::BioService::CaptureDevice* mutable_capturedevice();
  ::BioService::CaptureDevice* release_capturedevice();
  void set_allocated_capturedevice(::BioService::CaptureDevice* capturedevice);

  // optional .BioService.AccessDevice accessDevice = 6;
  bool has_accessdevice() const;
  void clear_accessdevice();
  static const int kAccessDeviceFieldNumber = 6;
  const ::BioService::AccessDevice& accessdevice() const;
  ::BioService::AccessDevice* mutable_accessdevice();
  ::BioService::AccessDevice* release_accessdevice();
  void set_allocated_accessdevice(::BioService::AccessDevice* accessdevice);

  // optional .BioService.FingerprintDevice fingerprintDevice = 7;
  bool has_fingerprintdevice() const;
  void clear_fingerprintdevice();
  static const int kFingerprintDeviceFieldNumber = 7;
  const ::BioService::FingerprintDevice& fingerprintdevice() const;
  ::BioService::FingerprintDevice* mutable_fingerprintdevice();
  ::BioService::FingerprintDevice* release_fingerprintdevice();
  void set_allocated_fingerprintdevice(::BioService::FingerprintDevice* fingerprintdevice);

  // optional .BioService.IrisDevice irisDevice = 8;
  bool has_irisdevice() const;
  void clear_irisdevice();
  static const int kIrisDeviceFieldNumber = 8;
  const ::BioService::IrisDevice& irisdevice() const;
  ::BioService::IrisDevice* mutable_irisdevice();
  ::BioService::IrisDevice* release_irisdevice();
  void set_allocated_irisdevice(::BioService::IrisDevice* irisdevice);

  // optional .BioService.AccessInfo access_info = 9;
  bool has_access_info() const;
  void clear_access_info();
  static const int kAccessInfoFieldNumber = 9;
  const ::BioService::AccessInfo& access_info() const;
  ::BioService::AccessInfo* mutable_access_info();
  ::BioService::AccessInfo* release_access_info();
  void set_allocated_access_info(::BioService::AccessInfo* access_info);

  // optional .BioService.EntityState entity_state = 10;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 10;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // optional .BioService.Result dbresult = 11;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 11;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr location_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr mac_address_;
  ::BioService::CaptureDevice* capturedevice_;
  ::BioService::AccessDevice* accessdevice_;
  ::BioService::FingerprintDevice* fingerprintdevice_;
  ::BioService::IrisDevice* irisdevice_;
  ::BioService::AccessInfo* access_info_;
  int entity_state_;
  int dbresult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class AccessInfo : public ::google::protobuf::Message {
 public:
  AccessInfo();
  virtual ~AccessInfo();

  AccessInfo(const AccessInfo& from);

  inline AccessInfo& operator=(const AccessInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessInfo& default_instance();

  void Swap(AccessInfo* other);

  // implements Message ----------------------------------------------

  inline AccessInfo* New() const { return New(NULL); }

  AccessInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccessInfo& from);
  void MergeFrom(const AccessInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccessInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AccessInfo_AccessType AccessType;
  static const AccessType None = AccessInfo_AccessType_None;
  static const AccessType All = AccessInfo_AccessType_All;
  static const AccessType Custom = AccessInfo_AccessType_Custom;
  static inline bool AccessType_IsValid(int value) {
    return AccessInfo_AccessType_IsValid(value);
  }
  static const AccessType AccessType_MIN =
    AccessInfo_AccessType_AccessType_MIN;
  static const AccessType AccessType_MAX =
    AccessInfo_AccessType_AccessType_MAX;
  static const int AccessType_ARRAYSIZE =
    AccessInfo_AccessType_AccessType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AccessType_descriptor() {
    return AccessInfo_AccessType_descriptor();
  }
  static inline const ::std::string& AccessType_Name(AccessType value) {
    return AccessInfo_AccessType_Name(value);
  }
  static inline bool AccessType_Parse(const ::std::string& name,
      AccessType* value) {
    return AccessInfo_AccessType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .BioService.AccessInfo.AccessType access_type = 1;
  void clear_access_type();
  static const int kAccessTypeFieldNumber = 1;
  ::BioService::AccessInfo_AccessType access_type() const;
  void set_access_type(::BioService::AccessInfo_AccessType value);

  // repeated .BioService.Person persons = 2;
  int persons_size() const;
  void clear_persons();
  static const int kPersonsFieldNumber = 2;
  const ::BioService::Person& persons(int index) const;
  ::BioService::Person* mutable_persons(int index);
  ::BioService::Person* add_persons();
  ::google::protobuf::RepeatedPtrField< ::BioService::Person >*
      mutable_persons();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Person >&
      persons() const;

  // optional .BioService.EntityState entity_state = 3;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 3;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // optional .BioService.Result dbresult = 4;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 4;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.AccessInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Person > persons_;
  int access_type_;
  int entity_state_;
  int dbresult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static AccessInfo* default_instance_;
};
// -------------------------------------------------------------------

class LogRecord : public ::google::protobuf::Message {
 public:
  LogRecord();
  virtual ~LogRecord();

  LogRecord(const LogRecord& from);

  inline LogRecord& operator=(const LogRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRecord& default_instance();

  void Swap(LogRecord* other);

  // implements Message ----------------------------------------------

  inline LogRecord* New() const { return New(NULL); }

  LogRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRecord& from);
  void MergeFrom(const LogRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.MessageType message_type = 1;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  ::BioService::MessageType message_type() const;
  void set_message_type(::BioService::MessageType value);

  // optional int64 detected_time = 2;
  void clear_detected_time();
  static const int kDetectedTimeFieldNumber = 2;
  ::google::protobuf::int64 detected_time() const;
  void set_detected_time(::google::protobuf::int64 value);

  // optional string exception_message = 3;
  void clear_exception_message();
  static const int kExceptionMessageFieldNumber = 3;
  const ::std::string& exception_message() const;
  void set_exception_message(const ::std::string& value);
  void set_exception_message(const char* value);
  void set_exception_message(const char* value, size_t size);
  ::std::string* mutable_exception_message();
  ::std::string* release_exception_message();
  void set_allocated_exception_message(::std::string* exception_message);

  // optional string class_name = 4;
  void clear_class_name();
  static const int kClassNameFieldNumber = 4;
  const ::std::string& class_name() const;
  void set_class_name(const ::std::string& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  ::std::string* mutable_class_name();
  ::std::string* release_class_name();
  void set_allocated_class_name(::std::string* class_name);

  // optional string function_name = 5;
  void clear_function_name();
  static const int kFunctionNameFieldNumber = 5;
  const ::std::string& function_name() const;
  void set_function_name(const ::std::string& value);
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  ::std::string* mutable_function_name();
  ::std::string* release_function_name();
  void set_allocated_function_name(::std::string* function_name);

  // optional int64 line_number = 6;
  void clear_line_number();
  static const int kLineNumberFieldNumber = 6;
  ::google::protobuf::int64 line_number() const;
  void set_line_number(::google::protobuf::int64 value);

  // optional string comment = 7;
  void clear_comment();
  static const int kCommentFieldNumber = 7;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:BioService.LogRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 detected_time_;
  ::google::protobuf::internal::ArenaStringPtr exception_message_;
  ::google::protobuf::internal::ArenaStringPtr class_name_;
  ::google::protobuf::internal::ArenaStringPtr function_name_;
  ::google::protobuf::int64 line_number_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  int message_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static LogRecord* default_instance_;
};
// -------------------------------------------------------------------

class BiometricLocation : public ::google::protobuf::Message {
 public:
  BiometricLocation();
  virtual ~BiometricLocation();

  BiometricLocation(const BiometricLocation& from);

  inline BiometricLocation& operator=(const BiometricLocation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BiometricLocation& default_instance();

  void Swap(BiometricLocation* other);

  // implements Message ----------------------------------------------

  inline BiometricLocation* New() const { return New(NULL); }

  BiometricLocation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BiometricLocation& from);
  void MergeFrom(const BiometricLocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BiometricLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float xpos = 1;
  void clear_xpos();
  static const int kXposFieldNumber = 1;
  float xpos() const;
  void set_xpos(float value);

  // optional float ypos = 2;
  void clear_ypos();
  static const int kYposFieldNumber = 2;
  float ypos() const;
  void set_ypos(float value);

  // optional float confidence = 3;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  float confidence() const;
  void set_confidence(float value);

  // optional .BioService.EntityState entity_state = 4;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 4;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // optional .BioService.Result dbresult = 5;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 5;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.BiometricLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float xpos_;
  float ypos_;
  float confidence_;
  int entity_state_;
  int dbresult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static BiometricLocation* default_instance_;
};
// -------------------------------------------------------------------

class EyesCharacteristic : public ::google::protobuf::Message {
 public:
  EyesCharacteristic();
  virtual ~EyesCharacteristic();

  EyesCharacteristic(const EyesCharacteristic& from);

  inline EyesCharacteristic& operator=(const EyesCharacteristic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EyesCharacteristic& default_instance();

  void Swap(EyesCharacteristic* other);

  // implements Message ----------------------------------------------

  inline EyesCharacteristic* New() const { return New(NULL); }

  EyesCharacteristic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EyesCharacteristic& from);
  void MergeFrom(const EyesCharacteristic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EyesCharacteristic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .BioService.BiometricLocation left_eye = 2;
  bool has_left_eye() const;
  void clear_left_eye();
  static const int kLeftEyeFieldNumber = 2;
  const ::BioService::BiometricLocation& left_eye() const;
  ::BioService::BiometricLocation* mutable_left_eye();
  ::BioService::BiometricLocation* release_left_eye();
  void set_allocated_left_eye(::BioService::BiometricLocation* left_eye);

  // optional .BioService.BiometricLocation right_eye = 3;
  bool has_right_eye() const;
  void clear_right_eye();
  static const int kRightEyeFieldNumber = 3;
  const ::BioService::BiometricLocation& right_eye() const;
  ::BioService::BiometricLocation* mutable_right_eye();
  ::BioService::BiometricLocation* release_right_eye();
  void set_allocated_right_eye(::BioService::BiometricLocation* right_eye);

  // optional .BioService.EntityState entity_state = 4;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 4;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // optional .BioService.Result dbresult = 5;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 5;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.EyesCharacteristic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::BioService::BiometricLocation* left_eye_;
  ::BioService::BiometricLocation* right_eye_;
  int entity_state_;
  int dbresult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static EyesCharacteristic* default_instance_;
};
// -------------------------------------------------------------------

class PortraitCharacteristic : public ::google::protobuf::Message {
 public:
  PortraitCharacteristic();
  virtual ~PortraitCharacteristic();

  PortraitCharacteristic(const PortraitCharacteristic& from);

  inline PortraitCharacteristic& operator=(const PortraitCharacteristic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PortraitCharacteristic& default_instance();

  void Swap(PortraitCharacteristic* other);

  // implements Message ----------------------------------------------

  inline PortraitCharacteristic* New() const { return New(NULL); }

  PortraitCharacteristic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PortraitCharacteristic& from);
  void MergeFrom(const PortraitCharacteristic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PortraitCharacteristic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.FaceCharacteristic faces = 1;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 1;
  const ::BioService::FaceCharacteristic& faces(int index) const;
  ::BioService::FaceCharacteristic* mutable_faces(int index);
  ::BioService::FaceCharacteristic* add_faces();
  ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
      faces() const;

  // @@protoc_insertion_point(class_scope:BioService.PortraitCharacteristic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic > faces_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PortraitCharacteristic* default_instance_;
};
// -------------------------------------------------------------------

class FaceCharacteristic : public ::google::protobuf::Message {
 public:
  FaceCharacteristic();
  virtual ~FaceCharacteristic();

  FaceCharacteristic(const FaceCharacteristic& from);

  inline FaceCharacteristic& operator=(const FaceCharacteristic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceCharacteristic& default_instance();

  void Swap(FaceCharacteristic* other);

  // implements Message ----------------------------------------------

  inline FaceCharacteristic* New() const { return New(NULL); }

  FaceCharacteristic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceCharacteristic& from);
  void MergeFrom(const FaceCharacteristic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaceCharacteristic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional float width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  float width() const;
  void set_width(float value);

  // optional sfixed32 age = 3;
  void clear_age();
  static const int kAgeFieldNumber = 3;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // optional .BioService.Gender gender = 4;
  void clear_gender();
  static const int kGenderFieldNumber = 4;
  ::BioService::Gender gender() const;
  void set_gender(::BioService::Gender value);

  // optional .BioService.BiometricLocation location = 5;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 5;
  const ::BioService::BiometricLocation& location() const;
  ::BioService::BiometricLocation* mutable_location();
  ::BioService::BiometricLocation* release_location();
  void set_allocated_location(::BioService::BiometricLocation* location);

  // optional .BioService.EyesCharacteristic eyes = 6;
  bool has_eyes() const;
  void clear_eyes();
  static const int kEyesFieldNumber = 6;
  const ::BioService::EyesCharacteristic& eyes() const;
  ::BioService::EyesCharacteristic* mutable_eyes();
  ::BioService::EyesCharacteristic* release_eyes();
  void set_allocated_eyes(::BioService::EyesCharacteristic* eyes);

  // optional int64 personid = 7;
  void clear_personid();
  static const int kPersonidFieldNumber = 7;
  ::google::protobuf::int64 personid() const;
  void set_personid(::google::protobuf::int64 value);

  // optional int64 photoid = 8;
  void clear_photoid();
  static const int kPhotoidFieldNumber = 8;
  ::google::protobuf::int64 photoid() const;
  void set_photoid(::google::protobuf::int64 value);

  // optional .BioService.EntityState entity_state = 9;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 9;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // optional .BioService.Result dbresult = 10;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 10;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.FaceCharacteristic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  float width_;
  ::google::protobuf::int32 age_;
  ::BioService::BiometricLocation* location_;
  ::BioService::EyesCharacteristic* eyes_;
  int gender_;
  int entity_state_;
  ::google::protobuf::int64 personid_;
  ::google::protobuf::int64 photoid_;
  int dbresult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FaceCharacteristic* default_instance_;
};
// -------------------------------------------------------------------

class FingerprintCharacteristic : public ::google::protobuf::Message {
 public:
  FingerprintCharacteristic();
  virtual ~FingerprintCharacteristic();

  FingerprintCharacteristic(const FingerprintCharacteristic& from);

  inline FingerprintCharacteristic& operator=(const FingerprintCharacteristic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FingerprintCharacteristic& default_instance();

  void Swap(FingerprintCharacteristic* other);

  // implements Message ----------------------------------------------

  inline FingerprintCharacteristic* New() const { return New(NULL); }

  FingerprintCharacteristic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FingerprintCharacteristic& from);
  void MergeFrom(const FingerprintCharacteristic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FingerprintCharacteristic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional .BioService.Finger position = 2;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::BioService::Finger position() const;
  void set_position(::BioService::Finger value);

  // optional int64 personid = 3;
  void clear_personid();
  static const int kPersonidFieldNumber = 3;
  ::google::protobuf::int64 personid() const;
  void set_personid(::google::protobuf::int64 value);

  // optional int64 photoid = 4;
  void clear_photoid();
  static const int kPhotoidFieldNumber = 4;
  ::google::protobuf::int64 photoid() const;
  void set_photoid(::google::protobuf::int64 value);

  // optional .BioService.EntityState entity_state = 5;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 5;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // optional .BioService.Result dbresult = 6;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 6;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.FingerprintCharacteristic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 personid_;
  int position_;
  int entity_state_;
  ::google::protobuf::int64 photoid_;
  int dbresult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FingerprintCharacteristic* default_instance_;
};
// -------------------------------------------------------------------

class BioIdentificationRecord : public ::google::protobuf::Message {
 public:
  BioIdentificationRecord();
  virtual ~BioIdentificationRecord();

  BioIdentificationRecord(const BioIdentificationRecord& from);

  inline BioIdentificationRecord& operator=(const BioIdentificationRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BioIdentificationRecord& default_instance();

  void Swap(BioIdentificationRecord* other);

  // implements Message ----------------------------------------------

  inline BioIdentificationRecord* New() const { return New(NULL); }

  BioIdentificationRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BioIdentificationRecord& from);
  void MergeFrom(const BioIdentificationRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BioIdentificationRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string bir_url = 1;
  void clear_bir_url();
  static const int kBirUrlFieldNumber = 1;
  const ::std::string& bir_url() const;
  void set_bir_url(const ::std::string& value);
  void set_bir_url(const char* value);
  void set_bir_url(const char* value, size_t size);
  ::std::string* mutable_bir_url();
  ::std::string* release_bir_url();
  void set_allocated_bir_url(::std::string* bir_url);

  // optional bytes bir_bytestring = 2;
  void clear_bir_bytestring();
  static const int kBirBytestringFieldNumber = 2;
  const ::std::string& bir_bytestring() const;
  void set_bir_bytestring(const ::std::string& value);
  void set_bir_bytestring(const char* value);
  void set_bir_bytestring(const void* value, size_t size);
  ::std::string* mutable_bir_bytestring();
  ::std::string* release_bir_bytestring();
  void set_allocated_bir_bytestring(::std::string* bir_bytestring);

  // @@protoc_insertion_point(class_scope:BioService.BioIdentificationRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr bir_url_;
  ::google::protobuf::internal::ArenaStringPtr bir_bytestring_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static BioIdentificationRecord* default_instance_;
};
// -------------------------------------------------------------------

class BioFingerprintData : public ::google::protobuf::Message {
 public:
  BioFingerprintData();
  virtual ~BioFingerprintData();

  BioFingerprintData(const BioFingerprintData& from);

  inline BioFingerprintData& operator=(const BioFingerprintData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BioFingerprintData& default_instance();

  void Swap(BioFingerprintData* other);

  // implements Message ----------------------------------------------

  inline BioFingerprintData* New() const { return New(NULL); }

  BioFingerprintData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BioFingerprintData& from);
  void MergeFrom(const BioFingerprintData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BioFingerprintData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.FingerprintCharacteristic characteristics = 1;
  bool has_characteristics() const;
  void clear_characteristics();
  static const int kCharacteristicsFieldNumber = 1;
  const ::BioService::FingerprintCharacteristic& characteristics() const;
  ::BioService::FingerprintCharacteristic* mutable_characteristics();
  ::BioService::FingerprintCharacteristic* release_characteristics();
  void set_allocated_characteristics(::BioService::FingerprintCharacteristic* characteristics);

  // optional .BioService.BioIdentificationRecord biometric_record = 2;
  bool has_biometric_record() const;
  void clear_biometric_record();
  static const int kBiometricRecordFieldNumber = 2;
  const ::BioService::BioIdentificationRecord& biometric_record() const;
  ::BioService::BioIdentificationRecord* mutable_biometric_record();
  ::BioService::BioIdentificationRecord* release_biometric_record();
  void set_allocated_biometric_record(::BioService::BioIdentificationRecord* biometric_record);

  // @@protoc_insertion_point(class_scope:BioService.BioFingerprintData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::FingerprintCharacteristic* characteristics_;
  ::BioService::BioIdentificationRecord* biometric_record_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static BioFingerprintData* default_instance_;
};
// -------------------------------------------------------------------

class BioPersonData : public ::google::protobuf::Message {
 public:
  BioPersonData();
  virtual ~BioPersonData();

  BioPersonData(const BioPersonData& from);

  inline BioPersonData& operator=(const BioPersonData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BioPersonData& default_instance();

  void Swap(BioPersonData* other);

  // implements Message ----------------------------------------------

  inline BioPersonData* New() const { return New(NULL); }

  BioPersonData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BioPersonData& from);
  void MergeFrom(const BioPersonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BioPersonData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 person_id = 1;
  void clear_person_id();
  static const int kPersonIdFieldNumber = 1;
  ::google::protobuf::int64 person_id() const;
  void set_person_id(::google::protobuf::int64 value);

  // repeated .BioService.BioIdentificationRecord faces = 2;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 2;
  const ::BioService::BioIdentificationRecord& faces(int index) const;
  ::BioService::BioIdentificationRecord* mutable_faces(int index);
  ::BioService::BioIdentificationRecord* add_faces();
  ::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord >&
      faces() const;

  // repeated .BioService.BioIdentificationRecord fingerprints = 3;
  int fingerprints_size() const;
  void clear_fingerprints();
  static const int kFingerprintsFieldNumber = 3;
  const ::BioService::BioIdentificationRecord& fingerprints(int index) const;
  ::BioService::BioIdentificationRecord* mutable_fingerprints(int index);
  ::BioService::BioIdentificationRecord* add_fingerprints();
  ::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord >*
      mutable_fingerprints();
  const ::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord >&
      fingerprints() const;

  // @@protoc_insertion_point(class_scope:BioService.BioPersonData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 person_id_;
  ::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord > faces_;
  ::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord > fingerprints_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static BioPersonData* default_instance_;
};
// -------------------------------------------------------------------

class BiometricData : public ::google::protobuf::Message {
 public:
  BiometricData();
  virtual ~BiometricData();

  BiometricData(const BiometricData& from);

  inline BiometricData& operator=(const BiometricData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BiometricData& default_instance();

  void Swap(BiometricData* other);

  // implements Message ----------------------------------------------

  inline BiometricData* New() const { return New(NULL); }

  BiometricData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BiometricData& from);
  void MergeFrom(const BiometricData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BiometricData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // repeated .BioService.FaceCharacteristic faces = 2;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 2;
  const ::BioService::FaceCharacteristic& faces(int index) const;
  ::BioService::FaceCharacteristic* mutable_faces(int index);
  ::BioService::FaceCharacteristic* add_faces();
  ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
      faces() const;

  // repeated .BioService.FingerprintCharacteristic fingerprints = 3;
  int fingerprints_size() const;
  void clear_fingerprints();
  static const int kFingerprintsFieldNumber = 3;
  const ::BioService::FingerprintCharacteristic& fingerprints(int index) const;
  ::BioService::FingerprintCharacteristic* mutable_fingerprints(int index);
  ::BioService::FingerprintCharacteristic* add_fingerprints();
  ::google::protobuf::RepeatedPtrField< ::BioService::FingerprintCharacteristic >*
      mutable_fingerprints();
  const ::google::protobuf::RepeatedPtrField< ::BioService::FingerprintCharacteristic >&
      fingerprints() const;

  // @@protoc_insertion_point(class_scope:BioService.BiometricData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic > faces_;
  ::google::protobuf::RepeatedPtrField< ::BioService::FingerprintCharacteristic > fingerprints_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static BiometricData* default_instance_;
};
// -------------------------------------------------------------------

class FacialImage : public ::google::protobuf::Message {
 public:
  FacialImage();
  virtual ~FacialImage();

  FacialImage(const FacialImage& from);

  inline FacialImage& operator=(const FacialImage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FacialImage& default_instance();

  void Swap(FacialImage* other);

  // implements Message ----------------------------------------------

  inline FacialImage* New() const { return New(NULL); }

  FacialImage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FacialImage& from);
  void MergeFrom(const FacialImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FacialImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 owner_biometric_data_id = 1;
  void clear_owner_biometric_data_id();
  static const int kOwnerBiometricDataIdFieldNumber = 1;
  ::google::protobuf::int64 owner_biometric_data_id() const;
  void set_owner_biometric_data_id(::google::protobuf::int64 value);

  // optional .BioService.Photo image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::BioService::Photo& image() const;
  ::BioService::Photo* mutable_image();
  ::BioService::Photo* release_image();
  void set_allocated_image(::BioService::Photo* image);

  // optional string template = 3;
  void clear_template_();
  static const int kTemplateFieldNumber = 3;
  const ::std::string& template_() const;
  void set_template_(const ::std::string& value);
  void set_template_(const char* value);
  void set_template_(const char* value, size_t size);
  ::std::string* mutable_template_();
  ::std::string* release_template_();
  void set_allocated_template_(::std::string* template_);

  // repeated .BioService.FaceCharacteristic faces = 4;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 4;
  const ::BioService::FaceCharacteristic& faces(int index) const;
  ::BioService::FaceCharacteristic* mutable_faces(int index);
  ::BioService::FaceCharacteristic* add_faces();
  ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
      faces() const;

  // optional .BioService.EntityState entity_state = 5;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 5;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // optional .BioService.Result dbresult = 6;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 6;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.FacialImage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 owner_biometric_data_id_;
  ::BioService::Photo* image_;
  ::google::protobuf::internal::ArenaStringPtr template__;
  ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic > faces_;
  int entity_state_;
  int dbresult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FacialImage* default_instance_;
};
// -------------------------------------------------------------------

class DatabaseFacialImageResponse : public ::google::protobuf::Message {
 public:
  DatabaseFacialImageResponse();
  virtual ~DatabaseFacialImageResponse();

  DatabaseFacialImageResponse(const DatabaseFacialImageResponse& from);

  inline DatabaseFacialImageResponse& operator=(const DatabaseFacialImageResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabaseFacialImageResponse& default_instance();

  void Swap(DatabaseFacialImageResponse* other);

  // implements Message ----------------------------------------------

  inline DatabaseFacialImageResponse* New() const { return New(NULL); }

  DatabaseFacialImageResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatabaseFacialImageResponse& from);
  void MergeFrom(const DatabaseFacialImageResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DatabaseFacialImageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.FaceCharacteristic faces = 1;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 1;
  const ::BioService::FaceCharacteristic& faces(int index) const;
  ::BioService::FaceCharacteristic* mutable_faces(int index);
  ::BioService::FaceCharacteristic* add_faces();
  ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
      faces() const;

  // optional .BioService.Photo image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::BioService::Photo& image() const;
  ::BioService::Photo* mutable_image();
  ::BioService::Photo* release_image();
  void set_allocated_image(::BioService::Photo* image);

  // optional .BioService.EntityState entity_state = 3;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 3;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // optional .BioService.Result dbresult = 4;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 4;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.DatabaseFacialImageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic > faces_;
  ::BioService::Photo* image_;
  int entity_state_;
  int dbresult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static DatabaseFacialImageResponse* default_instance_;
};
// -------------------------------------------------------------------

class FingerprintImage : public ::google::protobuf::Message {
 public:
  FingerprintImage();
  virtual ~FingerprintImage();

  FingerprintImage(const FingerprintImage& from);

  inline FingerprintImage& operator=(const FingerprintImage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FingerprintImage& default_instance();

  void Swap(FingerprintImage* other);

  // implements Message ----------------------------------------------

  inline FingerprintImage* New() const { return New(NULL); }

  FingerprintImage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FingerprintImage& from);
  void MergeFrom(const FingerprintImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FingerprintImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 owner_biometric_data_id = 1;
  void clear_owner_biometric_data_id();
  static const int kOwnerBiometricDataIdFieldNumber = 1;
  ::google::protobuf::int64 owner_biometric_data_id() const;
  void set_owner_biometric_data_id(::google::protobuf::int64 value);

  // optional .BioService.Photo image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::BioService::Photo& image() const;
  ::BioService::Photo* mutable_image();
  ::BioService::Photo* release_image();
  void set_allocated_image(::BioService::Photo* image);

  // optional .BioService.FingerprintCharacteristic fingerprint = 3;
  bool has_fingerprint() const;
  void clear_fingerprint();
  static const int kFingerprintFieldNumber = 3;
  const ::BioService::FingerprintCharacteristic& fingerprint() const;
  ::BioService::FingerprintCharacteristic* mutable_fingerprint();
  ::BioService::FingerprintCharacteristic* release_fingerprint();
  void set_allocated_fingerprint(::BioService::FingerprintCharacteristic* fingerprint);

  // optional .BioService.EntityState entity_state = 4;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 4;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // optional .BioService.Result dbresult = 5;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 5;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.FingerprintImage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 owner_biometric_data_id_;
  ::BioService::Photo* image_;
  ::BioService::FingerprintCharacteristic* fingerprint_;
  int entity_state_;
  int dbresult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FingerprintImage* default_instance_;
};
// -------------------------------------------------------------------

class Photo : public ::google::protobuf::Message {
 public:
  Photo();
  virtual ~Photo();

  Photo(const Photo& from);

  inline Photo& operator=(const Photo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Photo& default_instance();

  void Swap(Photo* other);

  // implements Message ----------------------------------------------

  inline Photo* New() const { return New(NULL); }

  Photo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Photo& from);
  void MergeFrom(const Photo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Photo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 datetime = 3;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 3;
  ::google::protobuf::int64 datetime() const;
  void set_datetime(::google::protobuf::int64 value);

  // optional string photo_url = 4;
  void clear_photo_url();
  static const int kPhotoUrlFieldNumber = 4;
  const ::std::string& photo_url() const;
  void set_photo_url(const ::std::string& value);
  void set_photo_url(const char* value);
  void set_photo_url(const char* value, size_t size);
  ::std::string* mutable_photo_url();
  ::std::string* release_photo_url();
  void set_allocated_photo_url(::std::string* photo_url);

  // optional bytes bytestring = 5;
  void clear_bytestring();
  static const int kBytestringFieldNumber = 5;
  const ::std::string& bytestring() const;
  void set_bytestring(const ::std::string& value);
  void set_bytestring(const char* value);
  void set_bytestring(const void* value, size_t size);
  ::std::string* mutable_bytestring();
  ::std::string* release_bytestring();
  void set_allocated_bytestring(::std::string* bytestring);

  // optional int64 width = 6;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  ::google::protobuf::int64 width() const;
  void set_width(::google::protobuf::int64 value);

  // optional int64 height = 7;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  ::google::protobuf::int64 height() const;
  void set_height(::google::protobuf::int64 value);

  // optional .BioService.PhotoOriginType origin_type = 8;
  void clear_origin_type();
  static const int kOriginTypeFieldNumber = 8;
  ::BioService::PhotoOriginType origin_type() const;
  void set_origin_type(::BioService::PhotoOriginType value);

  // optional int64 owner_id = 9;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 9;
  ::google::protobuf::int64 owner_id() const;
  void set_owner_id(::google::protobuf::int64 value);

  // optional .BioService.EntityState entity_state = 10;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 10;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // optional .BioService.Result dbresult = 11;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 11;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.Photo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 datetime_;
  ::google::protobuf::internal::ArenaStringPtr photo_url_;
  ::google::protobuf::internal::ArenaStringPtr bytestring_;
  ::google::protobuf::int64 width_;
  ::google::protobuf::int64 height_;
  ::google::protobuf::int64 owner_id_;
  int origin_type_;
  int entity_state_;
  int dbresult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Photo* default_instance_;
};
// -------------------------------------------------------------------

class Visitor : public ::google::protobuf::Message {
 public:
  Visitor();
  virtual ~Visitor();

  Visitor(const Visitor& from);

  inline Visitor& operator=(const Visitor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Visitor& default_instance();

  void Swap(Visitor* other);

  // implements Message ----------------------------------------------

  inline Visitor* New() const { return New(NULL); }

  Visitor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Visitor& from);
  void MergeFrom(const Visitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Visitor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 personid = 2;
  void clear_personid();
  static const int kPersonidFieldNumber = 2;
  ::google::protobuf::int64 personid() const;
  void set_personid(::google::protobuf::int64 value);

  // optional int64 locationid = 3;
  void clear_locationid();
  static const int kLocationidFieldNumber = 3;
  ::google::protobuf::int64 locationid() const;
  void set_locationid(::google::protobuf::int64 value);

  // optional int64 time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // optional string card_number = 5;
  void clear_card_number();
  static const int kCardNumberFieldNumber = 5;
  const ::std::string& card_number() const;
  void set_card_number(const ::std::string& value);
  void set_card_number(const char* value);
  void set_card_number(const char* value, size_t size);
  ::std::string* mutable_card_number();
  ::std::string* release_card_number();
  void set_allocated_card_number(::std::string* card_number);

  // optional .BioService.Result status = 6;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::BioService::Result status() const;
  void set_status(::BioService::Result value);

  // optional .BioService.BiometricData biometricData = 7;
  bool has_biometricdata() const;
  void clear_biometricdata();
  static const int kBiometricDataFieldNumber = 7;
  const ::BioService::BiometricData& biometricdata() const;
  ::BioService::BiometricData* mutable_biometricdata();
  ::BioService::BiometricData* release_biometricdata();
  void set_allocated_biometricdata(::BioService::BiometricData* biometricdata);

  // optional .BioService.EntityState entity_state = 8;
  void clear_entity_state();
  static const int kEntityStateFieldNumber = 8;
  ::BioService::EntityState entity_state() const;
  void set_entity_state(::BioService::EntityState value);

  // optional .BioService.Result dbresult = 9;
  void clear_dbresult();
  static const int kDbresultFieldNumber = 9;
  ::BioService::Result dbresult() const;
  void set_dbresult(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.Visitor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 personid_;
  ::google::protobuf::int64 locationid_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::internal::ArenaStringPtr card_number_;
  ::BioService::BiometricData* biometricdata_;
  int status_;
  int entity_state_;
  int dbresult_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Visitor* default_instance_;
};
// -------------------------------------------------------------------

class VisitorList : public ::google::protobuf::Message {
 public:
  VisitorList();
  virtual ~VisitorList();

  VisitorList(const VisitorList& from);

  inline VisitorList& operator=(const VisitorList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisitorList& default_instance();

  void Swap(VisitorList* other);

  // implements Message ----------------------------------------------

  inline VisitorList* New() const { return New(NULL); }

  VisitorList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisitorList& from);
  void MergeFrom(const VisitorList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisitorList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.Visitor visitors = 1;
  int visitors_size() const;
  void clear_visitors();
  static const int kVisitorsFieldNumber = 1;
  const ::BioService::Visitor& visitors(int index) const;
  ::BioService::Visitor* mutable_visitors(int index);
  ::BioService::Visitor* add_visitors();
  ::google::protobuf::RepeatedPtrField< ::BioService::Visitor >*
      mutable_visitors();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Visitor >&
      visitors() const;

  // @@protoc_insertion_point(class_scope:BioService.VisitorList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Visitor > visitors_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static VisitorList* default_instance_;
};
// -------------------------------------------------------------------

class LocationList : public ::google::protobuf::Message {
 public:
  LocationList();
  virtual ~LocationList();

  LocationList(const LocationList& from);

  inline LocationList& operator=(const LocationList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationList& default_instance();

  void Swap(LocationList* other);

  // implements Message ----------------------------------------------

  inline LocationList* New() const { return New(NULL); }

  LocationList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocationList& from);
  void MergeFrom(const LocationList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocationList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.Location locations = 1;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 1;
  const ::BioService::Location& locations(int index) const;
  ::BioService::Location* mutable_locations(int index);
  ::BioService::Location* add_locations();
  ::google::protobuf::RepeatedPtrField< ::BioService::Location >*
      mutable_locations();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Location >&
      locations() const;

  // @@protoc_insertion_point(class_scope:BioService.LocationList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Location > locations_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static LocationList* default_instance_;
};
// -------------------------------------------------------------------

class PersonList : public ::google::protobuf::Message {
 public:
  PersonList();
  virtual ~PersonList();

  PersonList(const PersonList& from);

  inline PersonList& operator=(const PersonList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonList& default_instance();

  void Swap(PersonList* other);

  // implements Message ----------------------------------------------

  inline PersonList* New() const { return New(NULL); }

  PersonList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersonList& from);
  void MergeFrom(const PersonList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PersonList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.Person persons = 1;
  int persons_size() const;
  void clear_persons();
  static const int kPersonsFieldNumber = 1;
  const ::BioService::Person& persons(int index) const;
  ::BioService::Person* mutable_persons(int index);
  ::BioService::Person* add_persons();
  ::google::protobuf::RepeatedPtrField< ::BioService::Person >*
      mutable_persons();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Person >&
      persons() const;

  // @@protoc_insertion_point(class_scope:BioService.PersonList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Person > persons_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PersonList* default_instance_;
};
// -------------------------------------------------------------------

class PhotoList : public ::google::protobuf::Message {
 public:
  PhotoList();
  virtual ~PhotoList();

  PhotoList(const PhotoList& from);

  inline PhotoList& operator=(const PhotoList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoList& default_instance();

  void Swap(PhotoList* other);

  // implements Message ----------------------------------------------

  inline PhotoList* New() const { return New(NULL); }

  PhotoList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhotoList& from);
  void MergeFrom(const PhotoList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhotoList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.Photo photos = 1;
  int photos_size() const;
  void clear_photos();
  static const int kPhotosFieldNumber = 1;
  const ::BioService::Photo& photos(int index) const;
  ::BioService::Photo* mutable_photos(int index);
  ::BioService::Photo* add_photos();
  ::google::protobuf::RepeatedPtrField< ::BioService::Photo >*
      mutable_photos();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Photo >&
      photos() const;

  // @@protoc_insertion_point(class_scope:BioService.PhotoList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Photo > photos_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PhotoList* default_instance_;
};
// -------------------------------------------------------------------

class CardList : public ::google::protobuf::Message {
 public:
  CardList();
  virtual ~CardList();

  CardList(const CardList& from);

  inline CardList& operator=(const CardList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardList& default_instance();

  void Swap(CardList* other);

  // implements Message ----------------------------------------------

  inline CardList* New() const { return New(NULL); }

  CardList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardList& from);
  void MergeFrom(const CardList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CardList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.Card cards = 1;
  int cards_size() const;
  void clear_cards();
  static const int kCardsFieldNumber = 1;
  const ::BioService::Card& cards(int index) const;
  ::BioService::Card* mutable_cards(int index);
  ::BioService::Card* add_cards();
  ::google::protobuf::RepeatedPtrField< ::BioService::Card >*
      mutable_cards();
  const ::google::protobuf::RepeatedPtrField< ::BioService::Card >&
      cards() const;

  // @@protoc_insertion_point(class_scope:BioService.CardList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::Card > cards_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static CardList* default_instance_;
};
// -------------------------------------------------------------------

class BiometricDataList : public ::google::protobuf::Message {
 public:
  BiometricDataList();
  virtual ~BiometricDataList();

  BiometricDataList(const BiometricDataList& from);

  inline BiometricDataList& operator=(const BiometricDataList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BiometricDataList& default_instance();

  void Swap(BiometricDataList* other);

  // implements Message ----------------------------------------------

  inline BiometricDataList* New() const { return New(NULL); }

  BiometricDataList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BiometricDataList& from);
  void MergeFrom(const BiometricDataList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BiometricDataList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BioService.BiometricData data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::BioService::BiometricData& data(int index) const;
  ::BioService::BiometricData* mutable_data(int index);
  ::BioService::BiometricData* add_data();
  ::google::protobuf::RepeatedPtrField< ::BioService::BiometricData >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::BioService::BiometricData >&
      data() const;

  // @@protoc_insertion_point(class_scope:BioService.BiometricDataList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::BioService::BiometricData > data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static BiometricDataList* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.Result good = 1;
  void clear_good();
  static const int kGoodFieldNumber = 1;
  ::BioService::Result good() const;
  void set_good(::BioService::Result value);

  // @@protoc_insertion_point(class_scope:BioService.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int good_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class IdentificationData : public ::google::protobuf::Message {
 public:
  IdentificationData();
  virtual ~IdentificationData();

  IdentificationData(const IdentificationData& from);

  inline IdentificationData& operator=(const IdentificationData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentificationData& default_instance();

  void Swap(IdentificationData* other);

  // implements Message ----------------------------------------------

  inline IdentificationData* New() const { return New(NULL); }

  IdentificationData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdentificationData& from);
  void MergeFrom(const IdentificationData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IdentificationData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.Photo image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::BioService::Photo& image() const;
  ::BioService::Photo* mutable_image();
  ::BioService::Photo* release_image();
  void set_allocated_image(::BioService::Photo* image);

  // repeated int64 population = 2;
  int population_size() const;
  void clear_population();
  static const int kPopulationFieldNumber = 2;
  ::google::protobuf::int64 population(int index) const;
  void set_population(int index, ::google::protobuf::int64 value);
  void add_population(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      population() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_population();

  // @@protoc_insertion_point(class_scope:BioService.IdentificationData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::Photo* image_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > population_;
  mutable int _population_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static IdentificationData* default_instance_;
};
// -------------------------------------------------------------------

class AcquiredData : public ::google::protobuf::Message {
 public:
  AcquiredData();
  virtual ~AcquiredData();

  AcquiredData(const AcquiredData& from);

  inline AcquiredData& operator=(const AcquiredData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcquiredData& default_instance();

  void Swap(AcquiredData* other);

  // implements Message ----------------------------------------------

  inline AcquiredData* New() const { return New(NULL); }

  AcquiredData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcquiredData& from);
  void MergeFrom(const AcquiredData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AcquiredData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.Photo image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::BioService::Photo& image() const;
  ::BioService::Photo* mutable_image();
  ::BioService::Photo* release_image();
  void set_allocated_image(::BioService::Photo* image);

  // optional int64 owner_id = 2;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 2;
  ::google::protobuf::int64 owner_id() const;
  void set_owner_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.AcquiredData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::Photo* image_;
  ::google::protobuf::int64 owner_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static AcquiredData* default_instance_;
};
// -------------------------------------------------------------------

class FingerprintAcquiredData : public ::google::protobuf::Message {
 public:
  FingerprintAcquiredData();
  virtual ~FingerprintAcquiredData();

  FingerprintAcquiredData(const FingerprintAcquiredData& from);

  inline FingerprintAcquiredData& operator=(const FingerprintAcquiredData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FingerprintAcquiredData& default_instance();

  void Swap(FingerprintAcquiredData* other);

  // implements Message ----------------------------------------------

  inline FingerprintAcquiredData* New() const { return New(NULL); }

  FingerprintAcquiredData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FingerprintAcquiredData& from);
  void MergeFrom(const FingerprintAcquiredData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FingerprintAcquiredData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.AcquiredData data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::BioService::AcquiredData& data() const;
  ::BioService::AcquiredData* mutable_data();
  ::BioService::AcquiredData* release_data();
  void set_allocated_data(::BioService::AcquiredData* data);

  // optional .BioService.Finger position = 2;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::BioService::Finger position() const;
  void set_position(::BioService::Finger value);

  // @@protoc_insertion_point(class_scope:BioService.FingerprintAcquiredData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::AcquiredData* data_;
  int position_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FingerprintAcquiredData* default_instance_;
};
// -------------------------------------------------------------------

class EnrollmentFeedback : public ::google::protobuf::Message {
 public:
  EnrollmentFeedback();
  virtual ~EnrollmentFeedback();

  EnrollmentFeedback(const EnrollmentFeedback& from);

  inline EnrollmentFeedback& operator=(const EnrollmentFeedback& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnrollmentFeedback& default_instance();

  void Swap(EnrollmentFeedback* other);

  // implements Message ----------------------------------------------

  inline EnrollmentFeedback* New() const { return New(NULL); }

  EnrollmentFeedback* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnrollmentFeedback& from);
  void MergeFrom(const EnrollmentFeedback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnrollmentFeedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 characteristic_id = 1;
  void clear_characteristic_id();
  static const int kCharacteristicIdFieldNumber = 1;
  ::google::protobuf::int64 characteristic_id() const;
  void set_characteristic_id(::google::protobuf::int64 value);

  // optional int64 photo_id = 2;
  void clear_photo_id();
  static const int kPhotoIdFieldNumber = 2;
  ::google::protobuf::int64 photo_id() const;
  void set_photo_id(::google::protobuf::int64 value);

  // optional sfixed32 quality = 3;
  void clear_quality();
  static const int kQualityFieldNumber = 3;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // optional .BioService.Result result = 4;
  void clear_result();
  static const int kResultFieldNumber = 4;
  ::BioService::Result result() const;
  void set_result(::BioService::Result value);

  // optional sfixed32 progress = 5;
  void clear_progress();
  static const int kProgressFieldNumber = 5;
  ::google::protobuf::int32 progress() const;
  void set_progress(::google::protobuf::int32 value);

  // optional string message = 6;
  void clear_message();
  static const int kMessageFieldNumber = 6;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:BioService.EnrollmentFeedback)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 characteristic_id_;
  ::google::protobuf::int64 photo_id_;
  ::google::protobuf::int32 quality_;
  int result_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 progress_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static EnrollmentFeedback* default_instance_;
};
// -------------------------------------------------------------------

class VerificationFeedback : public ::google::protobuf::Message {
 public:
  VerificationFeedback();
  virtual ~VerificationFeedback();

  VerificationFeedback(const VerificationFeedback& from);

  inline VerificationFeedback& operator=(const VerificationFeedback& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerificationFeedback& default_instance();

  void Swap(VerificationFeedback* other);

  // implements Message ----------------------------------------------

  inline VerificationFeedback* New() const { return New(NULL); }

  VerificationFeedback* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerificationFeedback& from);
  void MergeFrom(const VerificationFeedback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VerificationFeedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
  bool has_enrollment_feedback() const;
  void clear_enrollment_feedback();
  static const int kEnrollmentFeedbackFieldNumber = 1;
  const ::BioService::EnrollmentFeedback& enrollment_feedback() const;
  ::BioService::EnrollmentFeedback* mutable_enrollment_feedback();
  ::BioService::EnrollmentFeedback* release_enrollment_feedback();
  void set_allocated_enrollment_feedback(::BioService::EnrollmentFeedback* enrollment_feedback);

  // optional float match = 2;
  void clear_match();
  static const int kMatchFieldNumber = 2;
  float match() const;
  void set_match(float value);

  // @@protoc_insertion_point(class_scope:BioService.VerificationFeedback)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::BioService::EnrollmentFeedback* enrollment_feedback_;
  float match_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static VerificationFeedback* default_instance_;
};
// -------------------------------------------------------------------

class QueryPhoto : public ::google::protobuf::Message {
 public:
  QueryPhoto();
  virtual ~QueryPhoto();

  QueryPhoto(const QueryPhoto& from);

  inline QueryPhoto& operator=(const QueryPhoto& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPhoto& default_instance();

  void Swap(QueryPhoto* other);

  // implements Message ----------------------------------------------

  inline QueryPhoto* New() const { return New(NULL); }

  QueryPhoto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryPhoto& from);
  void MergeFrom(const QueryPhoto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryPhoto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QueryPhoto_PhotoResultType PhotoResultType;
  static const PhotoResultType Undefined = QueryPhoto_PhotoResultType_Undefined;
  static const PhotoResultType Full = QueryPhoto_PhotoResultType_Full;
  static const PhotoResultType OnlyBytes = QueryPhoto_PhotoResultType_OnlyBytes;
  static const PhotoResultType NoBytes = QueryPhoto_PhotoResultType_NoBytes;
  static inline bool PhotoResultType_IsValid(int value) {
    return QueryPhoto_PhotoResultType_IsValid(value);
  }
  static const PhotoResultType PhotoResultType_MIN =
    QueryPhoto_PhotoResultType_PhotoResultType_MIN;
  static const PhotoResultType PhotoResultType_MAX =
    QueryPhoto_PhotoResultType_PhotoResultType_MAX;
  static const int PhotoResultType_ARRAYSIZE =
    QueryPhoto_PhotoResultType_PhotoResultType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PhotoResultType_descriptor() {
    return QueryPhoto_PhotoResultType_descriptor();
  }
  static inline const ::std::string& PhotoResultType_Name(PhotoResultType value) {
    return QueryPhoto_PhotoResultType_Name(value);
  }
  static inline bool PhotoResultType_Parse(const ::std::string& name,
      PhotoResultType* value) {
    return QueryPhoto_PhotoResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .BioService.QueryPhoto.PhotoResultType with_bytes = 1;
  void clear_with_bytes();
  static const int kWithBytesFieldNumber = 1;
  ::BioService::QueryPhoto_PhotoResultType with_bytes() const;
  void set_with_bytes(::BioService::QueryPhoto_PhotoResultType value);

  // repeated int64 persons = 2;
  int persons_size() const;
  void clear_persons();
  static const int kPersonsFieldNumber = 2;
  ::google::protobuf::int64 persons(int index) const;
  void set_persons(int index, ::google::protobuf::int64 value);
  void add_persons(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      persons() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_persons();

  // repeated int64 photos = 3;
  int photos_size() const;
  void clear_photos();
  static const int kPhotosFieldNumber = 3;
  ::google::protobuf::int64 photos(int index) const;
  void set_photos(int index, ::google::protobuf::int64 value);
  void add_photos(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      photos() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_photos();

  // optional int64 items_per_page = 4;
  void clear_items_per_page();
  static const int kItemsPerPageFieldNumber = 4;
  ::google::protobuf::int64 items_per_page() const;
  void set_items_per_page(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.QueryPhoto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > persons_;
  mutable int _persons_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > photos_;
  mutable int _photos_cached_byte_size_;
  ::google::protobuf::int64 items_per_page_;
  int with_bytes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static QueryPhoto* default_instance_;
};
// -------------------------------------------------------------------

class QueryPersons : public ::google::protobuf::Message {
 public:
  QueryPersons();
  virtual ~QueryPersons();

  QueryPersons(const QueryPersons& from);

  inline QueryPersons& operator=(const QueryPersons& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPersons& default_instance();

  void Swap(QueryPersons* other);

  // implements Message ----------------------------------------------

  inline QueryPersons* New() const { return New(NULL); }

  QueryPersons* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryPersons& from);
  void MergeFrom(const QueryPersons& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryPersons* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.QueryPersons)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static QueryPersons* default_instance_;
};
// -------------------------------------------------------------------

class QueryLocations : public ::google::protobuf::Message {
 public:
  QueryLocations();
  virtual ~QueryLocations();

  QueryLocations(const QueryLocations& from);

  inline QueryLocations& operator=(const QueryLocations& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryLocations& default_instance();

  void Swap(QueryLocations* other);

  // implements Message ----------------------------------------------

  inline QueryLocations* New() const { return New(NULL); }

  QueryLocations* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryLocations& from);
  void MergeFrom(const QueryLocations& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryLocations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.QueryLocations)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static QueryLocations* default_instance_;
};
// -------------------------------------------------------------------

class QueryVisitors : public ::google::protobuf::Message {
 public:
  QueryVisitors();
  virtual ~QueryVisitors();

  QueryVisitors(const QueryVisitors& from);

  inline QueryVisitors& operator=(const QueryVisitors& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryVisitors& default_instance();

  void Swap(QueryVisitors* other);

  // implements Message ----------------------------------------------

  inline QueryVisitors* New() const { return New(NULL); }

  QueryVisitors* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryVisitors& from);
  void MergeFrom(const QueryVisitors& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryVisitors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string countries = 2;
  int countries_size() const;
  void clear_countries();
  static const int kCountriesFieldNumber = 2;
  const ::std::string& countries(int index) const;
  ::std::string* mutable_countries(int index);
  void set_countries(int index, const ::std::string& value);
  void set_countries(int index, const char* value);
  void set_countries(int index, const char* value, size_t size);
  ::std::string* add_countries();
  void add_countries(const ::std::string& value);
  void add_countries(const char* value);
  void add_countries(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& countries() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_countries();

  // repeated int64 locations = 3;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 3;
  ::google::protobuf::int64 locations(int index) const;
  void set_locations(int index, ::google::protobuf::int64 value);
  void add_locations(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      locations() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_locations();

  // repeated int64 persons = 4;
  int persons_size() const;
  void clear_persons();
  static const int kPersonsFieldNumber = 4;
  ::google::protobuf::int64 persons(int index) const;
  void set_persons(int index, ::google::protobuf::int64 value);
  void add_persons(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      persons() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_persons();

  // optional int64 datetime_from = 5;
  void clear_datetime_from();
  static const int kDatetimeFromFieldNumber = 5;
  ::google::protobuf::int64 datetime_from() const;
  void set_datetime_from(::google::protobuf::int64 value);

  // optional int64 datetime_to = 6;
  void clear_datetime_to();
  static const int kDatetimeToFieldNumber = 6;
  ::google::protobuf::int64 datetime_to() const;
  void set_datetime_to(::google::protobuf::int64 value);

  // optional int64 items_per_page = 7;
  void clear_items_per_page();
  static const int kItemsPerPageFieldNumber = 7;
  ::google::protobuf::int64 items_per_page() const;
  void set_items_per_page(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BioService.QueryVisitors)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> countries_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > locations_;
  mutable int _locations_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > persons_;
  mutable int _persons_cached_byte_size_;
  ::google::protobuf::int64 datetime_from_;
  ::google::protobuf::int64 datetime_to_;
  ::google::protobuf::int64 items_per_page_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static QueryVisitors* default_instance_;
};
// -------------------------------------------------------------------

class SocketConfiguration : public ::google::protobuf::Message {
 public:
  SocketConfiguration();
  virtual ~SocketConfiguration();

  SocketConfiguration(const SocketConfiguration& from);

  inline SocketConfiguration& operator=(const SocketConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SocketConfiguration& default_instance();

  void Swap(SocketConfiguration* other);

  // implements Message ----------------------------------------------

  inline SocketConfiguration* New() const { return New(NULL); }

  SocketConfiguration* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SocketConfiguration& from);
  void MergeFrom(const SocketConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SocketConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:BioService.SocketConfiguration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SocketConfiguration* default_instance_;
};
// -------------------------------------------------------------------

class BioClient : public ::google::protobuf::Message {
 public:
  BioClient();
  virtual ~BioClient();

  BioClient(const BioClient& from);

  inline BioClient& operator=(const BioClient& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BioClient& default_instance();

  void Swap(BioClient* other);

  // implements Message ----------------------------------------------

  inline BioClient* New() const { return New(NULL); }

  BioClient* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BioClient& from);
  void MergeFrom(const BioClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BioClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip_address = 1;
  void clear_ip_address();
  static const int kIpAddressFieldNumber = 1;
  const ::std::string& ip_address() const;
  void set_ip_address(const ::std::string& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  ::std::string* mutable_ip_address();
  ::std::string* release_ip_address();
  void set_allocated_ip_address(::std::string* ip_address);

  // optional int64 port_number = 2;
  void clear_port_number();
  static const int kPortNumberFieldNumber = 2;
  ::google::protobuf::int64 port_number() const;
  void set_port_number(::google::protobuf::int64 value);

  // optional string mac_address = 3;
  void clear_mac_address();
  static const int kMacAddressFieldNumber = 3;
  const ::std::string& mac_address() const;
  void set_mac_address(const ::std::string& value);
  void set_mac_address(const char* value);
  void set_mac_address(const char* value, size_t size);
  ::std::string* mutable_mac_address();
  ::std::string* release_mac_address();
  void set_allocated_mac_address(::std::string* mac_address);

  // @@protoc_insertion_point(class_scope:BioService.BioClient)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr ip_address_;
  ::google::protobuf::int64 port_number_;
  ::google::protobuf::internal::ArenaStringPtr mac_address_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bio_5fservice_2eproto();
  friend void protobuf_AssignDesc_bio_5fservice_2eproto();
  friend void protobuf_ShutdownFile_bio_5fservice_2eproto();

  void InitAsDefaultInstance();
  static BioClient* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RawIndexes

// repeated int64 indexes = 1;
inline int RawIndexes::indexes_size() const {
  return indexes_.size();
}
inline void RawIndexes::clear_indexes() {
  indexes_.Clear();
}
inline ::google::protobuf::int64 RawIndexes::indexes(int index) const {
  // @@protoc_insertion_point(field_get:BioService.RawIndexes.indexes)
  return indexes_.Get(index);
}
inline void RawIndexes::set_indexes(int index, ::google::protobuf::int64 value) {
  indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.RawIndexes.indexes)
}
inline void RawIndexes::add_indexes(::google::protobuf::int64 value) {
  indexes_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.RawIndexes.indexes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
RawIndexes::indexes() const {
  // @@protoc_insertion_point(field_list:BioService.RawIndexes.indexes)
  return indexes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
RawIndexes::mutable_indexes() {
  // @@protoc_insertion_point(field_mutable_list:BioService.RawIndexes.indexes)
  return &indexes_;
}

// -------------------------------------------------------------------

// Criminal

// optional int64 id = 1;
inline void Criminal::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Criminal::id() const {
  // @@protoc_insertion_point(field_get:BioService.Criminal.id)
  return id_;
}
inline void Criminal::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Criminal.id)
}

// optional string description = 2;
inline void Criminal::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Criminal::description() const {
  // @@protoc_insertion_point(field_get:BioService.Criminal.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Criminal::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Criminal.description)
}
inline void Criminal::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Criminal.description)
}
inline void Criminal::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Criminal.description)
}
inline ::std::string* Criminal::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Criminal.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Criminal::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Criminal::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:BioService.Criminal.description)
}

// optional string alert = 3;
inline void Criminal::clear_alert() {
  alert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Criminal::alert() const {
  // @@protoc_insertion_point(field_get:BioService.Criminal.alert)
  return alert_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Criminal::set_alert(const ::std::string& value) {
  
  alert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Criminal.alert)
}
inline void Criminal::set_alert(const char* value) {
  
  alert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Criminal.alert)
}
inline void Criminal::set_alert(const char* value, size_t size) {
  
  alert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Criminal.alert)
}
inline ::std::string* Criminal::mutable_alert() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Criminal.alert)
  return alert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Criminal::release_alert() {
  
  return alert_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Criminal::set_allocated_alert(::std::string* alert) {
  if (alert != NULL) {
    
  } else {
    
  }
  alert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alert);
  // @@protoc_insertion_point(field_set_allocated:BioService.Criminal.alert)
}

// -------------------------------------------------------------------

// FullVisitorData

// optional .BioService.Visitor visitor = 1;
inline bool FullVisitorData::has_visitor() const {
  return !_is_default_instance_ && visitor_ != NULL;
}
inline void FullVisitorData::clear_visitor() {
  if (GetArenaNoVirtual() == NULL && visitor_ != NULL) delete visitor_;
  visitor_ = NULL;
}
inline const ::BioService::Visitor& FullVisitorData::visitor() const {
  // @@protoc_insertion_point(field_get:BioService.FullVisitorData.visitor)
  return visitor_ != NULL ? *visitor_ : *default_instance_->visitor_;
}
inline ::BioService::Visitor* FullVisitorData::mutable_visitor() {
  
  if (visitor_ == NULL) {
    visitor_ = new ::BioService::Visitor;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FullVisitorData.visitor)
  return visitor_;
}
inline ::BioService::Visitor* FullVisitorData::release_visitor() {
  
  ::BioService::Visitor* temp = visitor_;
  visitor_ = NULL;
  return temp;
}
inline void FullVisitorData::set_allocated_visitor(::BioService::Visitor* visitor) {
  delete visitor_;
  visitor_ = visitor;
  if (visitor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FullVisitorData.visitor)
}

// optional .BioService.FacialImage face = 2;
inline bool FullVisitorData::has_face() const {
  return !_is_default_instance_ && face_ != NULL;
}
inline void FullVisitorData::clear_face() {
  if (GetArenaNoVirtual() == NULL && face_ != NULL) delete face_;
  face_ = NULL;
}
inline const ::BioService::FacialImage& FullVisitorData::face() const {
  // @@protoc_insertion_point(field_get:BioService.FullVisitorData.face)
  return face_ != NULL ? *face_ : *default_instance_->face_;
}
inline ::BioService::FacialImage* FullVisitorData::mutable_face() {
  
  if (face_ == NULL) {
    face_ = new ::BioService::FacialImage;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FullVisitorData.face)
  return face_;
}
inline ::BioService::FacialImage* FullVisitorData::release_face() {
  
  ::BioService::FacialImage* temp = face_;
  face_ = NULL;
  return temp;
}
inline void FullVisitorData::set_allocated_face(::BioService::FacialImage* face) {
  delete face_;
  face_ = face;
  if (face) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FullVisitorData.face)
}

// optional .BioService.FingerprintImage fingerprint = 3;
inline bool FullVisitorData::has_fingerprint() const {
  return !_is_default_instance_ && fingerprint_ != NULL;
}
inline void FullVisitorData::clear_fingerprint() {
  if (GetArenaNoVirtual() == NULL && fingerprint_ != NULL) delete fingerprint_;
  fingerprint_ = NULL;
}
inline const ::BioService::FingerprintImage& FullVisitorData::fingerprint() const {
  // @@protoc_insertion_point(field_get:BioService.FullVisitorData.fingerprint)
  return fingerprint_ != NULL ? *fingerprint_ : *default_instance_->fingerprint_;
}
inline ::BioService::FingerprintImage* FullVisitorData::mutable_fingerprint() {
  
  if (fingerprint_ == NULL) {
    fingerprint_ = new ::BioService::FingerprintImage;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FullVisitorData.fingerprint)
  return fingerprint_;
}
inline ::BioService::FingerprintImage* FullVisitorData::release_fingerprint() {
  
  ::BioService::FingerprintImage* temp = fingerprint_;
  fingerprint_ = NULL;
  return temp;
}
inline void FullVisitorData::set_allocated_fingerprint(::BioService::FingerprintImage* fingerprint) {
  delete fingerprint_;
  fingerprint_ = fingerprint;
  if (fingerprint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FullVisitorData.fingerprint)
}

// -------------------------------------------------------------------

// Person

// optional int64 id = 1;
inline void Person::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Person::id() const {
  // @@protoc_insertion_point(field_get:BioService.Person.id)
  return id_;
}
inline void Person::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.id)
}

// optional string firstname = 2;
inline void Person::clear_firstname() {
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::firstname() const {
  // @@protoc_insertion_point(field_get:BioService.Person.firstname)
  return firstname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_firstname(const ::std::string& value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.firstname)
}
inline void Person::set_firstname(const char* value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.firstname)
}
inline void Person::set_firstname(const char* value, size_t size) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.firstname)
}
inline ::std::string* Person::mutable_firstname() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.firstname)
  return firstname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_firstname() {
  
  return firstname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_firstname(::std::string* firstname) {
  if (firstname != NULL) {
    
  } else {
    
  }
  firstname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstname);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.firstname)
}

// optional string lastname = 3;
inline void Person::clear_lastname() {
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::lastname() const {
  // @@protoc_insertion_point(field_get:BioService.Person.lastname)
  return lastname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_lastname(const ::std::string& value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.lastname)
}
inline void Person::set_lastname(const char* value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.lastname)
}
inline void Person::set_lastname(const char* value, size_t size) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.lastname)
}
inline ::std::string* Person::mutable_lastname() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.lastname)
  return lastname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_lastname() {
  
  return lastname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_lastname(::std::string* lastname) {
  if (lastname != NULL) {
    
  } else {
    
  }
  lastname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastname);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.lastname)
}

// optional int64 dateofbirth = 4;
inline void Person::clear_dateofbirth() {
  dateofbirth_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Person::dateofbirth() const {
  // @@protoc_insertion_point(field_get:BioService.Person.dateofbirth)
  return dateofbirth_;
}
inline void Person::set_dateofbirth(::google::protobuf::int64 value) {
  
  dateofbirth_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.dateofbirth)
}

// optional .BioService.Gender gender = 5;
inline void Person::clear_gender() {
  gender_ = 0;
}
inline ::BioService::Gender Person::gender() const {
  // @@protoc_insertion_point(field_get:BioService.Person.gender)
  return static_cast< ::BioService::Gender >(gender_);
}
inline void Person::set_gender(::BioService::Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.gender)
}

// optional string country = 6;
inline void Person::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::country() const {
  // @@protoc_insertion_point(field_get:BioService.Person.country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.country)
}
inline void Person::set_country(const char* value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.country)
}
inline void Person::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.country)
}
inline ::std::string* Person::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_country() {
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.country)
}

// optional string city = 7;
inline void Person::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::city() const {
  // @@protoc_insertion_point(field_get:BioService.Person.city)
  return city_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.city)
}
inline void Person::set_city(const char* value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.city)
}
inline void Person::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.city)
}
inline ::std::string* Person::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_city() {
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.city)
}

// optional string comments = 8;
inline void Person::clear_comments() {
  comments_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::comments() const {
  // @@protoc_insertion_point(field_get:BioService.Person.comments)
  return comments_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_comments(const ::std::string& value) {
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.comments)
}
inline void Person::set_comments(const char* value) {
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.comments)
}
inline void Person::set_comments(const char* value, size_t size) {
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.comments)
}
inline ::std::string* Person::mutable_comments() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.comments)
  return comments_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_comments() {
  
  return comments_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_comments(::std::string* comments) {
  if (comments != NULL) {
    
  } else {
    
  }
  comments_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comments);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.comments)
}

// optional .BioService.Rights rights = 9;
inline void Person::clear_rights() {
  rights_ = 0;
}
inline ::BioService::Rights Person::rights() const {
  // @@protoc_insertion_point(field_get:BioService.Person.rights)
  return static_cast< ::BioService::Rights >(rights_);
}
inline void Person::set_rights(::BioService::Rights value) {
  
  rights_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.rights)
}

// optional string email = 10;
inline void Person::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::email() const {
  // @@protoc_insertion_point(field_get:BioService.Person.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.email)
}
inline void Person::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.email)
}
inline void Person::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.email)
}
inline ::std::string* Person::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_email() {
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.email)
}

// optional int64 thumbnailid = 11;
inline void Person::clear_thumbnailid() {
  thumbnailid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Person::thumbnailid() const {
  // @@protoc_insertion_point(field_get:BioService.Person.thumbnailid)
  return thumbnailid_;
}
inline void Person::set_thumbnailid(::google::protobuf::int64 value) {
  
  thumbnailid_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.thumbnailid)
}

// optional .BioService.Criminal criminal = 12;
inline bool Person::has_criminal() const {
  return !_is_default_instance_ && criminal_ != NULL;
}
inline void Person::clear_criminal() {
  if (GetArenaNoVirtual() == NULL && criminal_ != NULL) delete criminal_;
  criminal_ = NULL;
}
inline const ::BioService::Criminal& Person::criminal() const {
  // @@protoc_insertion_point(field_get:BioService.Person.criminal)
  return criminal_ != NULL ? *criminal_ : *default_instance_->criminal_;
}
inline ::BioService::Criminal* Person::mutable_criminal() {
  
  if (criminal_ == NULL) {
    criminal_ = new ::BioService::Criminal;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Person.criminal)
  return criminal_;
}
inline ::BioService::Criminal* Person::release_criminal() {
  
  ::BioService::Criminal* temp = criminal_;
  criminal_ = NULL;
  return temp;
}
inline void Person::set_allocated_criminal(::BioService::Criminal* criminal) {
  delete criminal_;
  criminal_ = criminal;
  if (criminal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.criminal)
}

// repeated .BioService.Card cards = 13;
inline int Person::cards_size() const {
  return cards_.size();
}
inline void Person::clear_cards() {
  cards_.Clear();
}
inline const ::BioService::Card& Person::cards(int index) const {
  // @@protoc_insertion_point(field_get:BioService.Person.cards)
  return cards_.Get(index);
}
inline ::BioService::Card* Person::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.Person.cards)
  return cards_.Mutable(index);
}
inline ::BioService::Card* Person::add_cards() {
  // @@protoc_insertion_point(field_add:BioService.Person.cards)
  return cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Card >*
Person::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:BioService.Person.cards)
  return &cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Card >&
Person::cards() const {
  // @@protoc_insertion_point(field_list:BioService.Person.cards)
  return cards_;
}

// repeated .BioService.Photo photos = 14;
inline int Person::photos_size() const {
  return photos_.size();
}
inline void Person::clear_photos() {
  photos_.Clear();
}
inline const ::BioService::Photo& Person::photos(int index) const {
  // @@protoc_insertion_point(field_get:BioService.Person.photos)
  return photos_.Get(index);
}
inline ::BioService::Photo* Person::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.Person.photos)
  return photos_.Mutable(index);
}
inline ::BioService::Photo* Person::add_photos() {
  // @@protoc_insertion_point(field_add:BioService.Person.photos)
  return photos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Photo >*
Person::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:BioService.Person.photos)
  return &photos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Photo >&
Person::photos() const {
  // @@protoc_insertion_point(field_list:BioService.Person.photos)
  return photos_;
}

// optional .BioService.BiometricData biometric_data = 15;
inline bool Person::has_biometric_data() const {
  return !_is_default_instance_ && biometric_data_ != NULL;
}
inline void Person::clear_biometric_data() {
  if (GetArenaNoVirtual() == NULL && biometric_data_ != NULL) delete biometric_data_;
  biometric_data_ = NULL;
}
inline const ::BioService::BiometricData& Person::biometric_data() const {
  // @@protoc_insertion_point(field_get:BioService.Person.biometric_data)
  return biometric_data_ != NULL ? *biometric_data_ : *default_instance_->biometric_data_;
}
inline ::BioService::BiometricData* Person::mutable_biometric_data() {
  
  if (biometric_data_ == NULL) {
    biometric_data_ = new ::BioService::BiometricData;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Person.biometric_data)
  return biometric_data_;
}
inline ::BioService::BiometricData* Person::release_biometric_data() {
  
  ::BioService::BiometricData* temp = biometric_data_;
  biometric_data_ = NULL;
  return temp;
}
inline void Person::set_allocated_biometric_data(::BioService::BiometricData* biometric_data) {
  delete biometric_data_;
  biometric_data_ = biometric_data;
  if (biometric_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.biometric_data)
}

// optional .BioService.EntityState entity_state = 16;
inline void Person::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState Person::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.Person.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void Person::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.entity_state)
}

// optional .BioService.Result dbresult = 17;
inline void Person::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result Person::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.Person.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void Person::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.dbresult)
}

// -------------------------------------------------------------------

// AccessDevice

// optional string portname = 1;
inline void AccessDevice::clear_portname() {
  portname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessDevice::portname() const {
  // @@protoc_insertion_point(field_get:BioService.AccessDevice.portname)
  return portname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessDevice::set_portname(const ::std::string& value) {
  
  portname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.AccessDevice.portname)
}
inline void AccessDevice::set_portname(const char* value) {
  
  portname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.AccessDevice.portname)
}
inline void AccessDevice::set_portname(const char* value, size_t size) {
  
  portname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.AccessDevice.portname)
}
inline ::std::string* AccessDevice::mutable_portname() {
  
  // @@protoc_insertion_point(field_mutable:BioService.AccessDevice.portname)
  return portname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessDevice::release_portname() {
  
  return portname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessDevice::set_allocated_portname(::std::string* portname) {
  if (portname != NULL) {
    
  } else {
    
  }
  portname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portname);
  // @@protoc_insertion_point(field_set_allocated:BioService.AccessDevice.portname)
}

// optional .BioService.Result dbresult = 2;
inline void AccessDevice::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result AccessDevice::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.AccessDevice.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void AccessDevice::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.AccessDevice.dbresult)
}

// optional .BioService.EntityState entity_state = 3;
inline void AccessDevice::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState AccessDevice::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.AccessDevice.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void AccessDevice::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.AccessDevice.entity_state)
}

// -------------------------------------------------------------------

// CaptureDevice

// optional string devicename = 1;
inline void CaptureDevice::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CaptureDevice::devicename() const {
  // @@protoc_insertion_point(field_get:BioService.CaptureDevice.devicename)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CaptureDevice::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.CaptureDevice.devicename)
}
inline void CaptureDevice::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.CaptureDevice.devicename)
}
inline void CaptureDevice::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.CaptureDevice.devicename)
}
inline ::std::string* CaptureDevice::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:BioService.CaptureDevice.devicename)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CaptureDevice::release_devicename() {
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CaptureDevice::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:BioService.CaptureDevice.devicename)
}

// optional .BioService.Result dbresult = 2;
inline void CaptureDevice::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result CaptureDevice::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.CaptureDevice.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void CaptureDevice::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.CaptureDevice.dbresult)
}

// optional .BioService.EntityState entity_state = 3;
inline void CaptureDevice::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState CaptureDevice::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.CaptureDevice.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void CaptureDevice::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.CaptureDevice.entity_state)
}

// -------------------------------------------------------------------

// FingerprintDevice

// optional string devicename = 1;
inline void FingerprintDevice::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FingerprintDevice::devicename() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintDevice.devicename)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FingerprintDevice::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.FingerprintDevice.devicename)
}
inline void FingerprintDevice::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.FingerprintDevice.devicename)
}
inline void FingerprintDevice::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.FingerprintDevice.devicename)
}
inline ::std::string* FingerprintDevice::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintDevice.devicename)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FingerprintDevice::release_devicename() {
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FingerprintDevice::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintDevice.devicename)
}

// optional string serial_number = 2;
inline void FingerprintDevice::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FingerprintDevice::serial_number() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintDevice.serial_number)
  return serial_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FingerprintDevice::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.FingerprintDevice.serial_number)
}
inline void FingerprintDevice::set_serial_number(const char* value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.FingerprintDevice.serial_number)
}
inline void FingerprintDevice::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.FingerprintDevice.serial_number)
}
inline ::std::string* FingerprintDevice::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintDevice.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FingerprintDevice::release_serial_number() {
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FingerprintDevice::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintDevice.serial_number)
}

// optional .BioService.Result dbresult = 3;
inline void FingerprintDevice::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result FingerprintDevice::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintDevice.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void FingerprintDevice::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintDevice.dbresult)
}

// optional .BioService.EntityState entity_state = 4;
inline void FingerprintDevice::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState FingerprintDevice::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintDevice.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void FingerprintDevice::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintDevice.entity_state)
}

// -------------------------------------------------------------------

// IrisDevice

// optional string devicename = 1;
inline void IrisDevice::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IrisDevice::devicename() const {
  // @@protoc_insertion_point(field_get:BioService.IrisDevice.devicename)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IrisDevice::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.IrisDevice.devicename)
}
inline void IrisDevice::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.IrisDevice.devicename)
}
inline void IrisDevice::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.IrisDevice.devicename)
}
inline ::std::string* IrisDevice::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:BioService.IrisDevice.devicename)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IrisDevice::release_devicename() {
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IrisDevice::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:BioService.IrisDevice.devicename)
}

// optional string serial_number = 2;
inline void IrisDevice::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IrisDevice::serial_number() const {
  // @@protoc_insertion_point(field_get:BioService.IrisDevice.serial_number)
  return serial_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IrisDevice::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.IrisDevice.serial_number)
}
inline void IrisDevice::set_serial_number(const char* value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.IrisDevice.serial_number)
}
inline void IrisDevice::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.IrisDevice.serial_number)
}
inline ::std::string* IrisDevice::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:BioService.IrisDevice.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IrisDevice::release_serial_number() {
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IrisDevice::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:BioService.IrisDevice.serial_number)
}

// optional .BioService.Result dbresult = 3;
inline void IrisDevice::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result IrisDevice::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.IrisDevice.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void IrisDevice::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.IrisDevice.dbresult)
}

// optional .BioService.EntityState entity_state = 4;
inline void IrisDevice::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState IrisDevice::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.IrisDevice.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void IrisDevice::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.IrisDevice.entity_state)
}

// -------------------------------------------------------------------

// Card

// optional int64 id = 1;
inline void Card::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Card::id() const {
  // @@protoc_insertion_point(field_get:BioService.Card.id)
  return id_;
}
inline void Card::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Card.id)
}

// optional int64 personid = 2;
inline void Card::clear_personid() {
  personid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Card::personid() const {
  // @@protoc_insertion_point(field_get:BioService.Card.personid)
  return personid_;
}
inline void Card::set_personid(::google::protobuf::int64 value) {
  
  personid_ = value;
  // @@protoc_insertion_point(field_set:BioService.Card.personid)
}

// optional string unique_number = 3;
inline void Card::clear_unique_number() {
  unique_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::unique_number() const {
  // @@protoc_insertion_point(field_get:BioService.Card.unique_number)
  return unique_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_unique_number(const ::std::string& value) {
  
  unique_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Card.unique_number)
}
inline void Card::set_unique_number(const char* value) {
  
  unique_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Card.unique_number)
}
inline void Card::set_unique_number(const char* value, size_t size) {
  
  unique_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Card.unique_number)
}
inline ::std::string* Card::mutable_unique_number() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Card.unique_number)
  return unique_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_unique_number() {
  
  return unique_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_unique_number(::std::string* unique_number) {
  if (unique_number != NULL) {
    
  } else {
    
  }
  unique_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_number);
  // @@protoc_insertion_point(field_set_allocated:BioService.Card.unique_number)
}

// optional .BioService.EntityState entity_state = 4;
inline void Card::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState Card::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.Card.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void Card::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.Card.entity_state)
}

// optional .BioService.Result dbresult = 5;
inline void Card::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result Card::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.Card.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void Card::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.Card.dbresult)
}

// -------------------------------------------------------------------

// Location

// optional int64 id = 1;
inline void Location::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Location::id() const {
  // @@protoc_insertion_point(field_get:BioService.Location.id)
  return id_;
}
inline void Location::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Location.id)
}

// optional string location_name = 2;
inline void Location::clear_location_name() {
  location_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::location_name() const {
  // @@protoc_insertion_point(field_get:BioService.Location.location_name)
  return location_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_location_name(const ::std::string& value) {
  
  location_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Location.location_name)
}
inline void Location::set_location_name(const char* value) {
  
  location_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Location.location_name)
}
inline void Location::set_location_name(const char* value, size_t size) {
  
  location_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Location.location_name)
}
inline ::std::string* Location::mutable_location_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Location.location_name)
  return location_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_location_name() {
  
  return location_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_location_name(::std::string* location_name) {
  if (location_name != NULL) {
    
  } else {
    
  }
  location_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.location_name)
}

// optional string description = 3;
inline void Location::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::description() const {
  // @@protoc_insertion_point(field_get:BioService.Location.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Location.description)
}
inline void Location::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Location.description)
}
inline void Location::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Location.description)
}
inline ::std::string* Location::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Location.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.description)
}

// optional string mac_address = 4;
inline void Location::clear_mac_address() {
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Location::mac_address() const {
  // @@protoc_insertion_point(field_get:BioService.Location.mac_address)
  return mac_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_mac_address(const ::std::string& value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Location.mac_address)
}
inline void Location::set_mac_address(const char* value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Location.mac_address)
}
inline void Location::set_mac_address(const char* value, size_t size) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Location.mac_address)
}
inline ::std::string* Location::mutable_mac_address() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Location.mac_address)
  return mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_mac_address() {
  
  return mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Location::set_allocated_mac_address(::std::string* mac_address) {
  if (mac_address != NULL) {
    
  } else {
    
  }
  mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_address);
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.mac_address)
}

// optional .BioService.CaptureDevice captureDevice = 5;
inline bool Location::has_capturedevice() const {
  return !_is_default_instance_ && capturedevice_ != NULL;
}
inline void Location::clear_capturedevice() {
  if (GetArenaNoVirtual() == NULL && capturedevice_ != NULL) delete capturedevice_;
  capturedevice_ = NULL;
}
inline const ::BioService::CaptureDevice& Location::capturedevice() const {
  // @@protoc_insertion_point(field_get:BioService.Location.captureDevice)
  return capturedevice_ != NULL ? *capturedevice_ : *default_instance_->capturedevice_;
}
inline ::BioService::CaptureDevice* Location::mutable_capturedevice() {
  
  if (capturedevice_ == NULL) {
    capturedevice_ = new ::BioService::CaptureDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.captureDevice)
  return capturedevice_;
}
inline ::BioService::CaptureDevice* Location::release_capturedevice() {
  
  ::BioService::CaptureDevice* temp = capturedevice_;
  capturedevice_ = NULL;
  return temp;
}
inline void Location::set_allocated_capturedevice(::BioService::CaptureDevice* capturedevice) {
  delete capturedevice_;
  capturedevice_ = capturedevice;
  if (capturedevice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.captureDevice)
}

// optional .BioService.AccessDevice accessDevice = 6;
inline bool Location::has_accessdevice() const {
  return !_is_default_instance_ && accessdevice_ != NULL;
}
inline void Location::clear_accessdevice() {
  if (GetArenaNoVirtual() == NULL && accessdevice_ != NULL) delete accessdevice_;
  accessdevice_ = NULL;
}
inline const ::BioService::AccessDevice& Location::accessdevice() const {
  // @@protoc_insertion_point(field_get:BioService.Location.accessDevice)
  return accessdevice_ != NULL ? *accessdevice_ : *default_instance_->accessdevice_;
}
inline ::BioService::AccessDevice* Location::mutable_accessdevice() {
  
  if (accessdevice_ == NULL) {
    accessdevice_ = new ::BioService::AccessDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.accessDevice)
  return accessdevice_;
}
inline ::BioService::AccessDevice* Location::release_accessdevice() {
  
  ::BioService::AccessDevice* temp = accessdevice_;
  accessdevice_ = NULL;
  return temp;
}
inline void Location::set_allocated_accessdevice(::BioService::AccessDevice* accessdevice) {
  delete accessdevice_;
  accessdevice_ = accessdevice;
  if (accessdevice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.accessDevice)
}

// optional .BioService.FingerprintDevice fingerprintDevice = 7;
inline bool Location::has_fingerprintdevice() const {
  return !_is_default_instance_ && fingerprintdevice_ != NULL;
}
inline void Location::clear_fingerprintdevice() {
  if (GetArenaNoVirtual() == NULL && fingerprintdevice_ != NULL) delete fingerprintdevice_;
  fingerprintdevice_ = NULL;
}
inline const ::BioService::FingerprintDevice& Location::fingerprintdevice() const {
  // @@protoc_insertion_point(field_get:BioService.Location.fingerprintDevice)
  return fingerprintdevice_ != NULL ? *fingerprintdevice_ : *default_instance_->fingerprintdevice_;
}
inline ::BioService::FingerprintDevice* Location::mutable_fingerprintdevice() {
  
  if (fingerprintdevice_ == NULL) {
    fingerprintdevice_ = new ::BioService::FingerprintDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.fingerprintDevice)
  return fingerprintdevice_;
}
inline ::BioService::FingerprintDevice* Location::release_fingerprintdevice() {
  
  ::BioService::FingerprintDevice* temp = fingerprintdevice_;
  fingerprintdevice_ = NULL;
  return temp;
}
inline void Location::set_allocated_fingerprintdevice(::BioService::FingerprintDevice* fingerprintdevice) {
  delete fingerprintdevice_;
  fingerprintdevice_ = fingerprintdevice;
  if (fingerprintdevice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.fingerprintDevice)
}

// optional .BioService.IrisDevice irisDevice = 8;
inline bool Location::has_irisdevice() const {
  return !_is_default_instance_ && irisdevice_ != NULL;
}
inline void Location::clear_irisdevice() {
  if (GetArenaNoVirtual() == NULL && irisdevice_ != NULL) delete irisdevice_;
  irisdevice_ = NULL;
}
inline const ::BioService::IrisDevice& Location::irisdevice() const {
  // @@protoc_insertion_point(field_get:BioService.Location.irisDevice)
  return irisdevice_ != NULL ? *irisdevice_ : *default_instance_->irisdevice_;
}
inline ::BioService::IrisDevice* Location::mutable_irisdevice() {
  
  if (irisdevice_ == NULL) {
    irisdevice_ = new ::BioService::IrisDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.irisDevice)
  return irisdevice_;
}
inline ::BioService::IrisDevice* Location::release_irisdevice() {
  
  ::BioService::IrisDevice* temp = irisdevice_;
  irisdevice_ = NULL;
  return temp;
}
inline void Location::set_allocated_irisdevice(::BioService::IrisDevice* irisdevice) {
  delete irisdevice_;
  irisdevice_ = irisdevice;
  if (irisdevice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.irisDevice)
}

// optional .BioService.AccessInfo access_info = 9;
inline bool Location::has_access_info() const {
  return !_is_default_instance_ && access_info_ != NULL;
}
inline void Location::clear_access_info() {
  if (GetArenaNoVirtual() == NULL && access_info_ != NULL) delete access_info_;
  access_info_ = NULL;
}
inline const ::BioService::AccessInfo& Location::access_info() const {
  // @@protoc_insertion_point(field_get:BioService.Location.access_info)
  return access_info_ != NULL ? *access_info_ : *default_instance_->access_info_;
}
inline ::BioService::AccessInfo* Location::mutable_access_info() {
  
  if (access_info_ == NULL) {
    access_info_ = new ::BioService::AccessInfo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.access_info)
  return access_info_;
}
inline ::BioService::AccessInfo* Location::release_access_info() {
  
  ::BioService::AccessInfo* temp = access_info_;
  access_info_ = NULL;
  return temp;
}
inline void Location::set_allocated_access_info(::BioService::AccessInfo* access_info) {
  delete access_info_;
  access_info_ = access_info;
  if (access_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.access_info)
}

// optional .BioService.EntityState entity_state = 10;
inline void Location::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState Location::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.Location.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void Location::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.Location.entity_state)
}

// optional .BioService.Result dbresult = 11;
inline void Location::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result Location::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.Location.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void Location::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.Location.dbresult)
}

// -------------------------------------------------------------------

// AccessInfo

// optional .BioService.AccessInfo.AccessType access_type = 1;
inline void AccessInfo::clear_access_type() {
  access_type_ = 0;
}
inline ::BioService::AccessInfo_AccessType AccessInfo::access_type() const {
  // @@protoc_insertion_point(field_get:BioService.AccessInfo.access_type)
  return static_cast< ::BioService::AccessInfo_AccessType >(access_type_);
}
inline void AccessInfo::set_access_type(::BioService::AccessInfo_AccessType value) {
  
  access_type_ = value;
  // @@protoc_insertion_point(field_set:BioService.AccessInfo.access_type)
}

// repeated .BioService.Person persons = 2;
inline int AccessInfo::persons_size() const {
  return persons_.size();
}
inline void AccessInfo::clear_persons() {
  persons_.Clear();
}
inline const ::BioService::Person& AccessInfo::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.AccessInfo.persons)
  return persons_.Get(index);
}
inline ::BioService::Person* AccessInfo::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.AccessInfo.persons)
  return persons_.Mutable(index);
}
inline ::BioService::Person* AccessInfo::add_persons() {
  // @@protoc_insertion_point(field_add:BioService.AccessInfo.persons)
  return persons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Person >*
AccessInfo::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.AccessInfo.persons)
  return &persons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Person >&
AccessInfo::persons() const {
  // @@protoc_insertion_point(field_list:BioService.AccessInfo.persons)
  return persons_;
}

// optional .BioService.EntityState entity_state = 3;
inline void AccessInfo::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState AccessInfo::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.AccessInfo.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void AccessInfo::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.AccessInfo.entity_state)
}

// optional .BioService.Result dbresult = 4;
inline void AccessInfo::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result AccessInfo::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.AccessInfo.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void AccessInfo::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.AccessInfo.dbresult)
}

// -------------------------------------------------------------------

// LogRecord

// optional .BioService.MessageType message_type = 1;
inline void LogRecord::clear_message_type() {
  message_type_ = 0;
}
inline ::BioService::MessageType LogRecord::message_type() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.message_type)
  return static_cast< ::BioService::MessageType >(message_type_);
}
inline void LogRecord::set_message_type(::BioService::MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:BioService.LogRecord.message_type)
}

// optional int64 detected_time = 2;
inline void LogRecord::clear_detected_time() {
  detected_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LogRecord::detected_time() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.detected_time)
  return detected_time_;
}
inline void LogRecord::set_detected_time(::google::protobuf::int64 value) {
  
  detected_time_ = value;
  // @@protoc_insertion_point(field_set:BioService.LogRecord.detected_time)
}

// optional string exception_message = 3;
inline void LogRecord::clear_exception_message() {
  exception_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogRecord::exception_message() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.exception_message)
  return exception_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_exception_message(const ::std::string& value) {
  
  exception_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.exception_message)
}
inline void LogRecord::set_exception_message(const char* value) {
  
  exception_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.exception_message)
}
inline void LogRecord::set_exception_message(const char* value, size_t size) {
  
  exception_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.exception_message)
}
inline ::std::string* LogRecord::mutable_exception_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.exception_message)
  return exception_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord::release_exception_message() {
  
  return exception_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_allocated_exception_message(::std::string* exception_message) {
  if (exception_message != NULL) {
    
  } else {
    
  }
  exception_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exception_message);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.exception_message)
}

// optional string class_name = 4;
inline void LogRecord::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogRecord::class_name() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.class_name)
  return class_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_class_name(const ::std::string& value) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.class_name)
}
inline void LogRecord::set_class_name(const char* value) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.class_name)
}
inline void LogRecord::set_class_name(const char* value, size_t size) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.class_name)
}
inline ::std::string* LogRecord::mutable_class_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord::release_class_name() {
  
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    
  } else {
    
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.class_name)
}

// optional string function_name = 5;
inline void LogRecord::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogRecord::function_name() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.function_name)
  return function_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_function_name(const ::std::string& value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.function_name)
}
inline void LogRecord::set_function_name(const char* value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.function_name)
}
inline void LogRecord::set_function_name(const char* value, size_t size) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.function_name)
}
inline ::std::string* LogRecord::mutable_function_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.function_name)
  return function_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord::release_function_name() {
  
  return function_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_allocated_function_name(::std::string* function_name) {
  if (function_name != NULL) {
    
  } else {
    
  }
  function_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.function_name)
}

// optional int64 line_number = 6;
inline void LogRecord::clear_line_number() {
  line_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LogRecord::line_number() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.line_number)
  return line_number_;
}
inline void LogRecord::set_line_number(::google::protobuf::int64 value) {
  
  line_number_ = value;
  // @@protoc_insertion_point(field_set:BioService.LogRecord.line_number)
}

// optional string comment = 7;
inline void LogRecord::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogRecord::comment() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.comment)
  return comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.comment)
}
inline void LogRecord::set_comment(const char* value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.comment)
}
inline void LogRecord::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.comment)
}
inline ::std::string* LogRecord::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord::release_comment() {
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.comment)
}

// -------------------------------------------------------------------

// BiometricLocation

// optional float xpos = 1;
inline void BiometricLocation::clear_xpos() {
  xpos_ = 0;
}
inline float BiometricLocation::xpos() const {
  // @@protoc_insertion_point(field_get:BioService.BiometricLocation.xpos)
  return xpos_;
}
inline void BiometricLocation::set_xpos(float value) {
  
  xpos_ = value;
  // @@protoc_insertion_point(field_set:BioService.BiometricLocation.xpos)
}

// optional float ypos = 2;
inline void BiometricLocation::clear_ypos() {
  ypos_ = 0;
}
inline float BiometricLocation::ypos() const {
  // @@protoc_insertion_point(field_get:BioService.BiometricLocation.ypos)
  return ypos_;
}
inline void BiometricLocation::set_ypos(float value) {
  
  ypos_ = value;
  // @@protoc_insertion_point(field_set:BioService.BiometricLocation.ypos)
}

// optional float confidence = 3;
inline void BiometricLocation::clear_confidence() {
  confidence_ = 0;
}
inline float BiometricLocation::confidence() const {
  // @@protoc_insertion_point(field_get:BioService.BiometricLocation.confidence)
  return confidence_;
}
inline void BiometricLocation::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:BioService.BiometricLocation.confidence)
}

// optional .BioService.EntityState entity_state = 4;
inline void BiometricLocation::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState BiometricLocation::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.BiometricLocation.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void BiometricLocation::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.BiometricLocation.entity_state)
}

// optional .BioService.Result dbresult = 5;
inline void BiometricLocation::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result BiometricLocation::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.BiometricLocation.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void BiometricLocation::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.BiometricLocation.dbresult)
}

// -------------------------------------------------------------------

// EyesCharacteristic

// optional int64 id = 1;
inline void EyesCharacteristic::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EyesCharacteristic::id() const {
  // @@protoc_insertion_point(field_get:BioService.EyesCharacteristic.id)
  return id_;
}
inline void EyesCharacteristic::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.EyesCharacteristic.id)
}

// optional .BioService.BiometricLocation left_eye = 2;
inline bool EyesCharacteristic::has_left_eye() const {
  return !_is_default_instance_ && left_eye_ != NULL;
}
inline void EyesCharacteristic::clear_left_eye() {
  if (GetArenaNoVirtual() == NULL && left_eye_ != NULL) delete left_eye_;
  left_eye_ = NULL;
}
inline const ::BioService::BiometricLocation& EyesCharacteristic::left_eye() const {
  // @@protoc_insertion_point(field_get:BioService.EyesCharacteristic.left_eye)
  return left_eye_ != NULL ? *left_eye_ : *default_instance_->left_eye_;
}
inline ::BioService::BiometricLocation* EyesCharacteristic::mutable_left_eye() {
  
  if (left_eye_ == NULL) {
    left_eye_ = new ::BioService::BiometricLocation;
  }
  // @@protoc_insertion_point(field_mutable:BioService.EyesCharacteristic.left_eye)
  return left_eye_;
}
inline ::BioService::BiometricLocation* EyesCharacteristic::release_left_eye() {
  
  ::BioService::BiometricLocation* temp = left_eye_;
  left_eye_ = NULL;
  return temp;
}
inline void EyesCharacteristic::set_allocated_left_eye(::BioService::BiometricLocation* left_eye) {
  delete left_eye_;
  left_eye_ = left_eye;
  if (left_eye) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.EyesCharacteristic.left_eye)
}

// optional .BioService.BiometricLocation right_eye = 3;
inline bool EyesCharacteristic::has_right_eye() const {
  return !_is_default_instance_ && right_eye_ != NULL;
}
inline void EyesCharacteristic::clear_right_eye() {
  if (GetArenaNoVirtual() == NULL && right_eye_ != NULL) delete right_eye_;
  right_eye_ = NULL;
}
inline const ::BioService::BiometricLocation& EyesCharacteristic::right_eye() const {
  // @@protoc_insertion_point(field_get:BioService.EyesCharacteristic.right_eye)
  return right_eye_ != NULL ? *right_eye_ : *default_instance_->right_eye_;
}
inline ::BioService::BiometricLocation* EyesCharacteristic::mutable_right_eye() {
  
  if (right_eye_ == NULL) {
    right_eye_ = new ::BioService::BiometricLocation;
  }
  // @@protoc_insertion_point(field_mutable:BioService.EyesCharacteristic.right_eye)
  return right_eye_;
}
inline ::BioService::BiometricLocation* EyesCharacteristic::release_right_eye() {
  
  ::BioService::BiometricLocation* temp = right_eye_;
  right_eye_ = NULL;
  return temp;
}
inline void EyesCharacteristic::set_allocated_right_eye(::BioService::BiometricLocation* right_eye) {
  delete right_eye_;
  right_eye_ = right_eye;
  if (right_eye) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.EyesCharacteristic.right_eye)
}

// optional .BioService.EntityState entity_state = 4;
inline void EyesCharacteristic::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState EyesCharacteristic::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.EyesCharacteristic.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void EyesCharacteristic::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.EyesCharacteristic.entity_state)
}

// optional .BioService.Result dbresult = 5;
inline void EyesCharacteristic::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result EyesCharacteristic::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.EyesCharacteristic.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void EyesCharacteristic::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.EyesCharacteristic.dbresult)
}

// -------------------------------------------------------------------

// PortraitCharacteristic

// repeated .BioService.FaceCharacteristic faces = 1;
inline int PortraitCharacteristic::faces_size() const {
  return faces_.size();
}
inline void PortraitCharacteristic::clear_faces() {
  faces_.Clear();
}
inline const ::BioService::FaceCharacteristic& PortraitCharacteristic::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PortraitCharacteristic.faces)
  return faces_.Get(index);
}
inline ::BioService::FaceCharacteristic* PortraitCharacteristic::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PortraitCharacteristic.faces)
  return faces_.Mutable(index);
}
inline ::BioService::FaceCharacteristic* PortraitCharacteristic::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.PortraitCharacteristic.faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
PortraitCharacteristic::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PortraitCharacteristic.faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
PortraitCharacteristic::faces() const {
  // @@protoc_insertion_point(field_list:BioService.PortraitCharacteristic.faces)
  return faces_;
}

// -------------------------------------------------------------------

// FaceCharacteristic

// optional int64 id = 1;
inline void FaceCharacteristic::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FaceCharacteristic::id() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.id)
  return id_;
}
inline void FaceCharacteristic::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.id)
}

// optional float width = 2;
inline void FaceCharacteristic::clear_width() {
  width_ = 0;
}
inline float FaceCharacteristic::width() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.width)
  return width_;
}
inline void FaceCharacteristic::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.width)
}

// optional sfixed32 age = 3;
inline void FaceCharacteristic::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 FaceCharacteristic::age() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.age)
  return age_;
}
inline void FaceCharacteristic::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.age)
}

// optional .BioService.Gender gender = 4;
inline void FaceCharacteristic::clear_gender() {
  gender_ = 0;
}
inline ::BioService::Gender FaceCharacteristic::gender() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.gender)
  return static_cast< ::BioService::Gender >(gender_);
}
inline void FaceCharacteristic::set_gender(::BioService::Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.gender)
}

// optional .BioService.BiometricLocation location = 5;
inline bool FaceCharacteristic::has_location() const {
  return !_is_default_instance_ && location_ != NULL;
}
inline void FaceCharacteristic::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
inline const ::BioService::BiometricLocation& FaceCharacteristic::location() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::BioService::BiometricLocation* FaceCharacteristic::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::BioService::BiometricLocation;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FaceCharacteristic.location)
  return location_;
}
inline ::BioService::BiometricLocation* FaceCharacteristic::release_location() {
  
  ::BioService::BiometricLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline void FaceCharacteristic::set_allocated_location(::BioService::BiometricLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceCharacteristic.location)
}

// optional .BioService.EyesCharacteristic eyes = 6;
inline bool FaceCharacteristic::has_eyes() const {
  return !_is_default_instance_ && eyes_ != NULL;
}
inline void FaceCharacteristic::clear_eyes() {
  if (GetArenaNoVirtual() == NULL && eyes_ != NULL) delete eyes_;
  eyes_ = NULL;
}
inline const ::BioService::EyesCharacteristic& FaceCharacteristic::eyes() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.eyes)
  return eyes_ != NULL ? *eyes_ : *default_instance_->eyes_;
}
inline ::BioService::EyesCharacteristic* FaceCharacteristic::mutable_eyes() {
  
  if (eyes_ == NULL) {
    eyes_ = new ::BioService::EyesCharacteristic;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FaceCharacteristic.eyes)
  return eyes_;
}
inline ::BioService::EyesCharacteristic* FaceCharacteristic::release_eyes() {
  
  ::BioService::EyesCharacteristic* temp = eyes_;
  eyes_ = NULL;
  return temp;
}
inline void FaceCharacteristic::set_allocated_eyes(::BioService::EyesCharacteristic* eyes) {
  delete eyes_;
  eyes_ = eyes;
  if (eyes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceCharacteristic.eyes)
}

// optional int64 personid = 7;
inline void FaceCharacteristic::clear_personid() {
  personid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FaceCharacteristic::personid() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.personid)
  return personid_;
}
inline void FaceCharacteristic::set_personid(::google::protobuf::int64 value) {
  
  personid_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.personid)
}

// optional int64 photoid = 8;
inline void FaceCharacteristic::clear_photoid() {
  photoid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FaceCharacteristic::photoid() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.photoid)
  return photoid_;
}
inline void FaceCharacteristic::set_photoid(::google::protobuf::int64 value) {
  
  photoid_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.photoid)
}

// optional .BioService.EntityState entity_state = 9;
inline void FaceCharacteristic::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState FaceCharacteristic::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void FaceCharacteristic::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.entity_state)
}

// optional .BioService.Result dbresult = 10;
inline void FaceCharacteristic::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result FaceCharacteristic::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void FaceCharacteristic::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.dbresult)
}

// -------------------------------------------------------------------

// FingerprintCharacteristic

// optional int64 id = 1;
inline void FingerprintCharacteristic::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FingerprintCharacteristic::id() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.id)
  return id_;
}
inline void FingerprintCharacteristic::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.id)
}

// optional .BioService.Finger position = 2;
inline void FingerprintCharacteristic::clear_position() {
  position_ = 0;
}
inline ::BioService::Finger FingerprintCharacteristic::position() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.position)
  return static_cast< ::BioService::Finger >(position_);
}
inline void FingerprintCharacteristic::set_position(::BioService::Finger value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.position)
}

// optional int64 personid = 3;
inline void FingerprintCharacteristic::clear_personid() {
  personid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FingerprintCharacteristic::personid() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.personid)
  return personid_;
}
inline void FingerprintCharacteristic::set_personid(::google::protobuf::int64 value) {
  
  personid_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.personid)
}

// optional int64 photoid = 4;
inline void FingerprintCharacteristic::clear_photoid() {
  photoid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FingerprintCharacteristic::photoid() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.photoid)
  return photoid_;
}
inline void FingerprintCharacteristic::set_photoid(::google::protobuf::int64 value) {
  
  photoid_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.photoid)
}

// optional .BioService.EntityState entity_state = 5;
inline void FingerprintCharacteristic::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState FingerprintCharacteristic::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void FingerprintCharacteristic::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.entity_state)
}

// optional .BioService.Result dbresult = 6;
inline void FingerprintCharacteristic::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result FingerprintCharacteristic::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void FingerprintCharacteristic::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.dbresult)
}

// -------------------------------------------------------------------

// BioIdentificationRecord

// optional string bir_url = 1;
inline void BioIdentificationRecord::clear_bir_url() {
  bir_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BioIdentificationRecord::bir_url() const {
  // @@protoc_insertion_point(field_get:BioService.BioIdentificationRecord.bir_url)
  return bir_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BioIdentificationRecord::set_bir_url(const ::std::string& value) {
  
  bir_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.BioIdentificationRecord.bir_url)
}
inline void BioIdentificationRecord::set_bir_url(const char* value) {
  
  bir_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.BioIdentificationRecord.bir_url)
}
inline void BioIdentificationRecord::set_bir_url(const char* value, size_t size) {
  
  bir_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.BioIdentificationRecord.bir_url)
}
inline ::std::string* BioIdentificationRecord::mutable_bir_url() {
  
  // @@protoc_insertion_point(field_mutable:BioService.BioIdentificationRecord.bir_url)
  return bir_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BioIdentificationRecord::release_bir_url() {
  
  return bir_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BioIdentificationRecord::set_allocated_bir_url(::std::string* bir_url) {
  if (bir_url != NULL) {
    
  } else {
    
  }
  bir_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bir_url);
  // @@protoc_insertion_point(field_set_allocated:BioService.BioIdentificationRecord.bir_url)
}

// optional bytes bir_bytestring = 2;
inline void BioIdentificationRecord::clear_bir_bytestring() {
  bir_bytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BioIdentificationRecord::bir_bytestring() const {
  // @@protoc_insertion_point(field_get:BioService.BioIdentificationRecord.bir_bytestring)
  return bir_bytestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BioIdentificationRecord::set_bir_bytestring(const ::std::string& value) {
  
  bir_bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.BioIdentificationRecord.bir_bytestring)
}
inline void BioIdentificationRecord::set_bir_bytestring(const char* value) {
  
  bir_bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.BioIdentificationRecord.bir_bytestring)
}
inline void BioIdentificationRecord::set_bir_bytestring(const void* value, size_t size) {
  
  bir_bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.BioIdentificationRecord.bir_bytestring)
}
inline ::std::string* BioIdentificationRecord::mutable_bir_bytestring() {
  
  // @@protoc_insertion_point(field_mutable:BioService.BioIdentificationRecord.bir_bytestring)
  return bir_bytestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BioIdentificationRecord::release_bir_bytestring() {
  
  return bir_bytestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BioIdentificationRecord::set_allocated_bir_bytestring(::std::string* bir_bytestring) {
  if (bir_bytestring != NULL) {
    
  } else {
    
  }
  bir_bytestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bir_bytestring);
  // @@protoc_insertion_point(field_set_allocated:BioService.BioIdentificationRecord.bir_bytestring)
}

// -------------------------------------------------------------------

// BioFingerprintData

// optional .BioService.FingerprintCharacteristic characteristics = 1;
inline bool BioFingerprintData::has_characteristics() const {
  return !_is_default_instance_ && characteristics_ != NULL;
}
inline void BioFingerprintData::clear_characteristics() {
  if (GetArenaNoVirtual() == NULL && characteristics_ != NULL) delete characteristics_;
  characteristics_ = NULL;
}
inline const ::BioService::FingerprintCharacteristic& BioFingerprintData::characteristics() const {
  // @@protoc_insertion_point(field_get:BioService.BioFingerprintData.characteristics)
  return characteristics_ != NULL ? *characteristics_ : *default_instance_->characteristics_;
}
inline ::BioService::FingerprintCharacteristic* BioFingerprintData::mutable_characteristics() {
  
  if (characteristics_ == NULL) {
    characteristics_ = new ::BioService::FingerprintCharacteristic;
  }
  // @@protoc_insertion_point(field_mutable:BioService.BioFingerprintData.characteristics)
  return characteristics_;
}
inline ::BioService::FingerprintCharacteristic* BioFingerprintData::release_characteristics() {
  
  ::BioService::FingerprintCharacteristic* temp = characteristics_;
  characteristics_ = NULL;
  return temp;
}
inline void BioFingerprintData::set_allocated_characteristics(::BioService::FingerprintCharacteristic* characteristics) {
  delete characteristics_;
  characteristics_ = characteristics;
  if (characteristics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.BioFingerprintData.characteristics)
}

// optional .BioService.BioIdentificationRecord biometric_record = 2;
inline bool BioFingerprintData::has_biometric_record() const {
  return !_is_default_instance_ && biometric_record_ != NULL;
}
inline void BioFingerprintData::clear_biometric_record() {
  if (GetArenaNoVirtual() == NULL && biometric_record_ != NULL) delete biometric_record_;
  biometric_record_ = NULL;
}
inline const ::BioService::BioIdentificationRecord& BioFingerprintData::biometric_record() const {
  // @@protoc_insertion_point(field_get:BioService.BioFingerprintData.biometric_record)
  return biometric_record_ != NULL ? *biometric_record_ : *default_instance_->biometric_record_;
}
inline ::BioService::BioIdentificationRecord* BioFingerprintData::mutable_biometric_record() {
  
  if (biometric_record_ == NULL) {
    biometric_record_ = new ::BioService::BioIdentificationRecord;
  }
  // @@protoc_insertion_point(field_mutable:BioService.BioFingerprintData.biometric_record)
  return biometric_record_;
}
inline ::BioService::BioIdentificationRecord* BioFingerprintData::release_biometric_record() {
  
  ::BioService::BioIdentificationRecord* temp = biometric_record_;
  biometric_record_ = NULL;
  return temp;
}
inline void BioFingerprintData::set_allocated_biometric_record(::BioService::BioIdentificationRecord* biometric_record) {
  delete biometric_record_;
  biometric_record_ = biometric_record;
  if (biometric_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.BioFingerprintData.biometric_record)
}

// -------------------------------------------------------------------

// BioPersonData

// optional int64 person_id = 1;
inline void BioPersonData::clear_person_id() {
  person_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BioPersonData::person_id() const {
  // @@protoc_insertion_point(field_get:BioService.BioPersonData.person_id)
  return person_id_;
}
inline void BioPersonData::set_person_id(::google::protobuf::int64 value) {
  
  person_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.BioPersonData.person_id)
}

// repeated .BioService.BioIdentificationRecord faces = 2;
inline int BioPersonData::faces_size() const {
  return faces_.size();
}
inline void BioPersonData::clear_faces() {
  faces_.Clear();
}
inline const ::BioService::BioIdentificationRecord& BioPersonData::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.BioPersonData.faces)
  return faces_.Get(index);
}
inline ::BioService::BioIdentificationRecord* BioPersonData::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.BioPersonData.faces)
  return faces_.Mutable(index);
}
inline ::BioService::BioIdentificationRecord* BioPersonData::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.BioPersonData.faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord >*
BioPersonData::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.BioPersonData.faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord >&
BioPersonData::faces() const {
  // @@protoc_insertion_point(field_list:BioService.BioPersonData.faces)
  return faces_;
}

// repeated .BioService.BioIdentificationRecord fingerprints = 3;
inline int BioPersonData::fingerprints_size() const {
  return fingerprints_.size();
}
inline void BioPersonData::clear_fingerprints() {
  fingerprints_.Clear();
}
inline const ::BioService::BioIdentificationRecord& BioPersonData::fingerprints(int index) const {
  // @@protoc_insertion_point(field_get:BioService.BioPersonData.fingerprints)
  return fingerprints_.Get(index);
}
inline ::BioService::BioIdentificationRecord* BioPersonData::mutable_fingerprints(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.BioPersonData.fingerprints)
  return fingerprints_.Mutable(index);
}
inline ::BioService::BioIdentificationRecord* BioPersonData::add_fingerprints() {
  // @@protoc_insertion_point(field_add:BioService.BioPersonData.fingerprints)
  return fingerprints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord >*
BioPersonData::mutable_fingerprints() {
  // @@protoc_insertion_point(field_mutable_list:BioService.BioPersonData.fingerprints)
  return &fingerprints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord >&
BioPersonData::fingerprints() const {
  // @@protoc_insertion_point(field_list:BioService.BioPersonData.fingerprints)
  return fingerprints_;
}

// -------------------------------------------------------------------

// BiometricData

// optional int64 id = 1;
inline void BiometricData::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BiometricData::id() const {
  // @@protoc_insertion_point(field_get:BioService.BiometricData.id)
  return id_;
}
inline void BiometricData::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.BiometricData.id)
}

// repeated .BioService.FaceCharacteristic faces = 2;
inline int BiometricData::faces_size() const {
  return faces_.size();
}
inline void BiometricData::clear_faces() {
  faces_.Clear();
}
inline const ::BioService::FaceCharacteristic& BiometricData::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.BiometricData.faces)
  return faces_.Get(index);
}
inline ::BioService::FaceCharacteristic* BiometricData::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.BiometricData.faces)
  return faces_.Mutable(index);
}
inline ::BioService::FaceCharacteristic* BiometricData::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.BiometricData.faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
BiometricData::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.BiometricData.faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
BiometricData::faces() const {
  // @@protoc_insertion_point(field_list:BioService.BiometricData.faces)
  return faces_;
}

// repeated .BioService.FingerprintCharacteristic fingerprints = 3;
inline int BiometricData::fingerprints_size() const {
  return fingerprints_.size();
}
inline void BiometricData::clear_fingerprints() {
  fingerprints_.Clear();
}
inline const ::BioService::FingerprintCharacteristic& BiometricData::fingerprints(int index) const {
  // @@protoc_insertion_point(field_get:BioService.BiometricData.fingerprints)
  return fingerprints_.Get(index);
}
inline ::BioService::FingerprintCharacteristic* BiometricData::mutable_fingerprints(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.BiometricData.fingerprints)
  return fingerprints_.Mutable(index);
}
inline ::BioService::FingerprintCharacteristic* BiometricData::add_fingerprints() {
  // @@protoc_insertion_point(field_add:BioService.BiometricData.fingerprints)
  return fingerprints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::FingerprintCharacteristic >*
BiometricData::mutable_fingerprints() {
  // @@protoc_insertion_point(field_mutable_list:BioService.BiometricData.fingerprints)
  return &fingerprints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::FingerprintCharacteristic >&
BiometricData::fingerprints() const {
  // @@protoc_insertion_point(field_list:BioService.BiometricData.fingerprints)
  return fingerprints_;
}

// -------------------------------------------------------------------

// FacialImage

// optional int64 owner_biometric_data_id = 1;
inline void FacialImage::clear_owner_biometric_data_id() {
  owner_biometric_data_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FacialImage::owner_biometric_data_id() const {
  // @@protoc_insertion_point(field_get:BioService.FacialImage.owner_biometric_data_id)
  return owner_biometric_data_id_;
}
inline void FacialImage::set_owner_biometric_data_id(::google::protobuf::int64 value) {
  
  owner_biometric_data_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FacialImage.owner_biometric_data_id)
}

// optional .BioService.Photo image = 2;
inline bool FacialImage::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
inline void FacialImage::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
inline const ::BioService::Photo& FacialImage::image() const {
  // @@protoc_insertion_point(field_get:BioService.FacialImage.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::BioService::Photo* FacialImage::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FacialImage.image)
  return image_;
}
inline ::BioService::Photo* FacialImage::release_image() {
  
  ::BioService::Photo* temp = image_;
  image_ = NULL;
  return temp;
}
inline void FacialImage::set_allocated_image(::BioService::Photo* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FacialImage.image)
}

// optional string template = 3;
inline void FacialImage::clear_template_() {
  template__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FacialImage::template_() const {
  // @@protoc_insertion_point(field_get:BioService.FacialImage.template)
  return template__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FacialImage::set_template_(const ::std::string& value) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.FacialImage.template)
}
inline void FacialImage::set_template_(const char* value) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.FacialImage.template)
}
inline void FacialImage::set_template_(const char* value, size_t size) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.FacialImage.template)
}
inline ::std::string* FacialImage::mutable_template_() {
  
  // @@protoc_insertion_point(field_mutable:BioService.FacialImage.template)
  return template__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FacialImage::release_template_() {
  
  return template__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FacialImage::set_allocated_template_(::std::string* template_) {
  if (template_ != NULL) {
    
  } else {
    
  }
  template__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), template_);
  // @@protoc_insertion_point(field_set_allocated:BioService.FacialImage.template)
}

// repeated .BioService.FaceCharacteristic faces = 4;
inline int FacialImage::faces_size() const {
  return faces_.size();
}
inline void FacialImage::clear_faces() {
  faces_.Clear();
}
inline const ::BioService::FaceCharacteristic& FacialImage::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.FacialImage.faces)
  return faces_.Get(index);
}
inline ::BioService::FaceCharacteristic* FacialImage::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.FacialImage.faces)
  return faces_.Mutable(index);
}
inline ::BioService::FaceCharacteristic* FacialImage::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.FacialImage.faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
FacialImage::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.FacialImage.faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
FacialImage::faces() const {
  // @@protoc_insertion_point(field_list:BioService.FacialImage.faces)
  return faces_;
}

// optional .BioService.EntityState entity_state = 5;
inline void FacialImage::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState FacialImage::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.FacialImage.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void FacialImage::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.FacialImage.entity_state)
}

// optional .BioService.Result dbresult = 6;
inline void FacialImage::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result FacialImage::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.FacialImage.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void FacialImage::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.FacialImage.dbresult)
}

// -------------------------------------------------------------------

// DatabaseFacialImageResponse

// repeated .BioService.FaceCharacteristic faces = 1;
inline int DatabaseFacialImageResponse::faces_size() const {
  return faces_.size();
}
inline void DatabaseFacialImageResponse::clear_faces() {
  faces_.Clear();
}
inline const ::BioService::FaceCharacteristic& DatabaseFacialImageResponse::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.DatabaseFacialImageResponse.faces)
  return faces_.Get(index);
}
inline ::BioService::FaceCharacteristic* DatabaseFacialImageResponse::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.DatabaseFacialImageResponse.faces)
  return faces_.Mutable(index);
}
inline ::BioService::FaceCharacteristic* DatabaseFacialImageResponse::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.DatabaseFacialImageResponse.faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
DatabaseFacialImageResponse::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.DatabaseFacialImageResponse.faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
DatabaseFacialImageResponse::faces() const {
  // @@protoc_insertion_point(field_list:BioService.DatabaseFacialImageResponse.faces)
  return faces_;
}

// optional .BioService.Photo image = 2;
inline bool DatabaseFacialImageResponse::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
inline void DatabaseFacialImageResponse::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
inline const ::BioService::Photo& DatabaseFacialImageResponse::image() const {
  // @@protoc_insertion_point(field_get:BioService.DatabaseFacialImageResponse.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::BioService::Photo* DatabaseFacialImageResponse::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.DatabaseFacialImageResponse.image)
  return image_;
}
inline ::BioService::Photo* DatabaseFacialImageResponse::release_image() {
  
  ::BioService::Photo* temp = image_;
  image_ = NULL;
  return temp;
}
inline void DatabaseFacialImageResponse::set_allocated_image(::BioService::Photo* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.DatabaseFacialImageResponse.image)
}

// optional .BioService.EntityState entity_state = 3;
inline void DatabaseFacialImageResponse::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState DatabaseFacialImageResponse::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.DatabaseFacialImageResponse.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void DatabaseFacialImageResponse::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.DatabaseFacialImageResponse.entity_state)
}

// optional .BioService.Result dbresult = 4;
inline void DatabaseFacialImageResponse::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result DatabaseFacialImageResponse::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.DatabaseFacialImageResponse.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void DatabaseFacialImageResponse::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.DatabaseFacialImageResponse.dbresult)
}

// -------------------------------------------------------------------

// FingerprintImage

// optional int64 owner_biometric_data_id = 1;
inline void FingerprintImage::clear_owner_biometric_data_id() {
  owner_biometric_data_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FingerprintImage::owner_biometric_data_id() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintImage.owner_biometric_data_id)
  return owner_biometric_data_id_;
}
inline void FingerprintImage::set_owner_biometric_data_id(::google::protobuf::int64 value) {
  
  owner_biometric_data_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintImage.owner_biometric_data_id)
}

// optional .BioService.Photo image = 2;
inline bool FingerprintImage::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
inline void FingerprintImage::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
inline const ::BioService::Photo& FingerprintImage::image() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintImage.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::BioService::Photo* FingerprintImage::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintImage.image)
  return image_;
}
inline ::BioService::Photo* FingerprintImage::release_image() {
  
  ::BioService::Photo* temp = image_;
  image_ = NULL;
  return temp;
}
inline void FingerprintImage::set_allocated_image(::BioService::Photo* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintImage.image)
}

// optional .BioService.FingerprintCharacteristic fingerprint = 3;
inline bool FingerprintImage::has_fingerprint() const {
  return !_is_default_instance_ && fingerprint_ != NULL;
}
inline void FingerprintImage::clear_fingerprint() {
  if (GetArenaNoVirtual() == NULL && fingerprint_ != NULL) delete fingerprint_;
  fingerprint_ = NULL;
}
inline const ::BioService::FingerprintCharacteristic& FingerprintImage::fingerprint() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintImage.fingerprint)
  return fingerprint_ != NULL ? *fingerprint_ : *default_instance_->fingerprint_;
}
inline ::BioService::FingerprintCharacteristic* FingerprintImage::mutable_fingerprint() {
  
  if (fingerprint_ == NULL) {
    fingerprint_ = new ::BioService::FingerprintCharacteristic;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintImage.fingerprint)
  return fingerprint_;
}
inline ::BioService::FingerprintCharacteristic* FingerprintImage::release_fingerprint() {
  
  ::BioService::FingerprintCharacteristic* temp = fingerprint_;
  fingerprint_ = NULL;
  return temp;
}
inline void FingerprintImage::set_allocated_fingerprint(::BioService::FingerprintCharacteristic* fingerprint) {
  delete fingerprint_;
  fingerprint_ = fingerprint;
  if (fingerprint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintImage.fingerprint)
}

// optional .BioService.EntityState entity_state = 4;
inline void FingerprintImage::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState FingerprintImage::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintImage.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void FingerprintImage::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintImage.entity_state)
}

// optional .BioService.Result dbresult = 5;
inline void FingerprintImage::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result FingerprintImage::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintImage.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void FingerprintImage::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintImage.dbresult)
}

// -------------------------------------------------------------------

// Photo

// optional int64 id = 1;
inline void Photo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Photo::id() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.id)
  return id_;
}
inline void Photo::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.id)
}

// optional int64 datetime = 3;
inline void Photo::clear_datetime() {
  datetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Photo::datetime() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.datetime)
  return datetime_;
}
inline void Photo::set_datetime(::google::protobuf::int64 value) {
  
  datetime_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.datetime)
}

// optional string photo_url = 4;
inline void Photo::clear_photo_url() {
  photo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Photo::photo_url() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.photo_url)
  return photo_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Photo::set_photo_url(const ::std::string& value) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Photo.photo_url)
}
inline void Photo::set_photo_url(const char* value) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Photo.photo_url)
}
inline void Photo::set_photo_url(const char* value, size_t size) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Photo.photo_url)
}
inline ::std::string* Photo::mutable_photo_url() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Photo.photo_url)
  return photo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Photo::release_photo_url() {
  
  return photo_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Photo::set_allocated_photo_url(::std::string* photo_url) {
  if (photo_url != NULL) {
    
  } else {
    
  }
  photo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_url);
  // @@protoc_insertion_point(field_set_allocated:BioService.Photo.photo_url)
}

// optional bytes bytestring = 5;
inline void Photo::clear_bytestring() {
  bytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Photo::bytestring() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.bytestring)
  return bytestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Photo::set_bytestring(const ::std::string& value) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Photo.bytestring)
}
inline void Photo::set_bytestring(const char* value) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Photo.bytestring)
}
inline void Photo::set_bytestring(const void* value, size_t size) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Photo.bytestring)
}
inline ::std::string* Photo::mutable_bytestring() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Photo.bytestring)
  return bytestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Photo::release_bytestring() {
  
  return bytestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Photo::set_allocated_bytestring(::std::string* bytestring) {
  if (bytestring != NULL) {
    
  } else {
    
  }
  bytestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytestring);
  // @@protoc_insertion_point(field_set_allocated:BioService.Photo.bytestring)
}

// optional int64 width = 6;
inline void Photo::clear_width() {
  width_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Photo::width() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.width)
  return width_;
}
inline void Photo::set_width(::google::protobuf::int64 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.width)
}

// optional int64 height = 7;
inline void Photo::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Photo::height() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.height)
  return height_;
}
inline void Photo::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.height)
}

// optional .BioService.PhotoOriginType origin_type = 8;
inline void Photo::clear_origin_type() {
  origin_type_ = 0;
}
inline ::BioService::PhotoOriginType Photo::origin_type() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.origin_type)
  return static_cast< ::BioService::PhotoOriginType >(origin_type_);
}
inline void Photo::set_origin_type(::BioService::PhotoOriginType value) {
  
  origin_type_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.origin_type)
}

// optional int64 owner_id = 9;
inline void Photo::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Photo::owner_id() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.owner_id)
  return owner_id_;
}
inline void Photo::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.owner_id)
}

// optional .BioService.EntityState entity_state = 10;
inline void Photo::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState Photo::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void Photo::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.entity_state)
}

// optional .BioService.Result dbresult = 11;
inline void Photo::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result Photo::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void Photo::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.dbresult)
}

// -------------------------------------------------------------------

// Visitor

// optional int64 id = 1;
inline void Visitor::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Visitor::id() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.id)
  return id_;
}
inline void Visitor::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.id)
}

// optional int64 personid = 2;
inline void Visitor::clear_personid() {
  personid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Visitor::personid() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.personid)
  return personid_;
}
inline void Visitor::set_personid(::google::protobuf::int64 value) {
  
  personid_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.personid)
}

// optional int64 locationid = 3;
inline void Visitor::clear_locationid() {
  locationid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Visitor::locationid() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.locationid)
  return locationid_;
}
inline void Visitor::set_locationid(::google::protobuf::int64 value) {
  
  locationid_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.locationid)
}

// optional int64 time = 4;
inline void Visitor::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Visitor::time() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.time)
  return time_;
}
inline void Visitor::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.time)
}

// optional string card_number = 5;
inline void Visitor::clear_card_number() {
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Visitor::card_number() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.card_number)
  return card_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Visitor::set_card_number(const ::std::string& value) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Visitor.card_number)
}
inline void Visitor::set_card_number(const char* value) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Visitor.card_number)
}
inline void Visitor::set_card_number(const char* value, size_t size) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Visitor.card_number)
}
inline ::std::string* Visitor::mutable_card_number() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Visitor.card_number)
  return card_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Visitor::release_card_number() {
  
  return card_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Visitor::set_allocated_card_number(::std::string* card_number) {
  if (card_number != NULL) {
    
  } else {
    
  }
  card_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_number);
  // @@protoc_insertion_point(field_set_allocated:BioService.Visitor.card_number)
}

// optional .BioService.Result status = 6;
inline void Visitor::clear_status() {
  status_ = 0;
}
inline ::BioService::Result Visitor::status() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.status)
  return static_cast< ::BioService::Result >(status_);
}
inline void Visitor::set_status(::BioService::Result value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.status)
}

// optional .BioService.BiometricData biometricData = 7;
inline bool Visitor::has_biometricdata() const {
  return !_is_default_instance_ && biometricdata_ != NULL;
}
inline void Visitor::clear_biometricdata() {
  if (GetArenaNoVirtual() == NULL && biometricdata_ != NULL) delete biometricdata_;
  biometricdata_ = NULL;
}
inline const ::BioService::BiometricData& Visitor::biometricdata() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.biometricData)
  return biometricdata_ != NULL ? *biometricdata_ : *default_instance_->biometricdata_;
}
inline ::BioService::BiometricData* Visitor::mutable_biometricdata() {
  
  if (biometricdata_ == NULL) {
    biometricdata_ = new ::BioService::BiometricData;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Visitor.biometricData)
  return biometricdata_;
}
inline ::BioService::BiometricData* Visitor::release_biometricdata() {
  
  ::BioService::BiometricData* temp = biometricdata_;
  biometricdata_ = NULL;
  return temp;
}
inline void Visitor::set_allocated_biometricdata(::BioService::BiometricData* biometricdata) {
  delete biometricdata_;
  biometricdata_ = biometricdata;
  if (biometricdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Visitor.biometricData)
}

// optional .BioService.EntityState entity_state = 8;
inline void Visitor::clear_entity_state() {
  entity_state_ = 0;
}
inline ::BioService::EntityState Visitor::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
inline void Visitor::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.entity_state)
}

// optional .BioService.Result dbresult = 9;
inline void Visitor::clear_dbresult() {
  dbresult_ = 0;
}
inline ::BioService::Result Visitor::dbresult() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.dbresult)
  return static_cast< ::BioService::Result >(dbresult_);
}
inline void Visitor::set_dbresult(::BioService::Result value) {
  
  dbresult_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.dbresult)
}

// -------------------------------------------------------------------

// VisitorList

// repeated .BioService.Visitor visitors = 1;
inline int VisitorList::visitors_size() const {
  return visitors_.size();
}
inline void VisitorList::clear_visitors() {
  visitors_.Clear();
}
inline const ::BioService::Visitor& VisitorList::visitors(int index) const {
  // @@protoc_insertion_point(field_get:BioService.VisitorList.visitors)
  return visitors_.Get(index);
}
inline ::BioService::Visitor* VisitorList::mutable_visitors(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.VisitorList.visitors)
  return visitors_.Mutable(index);
}
inline ::BioService::Visitor* VisitorList::add_visitors() {
  // @@protoc_insertion_point(field_add:BioService.VisitorList.visitors)
  return visitors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Visitor >*
VisitorList::mutable_visitors() {
  // @@protoc_insertion_point(field_mutable_list:BioService.VisitorList.visitors)
  return &visitors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Visitor >&
VisitorList::visitors() const {
  // @@protoc_insertion_point(field_list:BioService.VisitorList.visitors)
  return visitors_;
}

// -------------------------------------------------------------------

// LocationList

// repeated .BioService.Location locations = 1;
inline int LocationList::locations_size() const {
  return locations_.size();
}
inline void LocationList::clear_locations() {
  locations_.Clear();
}
inline const ::BioService::Location& LocationList::locations(int index) const {
  // @@protoc_insertion_point(field_get:BioService.LocationList.locations)
  return locations_.Get(index);
}
inline ::BioService::Location* LocationList::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.LocationList.locations)
  return locations_.Mutable(index);
}
inline ::BioService::Location* LocationList::add_locations() {
  // @@protoc_insertion_point(field_add:BioService.LocationList.locations)
  return locations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Location >*
LocationList::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:BioService.LocationList.locations)
  return &locations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Location >&
LocationList::locations() const {
  // @@protoc_insertion_point(field_list:BioService.LocationList.locations)
  return locations_;
}

// -------------------------------------------------------------------

// PersonList

// repeated .BioService.Person persons = 1;
inline int PersonList::persons_size() const {
  return persons_.size();
}
inline void PersonList::clear_persons() {
  persons_.Clear();
}
inline const ::BioService::Person& PersonList::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PersonList.persons)
  return persons_.Get(index);
}
inline ::BioService::Person* PersonList::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PersonList.persons)
  return persons_.Mutable(index);
}
inline ::BioService::Person* PersonList::add_persons() {
  // @@protoc_insertion_point(field_add:BioService.PersonList.persons)
  return persons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Person >*
PersonList::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PersonList.persons)
  return &persons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Person >&
PersonList::persons() const {
  // @@protoc_insertion_point(field_list:BioService.PersonList.persons)
  return persons_;
}

// -------------------------------------------------------------------

// PhotoList

// repeated .BioService.Photo photos = 1;
inline int PhotoList::photos_size() const {
  return photos_.size();
}
inline void PhotoList::clear_photos() {
  photos_.Clear();
}
inline const ::BioService::Photo& PhotoList::photos(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PhotoList.photos)
  return photos_.Get(index);
}
inline ::BioService::Photo* PhotoList::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PhotoList.photos)
  return photos_.Mutable(index);
}
inline ::BioService::Photo* PhotoList::add_photos() {
  // @@protoc_insertion_point(field_add:BioService.PhotoList.photos)
  return photos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Photo >*
PhotoList::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PhotoList.photos)
  return &photos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Photo >&
PhotoList::photos() const {
  // @@protoc_insertion_point(field_list:BioService.PhotoList.photos)
  return photos_;
}

// -------------------------------------------------------------------

// CardList

// repeated .BioService.Card cards = 1;
inline int CardList::cards_size() const {
  return cards_.size();
}
inline void CardList::clear_cards() {
  cards_.Clear();
}
inline const ::BioService::Card& CardList::cards(int index) const {
  // @@protoc_insertion_point(field_get:BioService.CardList.cards)
  return cards_.Get(index);
}
inline ::BioService::Card* CardList::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.CardList.cards)
  return cards_.Mutable(index);
}
inline ::BioService::Card* CardList::add_cards() {
  // @@protoc_insertion_point(field_add:BioService.CardList.cards)
  return cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::Card >*
CardList::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:BioService.CardList.cards)
  return &cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::Card >&
CardList::cards() const {
  // @@protoc_insertion_point(field_list:BioService.CardList.cards)
  return cards_;
}

// -------------------------------------------------------------------

// BiometricDataList

// repeated .BioService.BiometricData data = 1;
inline int BiometricDataList::data_size() const {
  return data_.size();
}
inline void BiometricDataList::clear_data() {
  data_.Clear();
}
inline const ::BioService::BiometricData& BiometricDataList::data(int index) const {
  // @@protoc_insertion_point(field_get:BioService.BiometricDataList.data)
  return data_.Get(index);
}
inline ::BioService::BiometricData* BiometricDataList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.BiometricDataList.data)
  return data_.Mutable(index);
}
inline ::BioService::BiometricData* BiometricDataList::add_data() {
  // @@protoc_insertion_point(field_add:BioService.BiometricDataList.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BioService::BiometricData >*
BiometricDataList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:BioService.BiometricDataList.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BioService::BiometricData >&
BiometricDataList::data() const {
  // @@protoc_insertion_point(field_list:BioService.BiometricDataList.data)
  return data_;
}

// -------------------------------------------------------------------

// Response

// optional .BioService.Result good = 1;
inline void Response::clear_good() {
  good_ = 0;
}
inline ::BioService::Result Response::good() const {
  // @@protoc_insertion_point(field_get:BioService.Response.good)
  return static_cast< ::BioService::Result >(good_);
}
inline void Response::set_good(::BioService::Result value) {
  
  good_ = value;
  // @@protoc_insertion_point(field_set:BioService.Response.good)
}

// -------------------------------------------------------------------

// IdentificationData

// optional .BioService.Photo image = 1;
inline bool IdentificationData::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
inline void IdentificationData::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
inline const ::BioService::Photo& IdentificationData::image() const {
  // @@protoc_insertion_point(field_get:BioService.IdentificationData.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::BioService::Photo* IdentificationData::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.IdentificationData.image)
  return image_;
}
inline ::BioService::Photo* IdentificationData::release_image() {
  
  ::BioService::Photo* temp = image_;
  image_ = NULL;
  return temp;
}
inline void IdentificationData::set_allocated_image(::BioService::Photo* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.IdentificationData.image)
}

// repeated int64 population = 2;
inline int IdentificationData::population_size() const {
  return population_.size();
}
inline void IdentificationData::clear_population() {
  population_.Clear();
}
inline ::google::protobuf::int64 IdentificationData::population(int index) const {
  // @@protoc_insertion_point(field_get:BioService.IdentificationData.population)
  return population_.Get(index);
}
inline void IdentificationData::set_population(int index, ::google::protobuf::int64 value) {
  population_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.IdentificationData.population)
}
inline void IdentificationData::add_population(::google::protobuf::int64 value) {
  population_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.IdentificationData.population)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
IdentificationData::population() const {
  // @@protoc_insertion_point(field_list:BioService.IdentificationData.population)
  return population_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
IdentificationData::mutable_population() {
  // @@protoc_insertion_point(field_mutable_list:BioService.IdentificationData.population)
  return &population_;
}

// -------------------------------------------------------------------

// AcquiredData

// optional .BioService.Photo image = 1;
inline bool AcquiredData::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
inline void AcquiredData::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
inline const ::BioService::Photo& AcquiredData::image() const {
  // @@protoc_insertion_point(field_get:BioService.AcquiredData.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::BioService::Photo* AcquiredData::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.AcquiredData.image)
  return image_;
}
inline ::BioService::Photo* AcquiredData::release_image() {
  
  ::BioService::Photo* temp = image_;
  image_ = NULL;
  return temp;
}
inline void AcquiredData::set_allocated_image(::BioService::Photo* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.AcquiredData.image)
}

// optional int64 owner_id = 2;
inline void AcquiredData::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AcquiredData::owner_id() const {
  // @@protoc_insertion_point(field_get:BioService.AcquiredData.owner_id)
  return owner_id_;
}
inline void AcquiredData::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.AcquiredData.owner_id)
}

// -------------------------------------------------------------------

// FingerprintAcquiredData

// optional .BioService.AcquiredData data = 1;
inline bool FingerprintAcquiredData::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void FingerprintAcquiredData::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::BioService::AcquiredData& FingerprintAcquiredData::data() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintAcquiredData.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::BioService::AcquiredData* FingerprintAcquiredData::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::BioService::AcquiredData;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintAcquiredData.data)
  return data_;
}
inline ::BioService::AcquiredData* FingerprintAcquiredData::release_data() {
  
  ::BioService::AcquiredData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void FingerprintAcquiredData::set_allocated_data(::BioService::AcquiredData* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintAcquiredData.data)
}

// optional .BioService.Finger position = 2;
inline void FingerprintAcquiredData::clear_position() {
  position_ = 0;
}
inline ::BioService::Finger FingerprintAcquiredData::position() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintAcquiredData.position)
  return static_cast< ::BioService::Finger >(position_);
}
inline void FingerprintAcquiredData::set_position(::BioService::Finger value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintAcquiredData.position)
}

// -------------------------------------------------------------------

// EnrollmentFeedback

// optional int64 characteristic_id = 1;
inline void EnrollmentFeedback::clear_characteristic_id() {
  characteristic_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EnrollmentFeedback::characteristic_id() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.characteristic_id)
  return characteristic_id_;
}
inline void EnrollmentFeedback::set_characteristic_id(::google::protobuf::int64 value) {
  
  characteristic_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.characteristic_id)
}

// optional int64 photo_id = 2;
inline void EnrollmentFeedback::clear_photo_id() {
  photo_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EnrollmentFeedback::photo_id() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.photo_id)
  return photo_id_;
}
inline void EnrollmentFeedback::set_photo_id(::google::protobuf::int64 value) {
  
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.photo_id)
}

// optional sfixed32 quality = 3;
inline void EnrollmentFeedback::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 EnrollmentFeedback::quality() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.quality)
  return quality_;
}
inline void EnrollmentFeedback::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.quality)
}

// optional .BioService.Result result = 4;
inline void EnrollmentFeedback::clear_result() {
  result_ = 0;
}
inline ::BioService::Result EnrollmentFeedback::result() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.result)
  return static_cast< ::BioService::Result >(result_);
}
inline void EnrollmentFeedback::set_result(::BioService::Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.result)
}

// optional sfixed32 progress = 5;
inline void EnrollmentFeedback::clear_progress() {
  progress_ = 0;
}
inline ::google::protobuf::int32 EnrollmentFeedback::progress() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.progress)
  return progress_;
}
inline void EnrollmentFeedback::set_progress(::google::protobuf::int32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.progress)
}

// optional string message = 6;
inline void EnrollmentFeedback::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnrollmentFeedback::message() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentFeedback::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.message)
}
inline void EnrollmentFeedback::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.EnrollmentFeedback.message)
}
inline void EnrollmentFeedback::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.EnrollmentFeedback.message)
}
inline ::std::string* EnrollmentFeedback::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.EnrollmentFeedback.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnrollmentFeedback::release_message() {
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnrollmentFeedback::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BioService.EnrollmentFeedback.message)
}

// -------------------------------------------------------------------

// VerificationFeedback

// optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
inline bool VerificationFeedback::has_enrollment_feedback() const {
  return !_is_default_instance_ && enrollment_feedback_ != NULL;
}
inline void VerificationFeedback::clear_enrollment_feedback() {
  if (GetArenaNoVirtual() == NULL && enrollment_feedback_ != NULL) delete enrollment_feedback_;
  enrollment_feedback_ = NULL;
}
inline const ::BioService::EnrollmentFeedback& VerificationFeedback::enrollment_feedback() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationFeedback.enrollment_feedback)
  return enrollment_feedback_ != NULL ? *enrollment_feedback_ : *default_instance_->enrollment_feedback_;
}
inline ::BioService::EnrollmentFeedback* VerificationFeedback::mutable_enrollment_feedback() {
  
  if (enrollment_feedback_ == NULL) {
    enrollment_feedback_ = new ::BioService::EnrollmentFeedback;
  }
  // @@protoc_insertion_point(field_mutable:BioService.VerificationFeedback.enrollment_feedback)
  return enrollment_feedback_;
}
inline ::BioService::EnrollmentFeedback* VerificationFeedback::release_enrollment_feedback() {
  
  ::BioService::EnrollmentFeedback* temp = enrollment_feedback_;
  enrollment_feedback_ = NULL;
  return temp;
}
inline void VerificationFeedback::set_allocated_enrollment_feedback(::BioService::EnrollmentFeedback* enrollment_feedback) {
  delete enrollment_feedback_;
  enrollment_feedback_ = enrollment_feedback;
  if (enrollment_feedback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.VerificationFeedback.enrollment_feedback)
}

// optional float match = 2;
inline void VerificationFeedback::clear_match() {
  match_ = 0;
}
inline float VerificationFeedback::match() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationFeedback.match)
  return match_;
}
inline void VerificationFeedback::set_match(float value) {
  
  match_ = value;
  // @@protoc_insertion_point(field_set:BioService.VerificationFeedback.match)
}

// -------------------------------------------------------------------

// QueryPhoto

// optional .BioService.QueryPhoto.PhotoResultType with_bytes = 1;
inline void QueryPhoto::clear_with_bytes() {
  with_bytes_ = 0;
}
inline ::BioService::QueryPhoto_PhotoResultType QueryPhoto::with_bytes() const {
  // @@protoc_insertion_point(field_get:BioService.QueryPhoto.with_bytes)
  return static_cast< ::BioService::QueryPhoto_PhotoResultType >(with_bytes_);
}
inline void QueryPhoto::set_with_bytes(::BioService::QueryPhoto_PhotoResultType value) {
  
  with_bytes_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryPhoto.with_bytes)
}

// repeated int64 persons = 2;
inline int QueryPhoto::persons_size() const {
  return persons_.size();
}
inline void QueryPhoto::clear_persons() {
  persons_.Clear();
}
inline ::google::protobuf::int64 QueryPhoto::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.QueryPhoto.persons)
  return persons_.Get(index);
}
inline void QueryPhoto::set_persons(int index, ::google::protobuf::int64 value) {
  persons_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.QueryPhoto.persons)
}
inline void QueryPhoto::add_persons(::google::protobuf::int64 value) {
  persons_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.QueryPhoto.persons)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
QueryPhoto::persons() const {
  // @@protoc_insertion_point(field_list:BioService.QueryPhoto.persons)
  return persons_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
QueryPhoto::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.QueryPhoto.persons)
  return &persons_;
}

// repeated int64 photos = 3;
inline int QueryPhoto::photos_size() const {
  return photos_.size();
}
inline void QueryPhoto::clear_photos() {
  photos_.Clear();
}
inline ::google::protobuf::int64 QueryPhoto::photos(int index) const {
  // @@protoc_insertion_point(field_get:BioService.QueryPhoto.photos)
  return photos_.Get(index);
}
inline void QueryPhoto::set_photos(int index, ::google::protobuf::int64 value) {
  photos_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.QueryPhoto.photos)
}
inline void QueryPhoto::add_photos(::google::protobuf::int64 value) {
  photos_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.QueryPhoto.photos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
QueryPhoto::photos() const {
  // @@protoc_insertion_point(field_list:BioService.QueryPhoto.photos)
  return photos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
QueryPhoto::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:BioService.QueryPhoto.photos)
  return &photos_;
}

// optional int64 items_per_page = 4;
inline void QueryPhoto::clear_items_per_page() {
  items_per_page_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryPhoto::items_per_page() const {
  // @@protoc_insertion_point(field_get:BioService.QueryPhoto.items_per_page)
  return items_per_page_;
}
inline void QueryPhoto::set_items_per_page(::google::protobuf::int64 value) {
  
  items_per_page_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryPhoto.items_per_page)
}

// -------------------------------------------------------------------

// QueryPersons

// optional int64 count = 1;
inline void QueryPersons::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryPersons::count() const {
  // @@protoc_insertion_point(field_get:BioService.QueryPersons.count)
  return count_;
}
inline void QueryPersons::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryPersons.count)
}

// -------------------------------------------------------------------

// QueryLocations

// optional int64 count = 1;
inline void QueryLocations::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryLocations::count() const {
  // @@protoc_insertion_point(field_get:BioService.QueryLocations.count)
  return count_;
}
inline void QueryLocations::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryLocations.count)
}

// -------------------------------------------------------------------

// QueryVisitors

// repeated string countries = 2;
inline int QueryVisitors::countries_size() const {
  return countries_.size();
}
inline void QueryVisitors::clear_countries() {
  countries_.Clear();
}
inline const ::std::string& QueryVisitors::countries(int index) const {
  // @@protoc_insertion_point(field_get:BioService.QueryVisitors.countries)
  return countries_.Get(index);
}
inline ::std::string* QueryVisitors::mutable_countries(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.QueryVisitors.countries)
  return countries_.Mutable(index);
}
inline void QueryVisitors::set_countries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BioService.QueryVisitors.countries)
  countries_.Mutable(index)->assign(value);
}
inline void QueryVisitors::set_countries(int index, const char* value) {
  countries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BioService.QueryVisitors.countries)
}
inline void QueryVisitors::set_countries(int index, const char* value, size_t size) {
  countries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BioService.QueryVisitors.countries)
}
inline ::std::string* QueryVisitors::add_countries() {
  return countries_.Add();
}
inline void QueryVisitors::add_countries(const ::std::string& value) {
  countries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BioService.QueryVisitors.countries)
}
inline void QueryVisitors::add_countries(const char* value) {
  countries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BioService.QueryVisitors.countries)
}
inline void QueryVisitors::add_countries(const char* value, size_t size) {
  countries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BioService.QueryVisitors.countries)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryVisitors::countries() const {
  // @@protoc_insertion_point(field_list:BioService.QueryVisitors.countries)
  return countries_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryVisitors::mutable_countries() {
  // @@protoc_insertion_point(field_mutable_list:BioService.QueryVisitors.countries)
  return &countries_;
}

// repeated int64 locations = 3;
inline int QueryVisitors::locations_size() const {
  return locations_.size();
}
inline void QueryVisitors::clear_locations() {
  locations_.Clear();
}
inline ::google::protobuf::int64 QueryVisitors::locations(int index) const {
  // @@protoc_insertion_point(field_get:BioService.QueryVisitors.locations)
  return locations_.Get(index);
}
inline void QueryVisitors::set_locations(int index, ::google::protobuf::int64 value) {
  locations_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.QueryVisitors.locations)
}
inline void QueryVisitors::add_locations(::google::protobuf::int64 value) {
  locations_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.QueryVisitors.locations)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
QueryVisitors::locations() const {
  // @@protoc_insertion_point(field_list:BioService.QueryVisitors.locations)
  return locations_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
QueryVisitors::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:BioService.QueryVisitors.locations)
  return &locations_;
}

// repeated int64 persons = 4;
inline int QueryVisitors::persons_size() const {
  return persons_.size();
}
inline void QueryVisitors::clear_persons() {
  persons_.Clear();
}
inline ::google::protobuf::int64 QueryVisitors::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.QueryVisitors.persons)
  return persons_.Get(index);
}
inline void QueryVisitors::set_persons(int index, ::google::protobuf::int64 value) {
  persons_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.QueryVisitors.persons)
}
inline void QueryVisitors::add_persons(::google::protobuf::int64 value) {
  persons_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.QueryVisitors.persons)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
QueryVisitors::persons() const {
  // @@protoc_insertion_point(field_list:BioService.QueryVisitors.persons)
  return persons_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
QueryVisitors::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.QueryVisitors.persons)
  return &persons_;
}

// optional int64 datetime_from = 5;
inline void QueryVisitors::clear_datetime_from() {
  datetime_from_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryVisitors::datetime_from() const {
  // @@protoc_insertion_point(field_get:BioService.QueryVisitors.datetime_from)
  return datetime_from_;
}
inline void QueryVisitors::set_datetime_from(::google::protobuf::int64 value) {
  
  datetime_from_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryVisitors.datetime_from)
}

// optional int64 datetime_to = 6;
inline void QueryVisitors::clear_datetime_to() {
  datetime_to_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryVisitors::datetime_to() const {
  // @@protoc_insertion_point(field_get:BioService.QueryVisitors.datetime_to)
  return datetime_to_;
}
inline void QueryVisitors::set_datetime_to(::google::protobuf::int64 value) {
  
  datetime_to_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryVisitors.datetime_to)
}

// optional int64 items_per_page = 7;
inline void QueryVisitors::clear_items_per_page() {
  items_per_page_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QueryVisitors::items_per_page() const {
  // @@protoc_insertion_point(field_get:BioService.QueryVisitors.items_per_page)
  return items_per_page_;
}
inline void QueryVisitors::set_items_per_page(::google::protobuf::int64 value) {
  
  items_per_page_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryVisitors.items_per_page)
}

// -------------------------------------------------------------------

// SocketConfiguration

// optional string address = 1;
inline void SocketConfiguration::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SocketConfiguration::address() const {
  // @@protoc_insertion_point(field_get:BioService.SocketConfiguration.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SocketConfiguration::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.SocketConfiguration.address)
}
inline void SocketConfiguration::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.SocketConfiguration.address)
}
inline void SocketConfiguration::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.SocketConfiguration.address)
}
inline ::std::string* SocketConfiguration::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:BioService.SocketConfiguration.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SocketConfiguration::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SocketConfiguration::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:BioService.SocketConfiguration.address)
}

// -------------------------------------------------------------------

// BioClient

// optional string ip_address = 1;
inline void BioClient::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BioClient::ip_address() const {
  // @@protoc_insertion_point(field_get:BioService.BioClient.ip_address)
  return ip_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BioClient::set_ip_address(const ::std::string& value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.BioClient.ip_address)
}
inline void BioClient::set_ip_address(const char* value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.BioClient.ip_address)
}
inline void BioClient::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.BioClient.ip_address)
}
inline ::std::string* BioClient::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:BioService.BioClient.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BioClient::release_ip_address() {
  
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BioClient::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:BioService.BioClient.ip_address)
}

// optional int64 port_number = 2;
inline void BioClient::clear_port_number() {
  port_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BioClient::port_number() const {
  // @@protoc_insertion_point(field_get:BioService.BioClient.port_number)
  return port_number_;
}
inline void BioClient::set_port_number(::google::protobuf::int64 value) {
  
  port_number_ = value;
  // @@protoc_insertion_point(field_set:BioService.BioClient.port_number)
}

// optional string mac_address = 3;
inline void BioClient::clear_mac_address() {
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BioClient::mac_address() const {
  // @@protoc_insertion_point(field_get:BioService.BioClient.mac_address)
  return mac_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BioClient::set_mac_address(const ::std::string& value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.BioClient.mac_address)
}
inline void BioClient::set_mac_address(const char* value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.BioClient.mac_address)
}
inline void BioClient::set_mac_address(const char* value, size_t size) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.BioClient.mac_address)
}
inline ::std::string* BioClient::mutable_mac_address() {
  
  // @@protoc_insertion_point(field_mutable:BioService.BioClient.mac_address)
  return mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BioClient::release_mac_address() {
  
  return mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BioClient::set_allocated_mac_address(::std::string* mac_address) {
  if (mac_address != NULL) {
    
  } else {
    
  }
  mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_address);
  // @@protoc_insertion_point(field_set_allocated:BioService.BioClient.mac_address)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BioService

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::BioService::AccessInfo_AccessType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::AccessInfo_AccessType>() {
  return ::BioService::AccessInfo_AccessType_descriptor();
}
template <> struct is_proto_enum< ::BioService::QueryPhoto_PhotoResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::QueryPhoto_PhotoResultType>() {
  return ::BioService::QueryPhoto_PhotoResultType_descriptor();
}
template <> struct is_proto_enum< ::BioService::ImageFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::ImageFormat>() {
  return ::BioService::ImageFormat_descriptor();
}
template <> struct is_proto_enum< ::BioService::EntityState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::EntityState>() {
  return ::BioService::EntityState_descriptor();
}
template <> struct is_proto_enum< ::BioService::Finger> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::Finger>() {
  return ::BioService::Finger_descriptor();
}
template <> struct is_proto_enum< ::BioService::EyeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::EyeType>() {
  return ::BioService::EyeType_descriptor();
}
template <> struct is_proto_enum< ::BioService::Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::Result>() {
  return ::BioService::Result_descriptor();
}
template <> struct is_proto_enum< ::BioService::Gender> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::Gender>() {
  return ::BioService::Gender_descriptor();
}
template <> struct is_proto_enum< ::BioService::Rights> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::Rights>() {
  return ::BioService::Rights_descriptor();
}
template <> struct is_proto_enum< ::BioService::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::MessageType>() {
  return ::BioService::MessageType_descriptor();
}
template <> struct is_proto_enum< ::BioService::PhotoSizeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::PhotoSizeType>() {
  return ::BioService::PhotoSizeType_descriptor();
}
template <> struct is_proto_enum< ::BioService::PhotoOriginType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BioService::PhotoOriginType>() {
  return ::BioService::PhotoOriginType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bio_5fservice_2eproto__INCLUDED
