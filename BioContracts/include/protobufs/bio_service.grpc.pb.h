// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: bio_service.proto
#ifndef GRPC_bio_5fservice_2eproto__INCLUDED
#define GRPC_bio_5fservice_2eproto__INCLUDED

#include "bio_service.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace BioService {

class BiometricFacialSevice GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddSocket(::grpc::ClientContext* context, const ::BioService::SocketConfiguration& request, ::BioService::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>> AsyncAddSocket(::grpc::ClientContext* context, const ::BioService::SocketConfiguration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>>(AsyncAddSocketRaw(context, request, cq));
    }
    virtual ::grpc::Status Acquire(::grpc::ClientContext* context, const ::BioService::Photo& request, ::BioService::PortraitCharacteristic* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::PortraitCharacteristic>> AsyncAcquire(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::PortraitCharacteristic>>(AsyncAcquireRaw(context, request, cq));
    }
    virtual ::grpc::Status Enroll(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::BioService::EnrollmentFeedback* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::EnrollmentFeedback>> AsyncEnroll(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::EnrollmentFeedback>>(AsyncEnrollRaw(context, request, cq));
    }
    virtual ::grpc::Status Verify(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::BioService::VerificationFeedback* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::VerificationFeedback>> AsyncVerify(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::VerificationFeedback>>(AsyncVerifyRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifyFace(::grpc::ClientContext* context, const ::BioService::VerificationData& request, ::BioService::FaceSearchResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FaceSearchResult>> AsyncVerifyFace(::grpc::ClientContext* context, const ::BioService::VerificationData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FaceSearchResult>>(AsyncVerifyFaceRaw(context, request, cq));
    }
    virtual ::grpc::Status IdentifyFace(::grpc::ClientContext* context, const ::BioService::IdentificationData& request, ::BioService::FaceSearchResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FaceSearchResult>> AsyncIdentifyFace(::grpc::ClientContext* context, const ::BioService::IdentificationData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FaceSearchResult>>(AsyncIdentifyFaceRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>* AsyncAddSocketRaw(::grpc::ClientContext* context, const ::BioService::SocketConfiguration& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::PortraitCharacteristic>* AsyncAcquireRaw(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::EnrollmentFeedback>* AsyncEnrollRaw(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::VerificationFeedback>* AsyncVerifyRaw(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FaceSearchResult>* AsyncVerifyFaceRaw(::grpc::ClientContext* context, const ::BioService::VerificationData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FaceSearchResult>* AsyncIdentifyFaceRaw(::grpc::ClientContext* context, const ::BioService::IdentificationData& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AddSocket(::grpc::ClientContext* context, const ::BioService::SocketConfiguration& request, ::BioService::Response* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Response>> AsyncAddSocket(::grpc::ClientContext* context, const ::BioService::SocketConfiguration& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Response>>(AsyncAddSocketRaw(context, request, cq));
    }
    ::grpc::Status Acquire(::grpc::ClientContext* context, const ::BioService::Photo& request, ::BioService::PortraitCharacteristic* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::PortraitCharacteristic>> AsyncAcquire(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::PortraitCharacteristic>>(AsyncAcquireRaw(context, request, cq));
    }
    ::grpc::Status Enroll(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::BioService::EnrollmentFeedback* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::EnrollmentFeedback>> AsyncEnroll(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::EnrollmentFeedback>>(AsyncEnrollRaw(context, request, cq));
    }
    ::grpc::Status Verify(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::BioService::VerificationFeedback* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::VerificationFeedback>> AsyncVerify(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::VerificationFeedback>>(AsyncVerifyRaw(context, request, cq));
    }
    ::grpc::Status VerifyFace(::grpc::ClientContext* context, const ::BioService::VerificationData& request, ::BioService::FaceSearchResult* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResult>> AsyncVerifyFace(::grpc::ClientContext* context, const ::BioService::VerificationData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResult>>(AsyncVerifyFaceRaw(context, request, cq));
    }
    ::grpc::Status IdentifyFace(::grpc::ClientContext* context, const ::BioService::IdentificationData& request, ::BioService::FaceSearchResult* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResult>> AsyncIdentifyFace(::grpc::ClientContext* context, const ::BioService::IdentificationData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResult>>(AsyncIdentifyFaceRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::BioService::Response>* AsyncAddSocketRaw(::grpc::ClientContext* context, const ::BioService::SocketConfiguration& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::PortraitCharacteristic>* AsyncAcquireRaw(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::EnrollmentFeedback>* AsyncEnrollRaw(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::VerificationFeedback>* AsyncVerifyRaw(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResult>* AsyncVerifyFaceRaw(::grpc::ClientContext* context, const ::BioService::VerificationData& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResult>* AsyncIdentifyFaceRaw(::grpc::ClientContext* context, const ::BioService::IdentificationData& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_AddSocket_;
    const ::grpc::RpcMethod rpcmethod_Acquire_;
    const ::grpc::RpcMethod rpcmethod_Enroll_;
    const ::grpc::RpcMethod rpcmethod_Verify_;
    const ::grpc::RpcMethod rpcmethod_VerifyFace_;
    const ::grpc::RpcMethod rpcmethod_IdentifyFace_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddSocket(::grpc::ServerContext* context, const ::BioService::SocketConfiguration* request, ::BioService::Response* response);
    virtual ::grpc::Status Acquire(::grpc::ServerContext* context, const ::BioService::Photo* request, ::BioService::PortraitCharacteristic* response);
    virtual ::grpc::Status Enroll(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::EnrollmentFeedback* response);
    virtual ::grpc::Status Verify(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::VerificationFeedback* response);
    virtual ::grpc::Status VerifyFace(::grpc::ServerContext* context, const ::BioService::VerificationData* request, ::BioService::FaceSearchResult* response);
    virtual ::grpc::Status IdentifyFace(::grpc::ServerContext* context, const ::BioService::IdentificationData* request, ::BioService::FaceSearchResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddSocket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddSocket() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddSocket() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSocket(::grpc::ServerContext* context, const ::BioService::SocketConfiguration* request, ::BioService::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSocket(::grpc::ServerContext* context, ::BioService::SocketConfiguration* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Acquire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Acquire() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Acquire() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Acquire(::grpc::ServerContext* context, const ::BioService::Photo* request, ::BioService::PortraitCharacteristic* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcquire(::grpc::ServerContext* context, ::BioService::Photo* request, ::grpc::ServerAsyncResponseWriter< ::BioService::PortraitCharacteristic>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Enroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Enroll() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Enroll() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enroll(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::EnrollmentFeedback* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnroll(::grpc::ServerContext* context, ::BioService::AcquiredData* request, ::grpc::ServerAsyncResponseWriter< ::BioService::EnrollmentFeedback>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Verify() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Verify() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::VerificationFeedback* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerify(::grpc::ServerContext* context, ::BioService::AcquiredData* request, ::grpc::ServerAsyncResponseWriter< ::BioService::VerificationFeedback>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifyFace() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_VerifyFace() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFace(::grpc::ServerContext* context, const ::BioService::VerificationData* request, ::BioService::FaceSearchResult* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyFace(::grpc::ServerContext* context, ::BioService::VerificationData* request, ::grpc::ServerAsyncResponseWriter< ::BioService::FaceSearchResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IdentifyFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_IdentifyFace() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_IdentifyFace() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IdentifyFace(::grpc::ServerContext* context, const ::BioService::IdentificationData* request, ::BioService::FaceSearchResult* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIdentifyFace(::grpc::ServerContext* context, ::BioService::IdentificationData* request, ::grpc::ServerAsyncResponseWriter< ::BioService::FaceSearchResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddSocket<WithAsyncMethod_Acquire<WithAsyncMethod_Enroll<WithAsyncMethod_Verify<WithAsyncMethod_VerifyFace<WithAsyncMethod_IdentifyFace<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_AddSocket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddSocket() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddSocket() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSocket(::grpc::ServerContext* context, const ::BioService::SocketConfiguration* request, ::BioService::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Acquire : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Acquire() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Acquire() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Acquire(::grpc::ServerContext* context, const ::BioService::Photo* request, ::BioService::PortraitCharacteristic* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Enroll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Enroll() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Enroll() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Enroll(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::EnrollmentFeedback* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Verify() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Verify() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::VerificationFeedback* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifyFace() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_VerifyFace() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFace(::grpc::ServerContext* context, const ::BioService::VerificationData* request, ::BioService::FaceSearchResult* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IdentifyFace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_IdentifyFace() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_IdentifyFace() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IdentifyFace(::grpc::ServerContext* context, const ::BioService::IdentificationData* request, ::BioService::FaceSearchResult* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

class BiometricFingerprintSevice GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status EnrollFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintAcquiredData& request, ::BioService::EnrollmentFeedback* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::EnrollmentFeedback>> AsyncEnrollFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintAcquiredData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::EnrollmentFeedback>>(AsyncEnrollFingerprintRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifyFingerprint(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::BioService::VerificationFeedback* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::VerificationFeedback>> AsyncVerifyFingerprint(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::VerificationFeedback>>(AsyncVerifyFingerprintRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::EnrollmentFeedback>* AsyncEnrollFingerprintRaw(::grpc::ClientContext* context, const ::BioService::FingerprintAcquiredData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::VerificationFeedback>* AsyncVerifyFingerprintRaw(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status EnrollFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintAcquiredData& request, ::BioService::EnrollmentFeedback* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::EnrollmentFeedback>> AsyncEnrollFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintAcquiredData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::EnrollmentFeedback>>(AsyncEnrollFingerprintRaw(context, request, cq));
    }
    ::grpc::Status VerifyFingerprint(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::BioService::VerificationFeedback* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::VerificationFeedback>> AsyncVerifyFingerprint(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::VerificationFeedback>>(AsyncVerifyFingerprintRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::BioService::EnrollmentFeedback>* AsyncEnrollFingerprintRaw(::grpc::ClientContext* context, const ::BioService::FingerprintAcquiredData& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::VerificationFeedback>* AsyncVerifyFingerprintRaw(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_EnrollFingerprint_;
    const ::grpc::RpcMethod rpcmethod_VerifyFingerprint_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status EnrollFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintAcquiredData* request, ::BioService::EnrollmentFeedback* response);
    virtual ::grpc::Status VerifyFingerprint(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::VerificationFeedback* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_EnrollFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EnrollFingerprint() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_EnrollFingerprint() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnrollFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintAcquiredData* request, ::BioService::EnrollmentFeedback* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnrollFingerprint(::grpc::ServerContext* context, ::BioService::FingerprintAcquiredData* request, ::grpc::ServerAsyncResponseWriter< ::BioService::EnrollmentFeedback>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifyFingerprint() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_VerifyFingerprint() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFingerprint(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::VerificationFeedback* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyFingerprint(::grpc::ServerContext* context, ::BioService::AcquiredData* request, ::grpc::ServerAsyncResponseWriter< ::BioService::VerificationFeedback>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_EnrollFingerprint<WithAsyncMethod_VerifyFingerprint<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_EnrollFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EnrollFingerprint() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_EnrollFingerprint() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnrollFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintAcquiredData* request, ::BioService::EnrollmentFeedback* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifyFingerprint() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_VerifyFingerprint() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFingerprint(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::VerificationFeedback* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

class BiometricDatabaseService GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddFacialImage(::grpc::ClientContext* context, const ::BioService::FacialImage& request, ::BioService::DatabaseFacialImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::DatabaseFacialImageResponse>> AsyncAddFacialImage(::grpc::ClientContext* context, const ::BioService::FacialImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::DatabaseFacialImageResponse>>(AsyncAddFacialImageRaw(context, request, cq));
    }
    virtual ::grpc::Status AddFingerprintImage(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::BioService::DatabaseFingerprintImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::DatabaseFingerprintImageResponse>> AsyncAddFingerprintImage(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::DatabaseFingerprintImageResponse>>(AsyncAddFingerprintImageRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::DatabaseFacialImageResponse>* AsyncAddFacialImageRaw(::grpc::ClientContext* context, const ::BioService::FacialImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::DatabaseFingerprintImageResponse>* AsyncAddFingerprintImageRaw(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AddFacialImage(::grpc::ClientContext* context, const ::BioService::FacialImage& request, ::BioService::DatabaseFacialImageResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::DatabaseFacialImageResponse>> AsyncAddFacialImage(::grpc::ClientContext* context, const ::BioService::FacialImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::DatabaseFacialImageResponse>>(AsyncAddFacialImageRaw(context, request, cq));
    }
    ::grpc::Status AddFingerprintImage(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::BioService::DatabaseFingerprintImageResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::DatabaseFingerprintImageResponse>> AsyncAddFingerprintImage(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::DatabaseFingerprintImageResponse>>(AsyncAddFingerprintImageRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::BioService::DatabaseFacialImageResponse>* AsyncAddFacialImageRaw(::grpc::ClientContext* context, const ::BioService::FacialImage& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::DatabaseFingerprintImageResponse>* AsyncAddFingerprintImageRaw(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_AddFacialImage_;
    const ::grpc::RpcMethod rpcmethod_AddFingerprintImage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddFacialImage(::grpc::ServerContext* context, const ::BioService::FacialImage* request, ::BioService::DatabaseFacialImageResponse* response);
    virtual ::grpc::Status AddFingerprintImage(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::DatabaseFingerprintImageResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddFacialImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddFacialImage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddFacialImage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFacialImage(::grpc::ServerContext* context, const ::BioService::FacialImage* request, ::BioService::DatabaseFacialImageResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFacialImage(::grpc::ServerContext* context, ::BioService::FacialImage* request, ::grpc::ServerAsyncResponseWriter< ::BioService::DatabaseFacialImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddFingerprintImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddFingerprintImage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddFingerprintImage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFingerprintImage(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::DatabaseFingerprintImageResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFingerprintImage(::grpc::ServerContext* context, ::BioService::FingerprintImage* request, ::grpc::ServerAsyncResponseWriter< ::BioService::DatabaseFingerprintImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddFacialImage<WithAsyncMethod_AddFingerprintImage<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_AddFacialImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddFacialImage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddFacialImage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFacialImage(::grpc::ServerContext* context, const ::BioService::FacialImage* request, ::BioService::DatabaseFacialImageResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddFingerprintImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddFingerprintImage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddFingerprintImage() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFingerprintImage(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::DatabaseFingerprintImageResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

class DatabaseSevice GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PersonSelect(::grpc::ClientContext* context, const ::BioService::QueryPersons& request, ::BioService::PersonList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::PersonList>> AsyncPersonSelect(::grpc::ClientContext* context, const ::BioService::QueryPersons& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::PersonList>>(AsyncPersonSelectRaw(context, request, cq));
    }
    virtual ::grpc::Status AddPerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::BioService::Person* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Person>> AsyncAddPerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Person>>(AsyncAddPersonRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdatePerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::BioService::Person* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Person>> AsyncUpdatePerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Person>>(AsyncUpdatePersonRaw(context, request, cq));
    }
    virtual ::grpc::Status RemovePerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::BioService::Person* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Person>> AsyncRemovePerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Person>>(AsyncRemovePersonRaw(context, request, cq));
    }
    virtual ::grpc::Status SetThumbnail(::grpc::ClientContext* context, const ::BioService::Photo& request, ::BioService::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>> AsyncSetThumbnail(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>>(AsyncSetThumbnailRaw(context, request, cq));
    }
    virtual ::grpc::Status AddCard(::grpc::ClientContext* context, const ::BioService::Card& request, ::BioService::Card* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Card>> AsyncAddCard(::grpc::ClientContext* context, const ::BioService::Card& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Card>>(AsyncAddCardRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveCards(::grpc::ClientContext* context, const ::BioService::CardList& request, ::BioService::CardList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::CardList>> AsyncRemoveCards(::grpc::ClientContext* context, const ::BioService::CardList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::CardList>>(AsyncRemoveCardsRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveCard(::grpc::ClientContext* context, const ::BioService::Card& request, ::BioService::Card* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Card>> AsyncRemoveCard(::grpc::ClientContext* context, const ::BioService::Card& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Card>>(AsyncRemoveCardRaw(context, request, cq));
    }
    virtual ::grpc::Status SelectPhotos(::grpc::ClientContext* context, const ::BioService::QueryPhoto& request, ::BioService::PhotoList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::PhotoList>> AsyncSelectPhotos(::grpc::ClientContext* context, const ::BioService::QueryPhoto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::PhotoList>>(AsyncSelectPhotosRaw(context, request, cq));
    }
    virtual ::grpc::Status AddPhoto(::grpc::ClientContext* context, const ::BioService::Photo& request, ::BioService::Photo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Photo>> AsyncAddPhoto(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Photo>>(AsyncAddPhotoRaw(context, request, cq));
    }
    virtual ::grpc::Status RemovePhotos(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::BioService::RawIndexes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::RawIndexes>> AsyncRemovePhotos(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::RawIndexes>>(AsyncRemovePhotosRaw(context, request, cq));
    }
    virtual ::grpc::Status SelectVisitors(::grpc::ClientContext* context, const ::BioService::QueryVisitors& request, ::BioService::VisitorList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::VisitorList>> AsyncSelectVisitors(::grpc::ClientContext* context, const ::BioService::QueryVisitors& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::VisitorList>>(AsyncSelectVisitorsRaw(context, request, cq));
    }
    virtual ::grpc::Status AttachVisitorToPerson(::grpc::ClientContext* context, const ::BioService::Visitor& request, ::BioService::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>> AsyncAttachVisitorToPerson(::grpc::ClientContext* context, const ::BioService::Visitor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>>(AsyncAttachVisitorToPersonRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveVisitors(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::BioService::RawIndexes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::RawIndexes>> AsyncRemoveVisitors(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::RawIndexes>>(AsyncRemoveVisitorsRaw(context, request, cq));
    }
    virtual ::grpc::Status AddVisitor(::grpc::ClientContext* context, const ::BioService::FullVisitorData& request, ::BioService::Visitor* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Visitor>> AsyncAddVisitor(::grpc::ClientContext* context, const ::BioService::FullVisitorData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Visitor>>(AsyncAddVisitorRaw(context, request, cq));
    }
    virtual ::grpc::Status SelectLocations(::grpc::ClientContext* context, const ::BioService::QueryLocations& request, ::BioService::LocationList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::LocationList>> AsyncSelectLocations(::grpc::ClientContext* context, const ::BioService::QueryLocations& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::LocationList>>(AsyncSelectLocationsRaw(context, request, cq));
    }
    virtual ::grpc::Status AddLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::BioService::Location* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Location>> AsyncAddLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Location>>(AsyncAddLocationRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::BioService::Location* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Location>> AsyncUpdateLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Location>>(AsyncUpdateLocationRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::BioService::Location* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Location>> AsyncRemoveLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Location>>(AsyncRemoveLocationRaw(context, request, cq));
    }
    virtual ::grpc::Status AddFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::BioService::FingerprintImage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FingerprintImage>> AsyncAddFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FingerprintImage>>(AsyncAddFingerprintRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::BioService::FingerprintImage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FingerprintImage>> AsyncRemoveFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FingerprintImage>>(AsyncRemoveFingerprintRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::BioService::FingerprintImage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FingerprintImage>> AsyncUpdateFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FingerprintImage>>(AsyncUpdateFingerprintRaw(context, request, cq));
    }
    virtual ::grpc::Status AddClient(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::BioService::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>> AsyncAddClient(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>>(AsyncAddClientRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveClient(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::BioService::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>> AsyncRemoveClient(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>>(AsyncRemoveClientRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::PersonList>* AsyncPersonSelectRaw(::grpc::ClientContext* context, const ::BioService::QueryPersons& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Person>* AsyncAddPersonRaw(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Person>* AsyncUpdatePersonRaw(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Person>* AsyncRemovePersonRaw(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>* AsyncSetThumbnailRaw(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Card>* AsyncAddCardRaw(::grpc::ClientContext* context, const ::BioService::Card& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::CardList>* AsyncRemoveCardsRaw(::grpc::ClientContext* context, const ::BioService::CardList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Card>* AsyncRemoveCardRaw(::grpc::ClientContext* context, const ::BioService::Card& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::PhotoList>* AsyncSelectPhotosRaw(::grpc::ClientContext* context, const ::BioService::QueryPhoto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Photo>* AsyncAddPhotoRaw(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::RawIndexes>* AsyncRemovePhotosRaw(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::VisitorList>* AsyncSelectVisitorsRaw(::grpc::ClientContext* context, const ::BioService::QueryVisitors& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>* AsyncAttachVisitorToPersonRaw(::grpc::ClientContext* context, const ::BioService::Visitor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::RawIndexes>* AsyncRemoveVisitorsRaw(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Visitor>* AsyncAddVisitorRaw(::grpc::ClientContext* context, const ::BioService::FullVisitorData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::LocationList>* AsyncSelectLocationsRaw(::grpc::ClientContext* context, const ::BioService::QueryLocations& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Location>* AsyncAddLocationRaw(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Location>* AsyncUpdateLocationRaw(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Location>* AsyncRemoveLocationRaw(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FingerprintImage>* AsyncAddFingerprintRaw(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FingerprintImage>* AsyncRemoveFingerprintRaw(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::FingerprintImage>* AsyncUpdateFingerprintRaw(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>* AsyncAddClientRaw(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BioService::Response>* AsyncRemoveClientRaw(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status PersonSelect(::grpc::ClientContext* context, const ::BioService::QueryPersons& request, ::BioService::PersonList* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::PersonList>> AsyncPersonSelect(::grpc::ClientContext* context, const ::BioService::QueryPersons& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::PersonList>>(AsyncPersonSelectRaw(context, request, cq));
    }
    ::grpc::Status AddPerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::BioService::Person* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Person>> AsyncAddPerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Person>>(AsyncAddPersonRaw(context, request, cq));
    }
    ::grpc::Status UpdatePerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::BioService::Person* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Person>> AsyncUpdatePerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Person>>(AsyncUpdatePersonRaw(context, request, cq));
    }
    ::grpc::Status RemovePerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::BioService::Person* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Person>> AsyncRemovePerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Person>>(AsyncRemovePersonRaw(context, request, cq));
    }
    ::grpc::Status SetThumbnail(::grpc::ClientContext* context, const ::BioService::Photo& request, ::BioService::Response* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Response>> AsyncSetThumbnail(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Response>>(AsyncSetThumbnailRaw(context, request, cq));
    }
    ::grpc::Status AddCard(::grpc::ClientContext* context, const ::BioService::Card& request, ::BioService::Card* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Card>> AsyncAddCard(::grpc::ClientContext* context, const ::BioService::Card& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Card>>(AsyncAddCardRaw(context, request, cq));
    }
    ::grpc::Status RemoveCards(::grpc::ClientContext* context, const ::BioService::CardList& request, ::BioService::CardList* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::CardList>> AsyncRemoveCards(::grpc::ClientContext* context, const ::BioService::CardList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::CardList>>(AsyncRemoveCardsRaw(context, request, cq));
    }
    ::grpc::Status RemoveCard(::grpc::ClientContext* context, const ::BioService::Card& request, ::BioService::Card* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Card>> AsyncRemoveCard(::grpc::ClientContext* context, const ::BioService::Card& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Card>>(AsyncRemoveCardRaw(context, request, cq));
    }
    ::grpc::Status SelectPhotos(::grpc::ClientContext* context, const ::BioService::QueryPhoto& request, ::BioService::PhotoList* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::PhotoList>> AsyncSelectPhotos(::grpc::ClientContext* context, const ::BioService::QueryPhoto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::PhotoList>>(AsyncSelectPhotosRaw(context, request, cq));
    }
    ::grpc::Status AddPhoto(::grpc::ClientContext* context, const ::BioService::Photo& request, ::BioService::Photo* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Photo>> AsyncAddPhoto(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Photo>>(AsyncAddPhotoRaw(context, request, cq));
    }
    ::grpc::Status RemovePhotos(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::BioService::RawIndexes* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::RawIndexes>> AsyncRemovePhotos(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::RawIndexes>>(AsyncRemovePhotosRaw(context, request, cq));
    }
    ::grpc::Status SelectVisitors(::grpc::ClientContext* context, const ::BioService::QueryVisitors& request, ::BioService::VisitorList* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::VisitorList>> AsyncSelectVisitors(::grpc::ClientContext* context, const ::BioService::QueryVisitors& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::VisitorList>>(AsyncSelectVisitorsRaw(context, request, cq));
    }
    ::grpc::Status AttachVisitorToPerson(::grpc::ClientContext* context, const ::BioService::Visitor& request, ::BioService::Response* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Response>> AsyncAttachVisitorToPerson(::grpc::ClientContext* context, const ::BioService::Visitor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Response>>(AsyncAttachVisitorToPersonRaw(context, request, cq));
    }
    ::grpc::Status RemoveVisitors(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::BioService::RawIndexes* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::RawIndexes>> AsyncRemoveVisitors(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::RawIndexes>>(AsyncRemoveVisitorsRaw(context, request, cq));
    }
    ::grpc::Status AddVisitor(::grpc::ClientContext* context, const ::BioService::FullVisitorData& request, ::BioService::Visitor* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Visitor>> AsyncAddVisitor(::grpc::ClientContext* context, const ::BioService::FullVisitorData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Visitor>>(AsyncAddVisitorRaw(context, request, cq));
    }
    ::grpc::Status SelectLocations(::grpc::ClientContext* context, const ::BioService::QueryLocations& request, ::BioService::LocationList* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::LocationList>> AsyncSelectLocations(::grpc::ClientContext* context, const ::BioService::QueryLocations& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::LocationList>>(AsyncSelectLocationsRaw(context, request, cq));
    }
    ::grpc::Status AddLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::BioService::Location* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Location>> AsyncAddLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Location>>(AsyncAddLocationRaw(context, request, cq));
    }
    ::grpc::Status UpdateLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::BioService::Location* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Location>> AsyncUpdateLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Location>>(AsyncUpdateLocationRaw(context, request, cq));
    }
    ::grpc::Status RemoveLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::BioService::Location* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Location>> AsyncRemoveLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Location>>(AsyncRemoveLocationRaw(context, request, cq));
    }
    ::grpc::Status AddFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::BioService::FingerprintImage* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>> AsyncAddFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>>(AsyncAddFingerprintRaw(context, request, cq));
    }
    ::grpc::Status RemoveFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::BioService::FingerprintImage* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>> AsyncRemoveFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>>(AsyncRemoveFingerprintRaw(context, request, cq));
    }
    ::grpc::Status UpdateFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::BioService::FingerprintImage* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>> AsyncUpdateFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>>(AsyncUpdateFingerprintRaw(context, request, cq));
    }
    ::grpc::Status AddClient(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::BioService::Response* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Response>> AsyncAddClient(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Response>>(AsyncAddClientRaw(context, request, cq));
    }
    ::grpc::Status RemoveClient(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::BioService::Response* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Response>> AsyncRemoveClient(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BioService::Response>>(AsyncRemoveClientRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::BioService::PersonList>* AsyncPersonSelectRaw(::grpc::ClientContext* context, const ::BioService::QueryPersons& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Person>* AsyncAddPersonRaw(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Person>* AsyncUpdatePersonRaw(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Person>* AsyncRemovePersonRaw(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Response>* AsyncSetThumbnailRaw(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Card>* AsyncAddCardRaw(::grpc::ClientContext* context, const ::BioService::Card& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::CardList>* AsyncRemoveCardsRaw(::grpc::ClientContext* context, const ::BioService::CardList& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Card>* AsyncRemoveCardRaw(::grpc::ClientContext* context, const ::BioService::Card& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::PhotoList>* AsyncSelectPhotosRaw(::grpc::ClientContext* context, const ::BioService::QueryPhoto& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Photo>* AsyncAddPhotoRaw(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::RawIndexes>* AsyncRemovePhotosRaw(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::VisitorList>* AsyncSelectVisitorsRaw(::grpc::ClientContext* context, const ::BioService::QueryVisitors& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Response>* AsyncAttachVisitorToPersonRaw(::grpc::ClientContext* context, const ::BioService::Visitor& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::RawIndexes>* AsyncRemoveVisitorsRaw(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Visitor>* AsyncAddVisitorRaw(::grpc::ClientContext* context, const ::BioService::FullVisitorData& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::LocationList>* AsyncSelectLocationsRaw(::grpc::ClientContext* context, const ::BioService::QueryLocations& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Location>* AsyncAddLocationRaw(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Location>* AsyncUpdateLocationRaw(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Location>* AsyncRemoveLocationRaw(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>* AsyncAddFingerprintRaw(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>* AsyncRemoveFingerprintRaw(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>* AsyncUpdateFingerprintRaw(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Response>* AsyncAddClientRaw(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::BioService::Response>* AsyncRemoveClientRaw(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_PersonSelect_;
    const ::grpc::RpcMethod rpcmethod_AddPerson_;
    const ::grpc::RpcMethod rpcmethod_UpdatePerson_;
    const ::grpc::RpcMethod rpcmethod_RemovePerson_;
    const ::grpc::RpcMethod rpcmethod_SetThumbnail_;
    const ::grpc::RpcMethod rpcmethod_AddCard_;
    const ::grpc::RpcMethod rpcmethod_RemoveCards_;
    const ::grpc::RpcMethod rpcmethod_RemoveCard_;
    const ::grpc::RpcMethod rpcmethod_SelectPhotos_;
    const ::grpc::RpcMethod rpcmethod_AddPhoto_;
    const ::grpc::RpcMethod rpcmethod_RemovePhotos_;
    const ::grpc::RpcMethod rpcmethod_SelectVisitors_;
    const ::grpc::RpcMethod rpcmethod_AttachVisitorToPerson_;
    const ::grpc::RpcMethod rpcmethod_RemoveVisitors_;
    const ::grpc::RpcMethod rpcmethod_AddVisitor_;
    const ::grpc::RpcMethod rpcmethod_SelectLocations_;
    const ::grpc::RpcMethod rpcmethod_AddLocation_;
    const ::grpc::RpcMethod rpcmethod_UpdateLocation_;
    const ::grpc::RpcMethod rpcmethod_RemoveLocation_;
    const ::grpc::RpcMethod rpcmethod_AddFingerprint_;
    const ::grpc::RpcMethod rpcmethod_RemoveFingerprint_;
    const ::grpc::RpcMethod rpcmethod_UpdateFingerprint_;
    const ::grpc::RpcMethod rpcmethod_AddClient_;
    const ::grpc::RpcMethod rpcmethod_RemoveClient_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PersonSelect(::grpc::ServerContext* context, const ::BioService::QueryPersons* request, ::BioService::PersonList* response);
    virtual ::grpc::Status AddPerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::BioService::Person* response);
    virtual ::grpc::Status UpdatePerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::BioService::Person* response);
    virtual ::grpc::Status RemovePerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::BioService::Person* response);
    virtual ::grpc::Status SetThumbnail(::grpc::ServerContext* context, const ::BioService::Photo* request, ::BioService::Response* response);
    virtual ::grpc::Status AddCard(::grpc::ServerContext* context, const ::BioService::Card* request, ::BioService::Card* response);
    virtual ::grpc::Status RemoveCards(::grpc::ServerContext* context, const ::BioService::CardList* request, ::BioService::CardList* response);
    virtual ::grpc::Status RemoveCard(::grpc::ServerContext* context, const ::BioService::Card* request, ::BioService::Card* response);
    virtual ::grpc::Status SelectPhotos(::grpc::ServerContext* context, const ::BioService::QueryPhoto* request, ::BioService::PhotoList* response);
    virtual ::grpc::Status AddPhoto(::grpc::ServerContext* context, const ::BioService::Photo* request, ::BioService::Photo* response);
    virtual ::grpc::Status RemovePhotos(::grpc::ServerContext* context, const ::BioService::RawIndexes* request, ::BioService::RawIndexes* response);
    virtual ::grpc::Status SelectVisitors(::grpc::ServerContext* context, const ::BioService::QueryVisitors* request, ::BioService::VisitorList* response);
    virtual ::grpc::Status AttachVisitorToPerson(::grpc::ServerContext* context, const ::BioService::Visitor* request, ::BioService::Response* response);
    virtual ::grpc::Status RemoveVisitors(::grpc::ServerContext* context, const ::BioService::RawIndexes* request, ::BioService::RawIndexes* response);
    virtual ::grpc::Status AddVisitor(::grpc::ServerContext* context, const ::BioService::FullVisitorData* request, ::BioService::Visitor* response);
    virtual ::grpc::Status SelectLocations(::grpc::ServerContext* context, const ::BioService::QueryLocations* request, ::BioService::LocationList* response);
    virtual ::grpc::Status AddLocation(::grpc::ServerContext* context, const ::BioService::Location* request, ::BioService::Location* response);
    virtual ::grpc::Status UpdateLocation(::grpc::ServerContext* context, const ::BioService::Location* request, ::BioService::Location* response);
    virtual ::grpc::Status RemoveLocation(::grpc::ServerContext* context, const ::BioService::Location* request, ::BioService::Location* response);
    virtual ::grpc::Status AddFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::FingerprintImage* response);
    virtual ::grpc::Status RemoveFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::FingerprintImage* response);
    virtual ::grpc::Status UpdateFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::FingerprintImage* response);
    virtual ::grpc::Status AddClient(::grpc::ServerContext* context, const ::BioService::BioClient* request, ::BioService::Response* response);
    virtual ::grpc::Status RemoveClient(::grpc::ServerContext* context, const ::BioService::BioClient* request, ::BioService::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PersonSelect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PersonSelect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PersonSelect() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PersonSelect(::grpc::ServerContext* context, const ::BioService::QueryPersons* request, ::BioService::PersonList* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPersonSelect(::grpc::ServerContext* context, ::BioService::QueryPersons* request, ::grpc::ServerAsyncResponseWriter< ::BioService::PersonList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddPerson() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddPerson() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::BioService::Person* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPerson(::grpc::ServerContext* context, ::BioService::Person* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Person>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdatePerson() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdatePerson() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::BioService::Person* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePerson(::grpc::ServerContext* context, ::BioService::Person* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Person>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemovePerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemovePerson() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RemovePerson() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::BioService::Person* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePerson(::grpc::ServerContext* context, ::BioService::Person* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Person>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetThumbnail() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetThumbnail() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetThumbnail(::grpc::ServerContext* context, const ::BioService::Photo* request, ::BioService::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetThumbnail(::grpc::ServerContext* context, ::BioService::Photo* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddCard() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AddCard() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCard(::grpc::ServerContext* context, const ::BioService::Card* request, ::BioService::Card* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCard(::grpc::ServerContext* context, ::BioService::Card* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Card>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveCards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveCards() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RemoveCards() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveCards(::grpc::ServerContext* context, const ::BioService::CardList* request, ::BioService::CardList* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveCards(::grpc::ServerContext* context, ::BioService::CardList* request, ::grpc::ServerAsyncResponseWriter< ::BioService::CardList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveCard() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RemoveCard() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveCard(::grpc::ServerContext* context, const ::BioService::Card* request, ::BioService::Card* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveCard(::grpc::ServerContext* context, ::BioService::Card* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Card>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SelectPhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SelectPhotos() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SelectPhotos() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectPhotos(::grpc::ServerContext* context, const ::BioService::QueryPhoto* request, ::BioService::PhotoList* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectPhotos(::grpc::ServerContext* context, ::BioService::QueryPhoto* request, ::grpc::ServerAsyncResponseWriter< ::BioService::PhotoList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddPhoto() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_AddPhoto() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPhoto(::grpc::ServerContext* context, const ::BioService::Photo* request, ::BioService::Photo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPhoto(::grpc::ServerContext* context, ::BioService::Photo* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Photo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemovePhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemovePhotos() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_RemovePhotos() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePhotos(::grpc::ServerContext* context, const ::BioService::RawIndexes* request, ::BioService::RawIndexes* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePhotos(::grpc::ServerContext* context, ::BioService::RawIndexes* request, ::grpc::ServerAsyncResponseWriter< ::BioService::RawIndexes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SelectVisitors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SelectVisitors() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SelectVisitors() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectVisitors(::grpc::ServerContext* context, const ::BioService::QueryVisitors* request, ::BioService::VisitorList* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectVisitors(::grpc::ServerContext* context, ::BioService::QueryVisitors* request, ::grpc::ServerAsyncResponseWriter< ::BioService::VisitorList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AttachVisitorToPerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AttachVisitorToPerson() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_AttachVisitorToPerson() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttachVisitorToPerson(::grpc::ServerContext* context, const ::BioService::Visitor* request, ::BioService::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAttachVisitorToPerson(::grpc::ServerContext* context, ::BioService::Visitor* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveVisitors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveVisitors() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_RemoveVisitors() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveVisitors(::grpc::ServerContext* context, const ::BioService::RawIndexes* request, ::BioService::RawIndexes* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveVisitors(::grpc::ServerContext* context, ::BioService::RawIndexes* request, ::grpc::ServerAsyncResponseWriter< ::BioService::RawIndexes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddVisitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddVisitor() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_AddVisitor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVisitor(::grpc::ServerContext* context, const ::BioService::FullVisitorData* request, ::BioService::Visitor* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddVisitor(::grpc::ServerContext* context, ::BioService::FullVisitorData* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Visitor>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SelectLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SelectLocations() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_SelectLocations() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectLocations(::grpc::ServerContext* context, const ::BioService::QueryLocations* request, ::BioService::LocationList* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelectLocations(::grpc::ServerContext* context, ::BioService::QueryLocations* request, ::grpc::ServerAsyncResponseWriter< ::BioService::LocationList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddLocation() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_AddLocation() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLocation(::grpc::ServerContext* context, const ::BioService::Location* request, ::BioService::Location* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddLocation(::grpc::ServerContext* context, ::BioService::Location* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Location>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateLocation() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_UpdateLocation() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLocation(::grpc::ServerContext* context, const ::BioService::Location* request, ::BioService::Location* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateLocation(::grpc::ServerContext* context, ::BioService::Location* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Location>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveLocation() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_RemoveLocation() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveLocation(::grpc::ServerContext* context, const ::BioService::Location* request, ::BioService::Location* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveLocation(::grpc::ServerContext* context, ::BioService::Location* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Location>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddFingerprint() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_AddFingerprint() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::FingerprintImage* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFingerprint(::grpc::ServerContext* context, ::BioService::FingerprintImage* request, ::grpc::ServerAsyncResponseWriter< ::BioService::FingerprintImage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveFingerprint() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_RemoveFingerprint() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::FingerprintImage* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveFingerprint(::grpc::ServerContext* context, ::BioService::FingerprintImage* request, ::grpc::ServerAsyncResponseWriter< ::BioService::FingerprintImage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateFingerprint() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_UpdateFingerprint() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::FingerprintImage* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFingerprint(::grpc::ServerContext* context, ::BioService::FingerprintImage* request, ::grpc::ServerAsyncResponseWriter< ::BioService::FingerprintImage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddClient() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_AddClient() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddClient(::grpc::ServerContext* context, const ::BioService::BioClient* request, ::BioService::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddClient(::grpc::ServerContext* context, ::BioService::BioClient* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveClient() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_RemoveClient() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveClient(::grpc::ServerContext* context, const ::BioService::BioClient* request, ::BioService::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveClient(::grpc::ServerContext* context, ::BioService::BioClient* request, ::grpc::ServerAsyncResponseWriter< ::BioService::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PersonSelect<WithAsyncMethod_AddPerson<WithAsyncMethod_UpdatePerson<WithAsyncMethod_RemovePerson<WithAsyncMethod_SetThumbnail<WithAsyncMethod_AddCard<WithAsyncMethod_RemoveCards<WithAsyncMethod_RemoveCard<WithAsyncMethod_SelectPhotos<WithAsyncMethod_AddPhoto<WithAsyncMethod_RemovePhotos<WithAsyncMethod_SelectVisitors<WithAsyncMethod_AttachVisitorToPerson<WithAsyncMethod_RemoveVisitors<WithAsyncMethod_AddVisitor<WithAsyncMethod_SelectLocations<WithAsyncMethod_AddLocation<WithAsyncMethod_UpdateLocation<WithAsyncMethod_RemoveLocation<WithAsyncMethod_AddFingerprint<WithAsyncMethod_RemoveFingerprint<WithAsyncMethod_UpdateFingerprint<WithAsyncMethod_AddClient<WithAsyncMethod_RemoveClient<Service > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_PersonSelect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PersonSelect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PersonSelect() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PersonSelect(::grpc::ServerContext* context, const ::BioService::QueryPersons* request, ::BioService::PersonList* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddPerson() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddPerson() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::BioService::Person* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdatePerson() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdatePerson() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::BioService::Person* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemovePerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemovePerson() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RemovePerson() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::BioService::Person* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetThumbnail() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetThumbnail() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetThumbnail(::grpc::ServerContext* context, const ::BioService::Photo* request, ::BioService::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddCard() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AddCard() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCard(::grpc::ServerContext* context, const ::BioService::Card* request, ::BioService::Card* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveCards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveCards() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RemoveCards() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveCards(::grpc::ServerContext* context, const ::BioService::CardList* request, ::BioService::CardList* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveCard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveCard() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RemoveCard() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveCard(::grpc::ServerContext* context, const ::BioService::Card* request, ::BioService::Card* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SelectPhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SelectPhotos() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SelectPhotos() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectPhotos(::grpc::ServerContext* context, const ::BioService::QueryPhoto* request, ::BioService::PhotoList* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddPhoto() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_AddPhoto() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPhoto(::grpc::ServerContext* context, const ::BioService::Photo* request, ::BioService::Photo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemovePhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemovePhotos() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_RemovePhotos() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePhotos(::grpc::ServerContext* context, const ::BioService::RawIndexes* request, ::BioService::RawIndexes* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SelectVisitors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SelectVisitors() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SelectVisitors() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectVisitors(::grpc::ServerContext* context, const ::BioService::QueryVisitors* request, ::BioService::VisitorList* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AttachVisitorToPerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AttachVisitorToPerson() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_AttachVisitorToPerson() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttachVisitorToPerson(::grpc::ServerContext* context, const ::BioService::Visitor* request, ::BioService::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveVisitors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveVisitors() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_RemoveVisitors() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveVisitors(::grpc::ServerContext* context, const ::BioService::RawIndexes* request, ::BioService::RawIndexes* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddVisitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddVisitor() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_AddVisitor() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddVisitor(::grpc::ServerContext* context, const ::BioService::FullVisitorData* request, ::BioService::Visitor* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SelectLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SelectLocations() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_SelectLocations() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SelectLocations(::grpc::ServerContext* context, const ::BioService::QueryLocations* request, ::BioService::LocationList* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddLocation() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_AddLocation() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLocation(::grpc::ServerContext* context, const ::BioService::Location* request, ::BioService::Location* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateLocation() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_UpdateLocation() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLocation(::grpc::ServerContext* context, const ::BioService::Location* request, ::BioService::Location* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveLocation() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_RemoveLocation() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveLocation(::grpc::ServerContext* context, const ::BioService::Location* request, ::BioService::Location* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddFingerprint() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_AddFingerprint() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::FingerprintImage* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveFingerprint() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_RemoveFingerprint() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::FingerprintImage* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateFingerprint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateFingerprint() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_UpdateFingerprint() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::FingerprintImage* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddClient() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_AddClient() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddClient(::grpc::ServerContext* context, const ::BioService::BioClient* request, ::BioService::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveClient() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_RemoveClient() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveClient(::grpc::ServerContext* context, const ::BioService::BioClient* request, ::BioService::Response* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace BioService


#endif  // GRPC_bio_5fservice_2eproto__INCLUDED
