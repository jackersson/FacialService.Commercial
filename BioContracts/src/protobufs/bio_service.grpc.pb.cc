// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: bio_service.proto

#include "protobufs/bio_service.pb.h"
#include "protobufs/bio_service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace BioService {

static const char* BiometricFacialSevice_method_names[] = {
  "/BioService.BiometricFacialSevice/AddSocket",
  "/BioService.BiometricFacialSevice/Acquire",
  "/BioService.BiometricFacialSevice/Enroll",
  "/BioService.BiometricFacialSevice/Verify",
  "/BioService.BiometricFacialSevice/CreatePopulation",
  "/BioService.BiometricFacialSevice/VerifyFace",
  "/BioService.BiometricFacialSevice/IdentifyFace",
};

std::unique_ptr< BiometricFacialSevice::Stub> BiometricFacialSevice::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BiometricFacialSevice::Stub> stub(new BiometricFacialSevice::Stub(channel));
  return stub;
}

BiometricFacialSevice::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddSocket_(BiometricFacialSevice_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Acquire_(BiometricFacialSevice_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enroll_(BiometricFacialSevice_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Verify_(BiometricFacialSevice_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePopulation_(BiometricFacialSevice_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyFace_(BiometricFacialSevice_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IdentifyFace_(BiometricFacialSevice_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BiometricFacialSevice::Stub::AddSocket(::grpc::ClientContext* context, const ::BioService::SocketConfiguration& request, ::BioService::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddSocket_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Response>* BiometricFacialSevice::Stub::AsyncAddSocketRaw(::grpc::ClientContext* context, const ::BioService::SocketConfiguration& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Response>(channel_.get(), cq, rpcmethod_AddSocket_, context, request);
}

::grpc::Status BiometricFacialSevice::Stub::Acquire(::grpc::ClientContext* context, const ::BioService::Photo& request, ::BioService::AcquisitionResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Acquire_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::AcquisitionResponse>* BiometricFacialSevice::Stub::AsyncAcquireRaw(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::AcquisitionResponse>(channel_.get(), cq, rpcmethod_Acquire_, context, request);
}

::grpc::Status BiometricFacialSevice::Stub::Enroll(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::BioService::EnrollmentFeedback* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Enroll_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::EnrollmentFeedback>* BiometricFacialSevice::Stub::AsyncEnrollRaw(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::EnrollmentFeedback>(channel_.get(), cq, rpcmethod_Enroll_, context, request);
}

::grpc::Status BiometricFacialSevice::Stub::Verify(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::BioService::VerificationFeedback* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Verify_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::VerificationFeedback>* BiometricFacialSevice::Stub::AsyncVerifyRaw(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::VerificationFeedback>(channel_.get(), cq, rpcmethod_Verify_, context, request);
}

::grpc::Status BiometricFacialSevice::Stub::CreatePopulation(::grpc::ClientContext* context, const ::BioService::PhotoList& request, ::BioService::PopulationCreationResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreatePopulation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::PopulationCreationResponse>* BiometricFacialSevice::Stub::AsyncCreatePopulationRaw(::grpc::ClientContext* context, const ::BioService::PhotoList& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::PopulationCreationResponse>(channel_.get(), cq, rpcmethod_CreatePopulation_, context, request);
}

::grpc::Status BiometricFacialSevice::Stub::VerifyFace(::grpc::ClientContext* context, const ::BioService::VerificationData& request, ::BioService::FaceSearchResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyFace_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResponse>* BiometricFacialSevice::Stub::AsyncVerifyFaceRaw(::grpc::ClientContext* context, const ::BioService::VerificationData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResponse>(channel_.get(), cq, rpcmethod_VerifyFace_, context, request);
}

::grpc::Status BiometricFacialSevice::Stub::IdentifyFace(::grpc::ClientContext* context, const ::BioService::IdentificationData& request, ::BioService::FaceSearchResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_IdentifyFace_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResponse>* BiometricFacialSevice::Stub::AsyncIdentifyFaceRaw(::grpc::ClientContext* context, const ::BioService::IdentificationData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::FaceSearchResponse>(channel_.get(), cq, rpcmethod_IdentifyFace_, context, request);
}

BiometricFacialSevice::Service::Service() {
  (void)BiometricFacialSevice_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialSevice_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialSevice::Service, ::BioService::SocketConfiguration, ::BioService::Response>(
          std::mem_fn(&BiometricFacialSevice::Service::AddSocket), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialSevice_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialSevice::Service, ::BioService::Photo, ::BioService::AcquisitionResponse>(
          std::mem_fn(&BiometricFacialSevice::Service::Acquire), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialSevice_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialSevice::Service, ::BioService::AcquiredData, ::BioService::EnrollmentFeedback>(
          std::mem_fn(&BiometricFacialSevice::Service::Enroll), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialSevice_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialSevice::Service, ::BioService::AcquiredData, ::BioService::VerificationFeedback>(
          std::mem_fn(&BiometricFacialSevice::Service::Verify), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialSevice_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialSevice::Service, ::BioService::PhotoList, ::BioService::PopulationCreationResponse>(
          std::mem_fn(&BiometricFacialSevice::Service::CreatePopulation), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialSevice_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialSevice::Service, ::BioService::VerificationData, ::BioService::FaceSearchResponse>(
          std::mem_fn(&BiometricFacialSevice::Service::VerifyFace), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFacialSevice_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFacialSevice::Service, ::BioService::IdentificationData, ::BioService::FaceSearchResponse>(
          std::mem_fn(&BiometricFacialSevice::Service::IdentifyFace), this)));
}

BiometricFacialSevice::Service::~Service() {
}

::grpc::Status BiometricFacialSevice::Service::AddSocket(::grpc::ServerContext* context, const ::BioService::SocketConfiguration* request, ::BioService::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricFacialSevice::Service::Acquire(::grpc::ServerContext* context, const ::BioService::Photo* request, ::BioService::AcquisitionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricFacialSevice::Service::Enroll(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::EnrollmentFeedback* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricFacialSevice::Service::Verify(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::VerificationFeedback* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricFacialSevice::Service::CreatePopulation(::grpc::ServerContext* context, const ::BioService::PhotoList* request, ::BioService::PopulationCreationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricFacialSevice::Service::VerifyFace(::grpc::ServerContext* context, const ::BioService::VerificationData* request, ::BioService::FaceSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricFacialSevice::Service::IdentifyFace(::grpc::ServerContext* context, const ::BioService::IdentificationData* request, ::BioService::FaceSearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* BiometricFingerprintSevice_method_names[] = {
  "/BioService.BiometricFingerprintSevice/EnrollFingerprint",
  "/BioService.BiometricFingerprintSevice/VerifyFingerprint",
};

std::unique_ptr< BiometricFingerprintSevice::Stub> BiometricFingerprintSevice::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BiometricFingerprintSevice::Stub> stub(new BiometricFingerprintSevice::Stub(channel));
  return stub;
}

BiometricFingerprintSevice::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_EnrollFingerprint_(BiometricFingerprintSevice_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyFingerprint_(BiometricFingerprintSevice_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BiometricFingerprintSevice::Stub::EnrollFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintAcquiredData& request, ::BioService::EnrollmentFeedback* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_EnrollFingerprint_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::EnrollmentFeedback>* BiometricFingerprintSevice::Stub::AsyncEnrollFingerprintRaw(::grpc::ClientContext* context, const ::BioService::FingerprintAcquiredData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::EnrollmentFeedback>(channel_.get(), cq, rpcmethod_EnrollFingerprint_, context, request);
}

::grpc::Status BiometricFingerprintSevice::Stub::VerifyFingerprint(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::BioService::VerificationFeedback* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyFingerprint_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::VerificationFeedback>* BiometricFingerprintSevice::Stub::AsyncVerifyFingerprintRaw(::grpc::ClientContext* context, const ::BioService::AcquiredData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::VerificationFeedback>(channel_.get(), cq, rpcmethod_VerifyFingerprint_, context, request);
}

BiometricFingerprintSevice::Service::Service() {
  (void)BiometricFingerprintSevice_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFingerprintSevice_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFingerprintSevice::Service, ::BioService::FingerprintAcquiredData, ::BioService::EnrollmentFeedback>(
          std::mem_fn(&BiometricFingerprintSevice::Service::EnrollFingerprint), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricFingerprintSevice_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricFingerprintSevice::Service, ::BioService::AcquiredData, ::BioService::VerificationFeedback>(
          std::mem_fn(&BiometricFingerprintSevice::Service::VerifyFingerprint), this)));
}

BiometricFingerprintSevice::Service::~Service() {
}

::grpc::Status BiometricFingerprintSevice::Service::EnrollFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintAcquiredData* request, ::BioService::EnrollmentFeedback* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricFingerprintSevice::Service::VerifyFingerprint(::grpc::ServerContext* context, const ::BioService::AcquiredData* request, ::BioService::VerificationFeedback* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* BiometricDatabaseService_method_names[] = {
  "/BioService.BiometricDatabaseService/AddFacialImage",
  "/BioService.BiometricDatabaseService/AddFingerprintImage",
};

std::unique_ptr< BiometricDatabaseService::Stub> BiometricDatabaseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BiometricDatabaseService::Stub> stub(new BiometricDatabaseService::Stub(channel));
  return stub;
}

BiometricDatabaseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddFacialImage_(BiometricDatabaseService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddFingerprintImage_(BiometricDatabaseService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BiometricDatabaseService::Stub::AddFacialImage(::grpc::ClientContext* context, const ::BioService::FacialImage& request, ::BioService::DatabaseFacialImageResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddFacialImage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::DatabaseFacialImageResponse>* BiometricDatabaseService::Stub::AsyncAddFacialImageRaw(::grpc::ClientContext* context, const ::BioService::FacialImage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::DatabaseFacialImageResponse>(channel_.get(), cq, rpcmethod_AddFacialImage_, context, request);
}

::grpc::Status BiometricDatabaseService::Stub::AddFingerprintImage(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::BioService::DatabaseFingerprintImageResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddFingerprintImage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::DatabaseFingerprintImageResponse>* BiometricDatabaseService::Stub::AsyncAddFingerprintImageRaw(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::DatabaseFingerprintImageResponse>(channel_.get(), cq, rpcmethod_AddFingerprintImage_, context, request);
}

BiometricDatabaseService::Service::Service() {
  (void)BiometricDatabaseService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricDatabaseService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricDatabaseService::Service, ::BioService::FacialImage, ::BioService::DatabaseFacialImageResponse>(
          std::mem_fn(&BiometricDatabaseService::Service::AddFacialImage), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BiometricDatabaseService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BiometricDatabaseService::Service, ::BioService::FingerprintImage, ::BioService::DatabaseFingerprintImageResponse>(
          std::mem_fn(&BiometricDatabaseService::Service::AddFingerprintImage), this)));
}

BiometricDatabaseService::Service::~Service() {
}

::grpc::Status BiometricDatabaseService::Service::AddFacialImage(::grpc::ServerContext* context, const ::BioService::FacialImage* request, ::BioService::DatabaseFacialImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BiometricDatabaseService::Service::AddFingerprintImage(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::DatabaseFingerprintImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DatabaseSevice_method_names[] = {
  "/BioService.DatabaseSevice/PersonSelect",
  "/BioService.DatabaseSevice/AddPerson",
  "/BioService.DatabaseSevice/UpdatePerson",
  "/BioService.DatabaseSevice/RemovePerson",
  "/BioService.DatabaseSevice/SetThumbnail",
  "/BioService.DatabaseSevice/AddCard",
  "/BioService.DatabaseSevice/RemoveCards",
  "/BioService.DatabaseSevice/RemoveCard",
  "/BioService.DatabaseSevice/SelectPhotos",
  "/BioService.DatabaseSevice/AddPhoto",
  "/BioService.DatabaseSevice/RemovePhotos",
  "/BioService.DatabaseSevice/SelectVisitors",
  "/BioService.DatabaseSevice/AttachVisitorToPerson",
  "/BioService.DatabaseSevice/RemoveVisitors",
  "/BioService.DatabaseSevice/AddVisitor",
  "/BioService.DatabaseSevice/SelectLocations",
  "/BioService.DatabaseSevice/AddLocation",
  "/BioService.DatabaseSevice/UpdateLocation",
  "/BioService.DatabaseSevice/RemoveLocation",
  "/BioService.DatabaseSevice/AddFingerprint",
  "/BioService.DatabaseSevice/RemoveFingerprint",
  "/BioService.DatabaseSevice/UpdateFingerprint",
  "/BioService.DatabaseSevice/AddClient",
  "/BioService.DatabaseSevice/RemoveClient",
};

std::unique_ptr< DatabaseSevice::Stub> DatabaseSevice::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< DatabaseSevice::Stub> stub(new DatabaseSevice::Stub(channel));
  return stub;
}

DatabaseSevice::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PersonSelect_(DatabaseSevice_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPerson_(DatabaseSevice_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdatePerson_(DatabaseSevice_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePerson_(DatabaseSevice_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetThumbnail_(DatabaseSevice_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddCard_(DatabaseSevice_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveCards_(DatabaseSevice_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveCard_(DatabaseSevice_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectPhotos_(DatabaseSevice_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPhoto_(DatabaseSevice_method_names[9], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePhotos_(DatabaseSevice_method_names[10], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectVisitors_(DatabaseSevice_method_names[11], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AttachVisitorToPerson_(DatabaseSevice_method_names[12], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveVisitors_(DatabaseSevice_method_names[13], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddVisitor_(DatabaseSevice_method_names[14], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SelectLocations_(DatabaseSevice_method_names[15], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddLocation_(DatabaseSevice_method_names[16], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateLocation_(DatabaseSevice_method_names[17], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveLocation_(DatabaseSevice_method_names[18], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddFingerprint_(DatabaseSevice_method_names[19], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveFingerprint_(DatabaseSevice_method_names[20], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateFingerprint_(DatabaseSevice_method_names[21], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddClient_(DatabaseSevice_method_names[22], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveClient_(DatabaseSevice_method_names[23], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DatabaseSevice::Stub::PersonSelect(::grpc::ClientContext* context, const ::BioService::QueryPersons& request, ::BioService::PersonList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PersonSelect_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::PersonList>* DatabaseSevice::Stub::AsyncPersonSelectRaw(::grpc::ClientContext* context, const ::BioService::QueryPersons& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::PersonList>(channel_.get(), cq, rpcmethod_PersonSelect_, context, request);
}

::grpc::Status DatabaseSevice::Stub::AddPerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::BioService::Person* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddPerson_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Person>* DatabaseSevice::Stub::AsyncAddPersonRaw(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Person>(channel_.get(), cq, rpcmethod_AddPerson_, context, request);
}

::grpc::Status DatabaseSevice::Stub::UpdatePerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::BioService::Person* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpdatePerson_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Person>* DatabaseSevice::Stub::AsyncUpdatePersonRaw(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Person>(channel_.get(), cq, rpcmethod_UpdatePerson_, context, request);
}

::grpc::Status DatabaseSevice::Stub::RemovePerson(::grpc::ClientContext* context, const ::BioService::Person& request, ::BioService::Person* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RemovePerson_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Person>* DatabaseSevice::Stub::AsyncRemovePersonRaw(::grpc::ClientContext* context, const ::BioService::Person& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Person>(channel_.get(), cq, rpcmethod_RemovePerson_, context, request);
}

::grpc::Status DatabaseSevice::Stub::SetThumbnail(::grpc::ClientContext* context, const ::BioService::Photo& request, ::BioService::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetThumbnail_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Response>* DatabaseSevice::Stub::AsyncSetThumbnailRaw(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Response>(channel_.get(), cq, rpcmethod_SetThumbnail_, context, request);
}

::grpc::Status DatabaseSevice::Stub::AddCard(::grpc::ClientContext* context, const ::BioService::Card& request, ::BioService::Card* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddCard_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Card>* DatabaseSevice::Stub::AsyncAddCardRaw(::grpc::ClientContext* context, const ::BioService::Card& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Card>(channel_.get(), cq, rpcmethod_AddCard_, context, request);
}

::grpc::Status DatabaseSevice::Stub::RemoveCards(::grpc::ClientContext* context, const ::BioService::CardList& request, ::BioService::CardList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveCards_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::CardList>* DatabaseSevice::Stub::AsyncRemoveCardsRaw(::grpc::ClientContext* context, const ::BioService::CardList& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::CardList>(channel_.get(), cq, rpcmethod_RemoveCards_, context, request);
}

::grpc::Status DatabaseSevice::Stub::RemoveCard(::grpc::ClientContext* context, const ::BioService::Card& request, ::BioService::Card* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveCard_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Card>* DatabaseSevice::Stub::AsyncRemoveCardRaw(::grpc::ClientContext* context, const ::BioService::Card& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Card>(channel_.get(), cq, rpcmethod_RemoveCard_, context, request);
}

::grpc::Status DatabaseSevice::Stub::SelectPhotos(::grpc::ClientContext* context, const ::BioService::QueryPhoto& request, ::BioService::PhotoList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SelectPhotos_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::PhotoList>* DatabaseSevice::Stub::AsyncSelectPhotosRaw(::grpc::ClientContext* context, const ::BioService::QueryPhoto& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::PhotoList>(channel_.get(), cq, rpcmethod_SelectPhotos_, context, request);
}

::grpc::Status DatabaseSevice::Stub::AddPhoto(::grpc::ClientContext* context, const ::BioService::Photo& request, ::BioService::Photo* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddPhoto_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Photo>* DatabaseSevice::Stub::AsyncAddPhotoRaw(::grpc::ClientContext* context, const ::BioService::Photo& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Photo>(channel_.get(), cq, rpcmethod_AddPhoto_, context, request);
}

::grpc::Status DatabaseSevice::Stub::RemovePhotos(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::BioService::RawIndexes* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RemovePhotos_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::RawIndexes>* DatabaseSevice::Stub::AsyncRemovePhotosRaw(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::RawIndexes>(channel_.get(), cq, rpcmethod_RemovePhotos_, context, request);
}

::grpc::Status DatabaseSevice::Stub::SelectVisitors(::grpc::ClientContext* context, const ::BioService::QueryVisitors& request, ::BioService::VisitorList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SelectVisitors_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::VisitorList>* DatabaseSevice::Stub::AsyncSelectVisitorsRaw(::grpc::ClientContext* context, const ::BioService::QueryVisitors& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::VisitorList>(channel_.get(), cq, rpcmethod_SelectVisitors_, context, request);
}

::grpc::Status DatabaseSevice::Stub::AttachVisitorToPerson(::grpc::ClientContext* context, const ::BioService::Visitor& request, ::BioService::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AttachVisitorToPerson_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Response>* DatabaseSevice::Stub::AsyncAttachVisitorToPersonRaw(::grpc::ClientContext* context, const ::BioService::Visitor& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Response>(channel_.get(), cq, rpcmethod_AttachVisitorToPerson_, context, request);
}

::grpc::Status DatabaseSevice::Stub::RemoveVisitors(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::BioService::RawIndexes* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveVisitors_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::RawIndexes>* DatabaseSevice::Stub::AsyncRemoveVisitorsRaw(::grpc::ClientContext* context, const ::BioService::RawIndexes& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::RawIndexes>(channel_.get(), cq, rpcmethod_RemoveVisitors_, context, request);
}

::grpc::Status DatabaseSevice::Stub::AddVisitor(::grpc::ClientContext* context, const ::BioService::FullVisitorData& request, ::BioService::Visitor* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddVisitor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Visitor>* DatabaseSevice::Stub::AsyncAddVisitorRaw(::grpc::ClientContext* context, const ::BioService::FullVisitorData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Visitor>(channel_.get(), cq, rpcmethod_AddVisitor_, context, request);
}

::grpc::Status DatabaseSevice::Stub::SelectLocations(::grpc::ClientContext* context, const ::BioService::QueryLocations& request, ::BioService::LocationList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SelectLocations_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::LocationList>* DatabaseSevice::Stub::AsyncSelectLocationsRaw(::grpc::ClientContext* context, const ::BioService::QueryLocations& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::LocationList>(channel_.get(), cq, rpcmethod_SelectLocations_, context, request);
}

::grpc::Status DatabaseSevice::Stub::AddLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::BioService::Location* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddLocation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Location>* DatabaseSevice::Stub::AsyncAddLocationRaw(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Location>(channel_.get(), cq, rpcmethod_AddLocation_, context, request);
}

::grpc::Status DatabaseSevice::Stub::UpdateLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::BioService::Location* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateLocation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Location>* DatabaseSevice::Stub::AsyncUpdateLocationRaw(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Location>(channel_.get(), cq, rpcmethod_UpdateLocation_, context, request);
}

::grpc::Status DatabaseSevice::Stub::RemoveLocation(::grpc::ClientContext* context, const ::BioService::Location& request, ::BioService::Location* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveLocation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Location>* DatabaseSevice::Stub::AsyncRemoveLocationRaw(::grpc::ClientContext* context, const ::BioService::Location& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Location>(channel_.get(), cq, rpcmethod_RemoveLocation_, context, request);
}

::grpc::Status DatabaseSevice::Stub::AddFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::BioService::FingerprintImage* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddFingerprint_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>* DatabaseSevice::Stub::AsyncAddFingerprintRaw(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>(channel_.get(), cq, rpcmethod_AddFingerprint_, context, request);
}

::grpc::Status DatabaseSevice::Stub::RemoveFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::BioService::FingerprintImage* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveFingerprint_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>* DatabaseSevice::Stub::AsyncRemoveFingerprintRaw(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>(channel_.get(), cq, rpcmethod_RemoveFingerprint_, context, request);
}

::grpc::Status DatabaseSevice::Stub::UpdateFingerprint(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::BioService::FingerprintImage* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateFingerprint_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>* DatabaseSevice::Stub::AsyncUpdateFingerprintRaw(::grpc::ClientContext* context, const ::BioService::FingerprintImage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::FingerprintImage>(channel_.get(), cq, rpcmethod_UpdateFingerprint_, context, request);
}

::grpc::Status DatabaseSevice::Stub::AddClient(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::BioService::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddClient_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Response>* DatabaseSevice::Stub::AsyncAddClientRaw(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Response>(channel_.get(), cq, rpcmethod_AddClient_, context, request);
}

::grpc::Status DatabaseSevice::Stub::RemoveClient(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::BioService::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveClient_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BioService::Response>* DatabaseSevice::Stub::AsyncRemoveClientRaw(::grpc::ClientContext* context, const ::BioService::BioClient& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::BioService::Response>(channel_.get(), cq, rpcmethod_RemoveClient_, context, request);
}

DatabaseSevice::Service::Service() {
  (void)DatabaseSevice_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::QueryPersons, ::BioService::PersonList>(
          std::mem_fn(&DatabaseSevice::Service::PersonSelect), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Person, ::BioService::Person>(
          std::mem_fn(&DatabaseSevice::Service::AddPerson), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Person, ::BioService::Person>(
          std::mem_fn(&DatabaseSevice::Service::UpdatePerson), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Person, ::BioService::Person>(
          std::mem_fn(&DatabaseSevice::Service::RemovePerson), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Photo, ::BioService::Response>(
          std::mem_fn(&DatabaseSevice::Service::SetThumbnail), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Card, ::BioService::Card>(
          std::mem_fn(&DatabaseSevice::Service::AddCard), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::CardList, ::BioService::CardList>(
          std::mem_fn(&DatabaseSevice::Service::RemoveCards), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Card, ::BioService::Card>(
          std::mem_fn(&DatabaseSevice::Service::RemoveCard), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::QueryPhoto, ::BioService::PhotoList>(
          std::mem_fn(&DatabaseSevice::Service::SelectPhotos), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[9],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Photo, ::BioService::Photo>(
          std::mem_fn(&DatabaseSevice::Service::AddPhoto), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[10],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::RawIndexes, ::BioService::RawIndexes>(
          std::mem_fn(&DatabaseSevice::Service::RemovePhotos), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[11],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::QueryVisitors, ::BioService::VisitorList>(
          std::mem_fn(&DatabaseSevice::Service::SelectVisitors), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[12],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Visitor, ::BioService::Response>(
          std::mem_fn(&DatabaseSevice::Service::AttachVisitorToPerson), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[13],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::RawIndexes, ::BioService::RawIndexes>(
          std::mem_fn(&DatabaseSevice::Service::RemoveVisitors), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[14],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::FullVisitorData, ::BioService::Visitor>(
          std::mem_fn(&DatabaseSevice::Service::AddVisitor), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[15],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::QueryLocations, ::BioService::LocationList>(
          std::mem_fn(&DatabaseSevice::Service::SelectLocations), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[16],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Location, ::BioService::Location>(
          std::mem_fn(&DatabaseSevice::Service::AddLocation), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[17],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Location, ::BioService::Location>(
          std::mem_fn(&DatabaseSevice::Service::UpdateLocation), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[18],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::Location, ::BioService::Location>(
          std::mem_fn(&DatabaseSevice::Service::RemoveLocation), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[19],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::FingerprintImage, ::BioService::FingerprintImage>(
          std::mem_fn(&DatabaseSevice::Service::AddFingerprint), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[20],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::FingerprintImage, ::BioService::FingerprintImage>(
          std::mem_fn(&DatabaseSevice::Service::RemoveFingerprint), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[21],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::FingerprintImage, ::BioService::FingerprintImage>(
          std::mem_fn(&DatabaseSevice::Service::UpdateFingerprint), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[22],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::BioClient, ::BioService::Response>(
          std::mem_fn(&DatabaseSevice::Service::AddClient), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DatabaseSevice_method_names[23],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DatabaseSevice::Service, ::BioService::BioClient, ::BioService::Response>(
          std::mem_fn(&DatabaseSevice::Service::RemoveClient), this)));
}

DatabaseSevice::Service::~Service() {
}

::grpc::Status DatabaseSevice::Service::PersonSelect(::grpc::ServerContext* context, const ::BioService::QueryPersons* request, ::BioService::PersonList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::AddPerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::BioService::Person* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::UpdatePerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::BioService::Person* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::RemovePerson(::grpc::ServerContext* context, const ::BioService::Person* request, ::BioService::Person* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::SetThumbnail(::grpc::ServerContext* context, const ::BioService::Photo* request, ::BioService::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::AddCard(::grpc::ServerContext* context, const ::BioService::Card* request, ::BioService::Card* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::RemoveCards(::grpc::ServerContext* context, const ::BioService::CardList* request, ::BioService::CardList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::RemoveCard(::grpc::ServerContext* context, const ::BioService::Card* request, ::BioService::Card* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::SelectPhotos(::grpc::ServerContext* context, const ::BioService::QueryPhoto* request, ::BioService::PhotoList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::AddPhoto(::grpc::ServerContext* context, const ::BioService::Photo* request, ::BioService::Photo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::RemovePhotos(::grpc::ServerContext* context, const ::BioService::RawIndexes* request, ::BioService::RawIndexes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::SelectVisitors(::grpc::ServerContext* context, const ::BioService::QueryVisitors* request, ::BioService::VisitorList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::AttachVisitorToPerson(::grpc::ServerContext* context, const ::BioService::Visitor* request, ::BioService::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::RemoveVisitors(::grpc::ServerContext* context, const ::BioService::RawIndexes* request, ::BioService::RawIndexes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::AddVisitor(::grpc::ServerContext* context, const ::BioService::FullVisitorData* request, ::BioService::Visitor* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::SelectLocations(::grpc::ServerContext* context, const ::BioService::QueryLocations* request, ::BioService::LocationList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::AddLocation(::grpc::ServerContext* context, const ::BioService::Location* request, ::BioService::Location* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::UpdateLocation(::grpc::ServerContext* context, const ::BioService::Location* request, ::BioService::Location* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::RemoveLocation(::grpc::ServerContext* context, const ::BioService::Location* request, ::BioService::Location* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::AddFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::FingerprintImage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::RemoveFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::FingerprintImage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::UpdateFingerprint(::grpc::ServerContext* context, const ::BioService::FingerprintImage* request, ::BioService::FingerprintImage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::AddClient(::grpc::ServerContext* context, const ::BioService::BioClient* request, ::BioService::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseSevice::Service::RemoveClient(::grpc::ServerContext* context, const ::BioService::BioClient* request, ::BioService::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace BioService

