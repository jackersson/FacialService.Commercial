// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bio_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protobufs/bio_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BioService {

namespace {

const ::google::protobuf::Descriptor* ServiceException_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceException_reflection_ = NULL;
const ::google::protobuf::Descriptor* PopulationCreationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PopulationCreationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcquisitionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcquisitionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawIndexes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawIndexes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Criminal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Criminal_reflection_ = NULL;
const ::google::protobuf::Descriptor* FullVisitorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FullVisitorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Person_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Person_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccessDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaptureDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaptureDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* FingerprintDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FingerprintDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* IrisDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IrisDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Card_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccessInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AccessInfo_AccessType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LogRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfidentPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfidentPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* EyesCharacteristic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EyesCharacteristic_reflection_ = NULL;
const ::google::protobuf::Descriptor* PortraitCharacteristic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortraitCharacteristic_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceCharacteristic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceCharacteristic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* SurroundingBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SurroundingBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetailedEyeCharacteristic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetailedEyeCharacteristic_reflection_ = NULL;
const ::google::protobuf::Descriptor* FingerprintCharacteristic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FingerprintCharacteristic_reflection_ = NULL;
const ::google::protobuf::Descriptor* BioIdentificationRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BioIdentificationRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* BioFingerprintData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BioFingerprintData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BioPersonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BioPersonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BiometricData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiometricData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacialImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacialImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatabaseFacialImageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatabaseFacialImageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FingerprintImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FingerprintImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatabaseFingerprintImageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatabaseFingerprintImageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Photo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Photo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Visitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Visitor_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisitorList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisitorList_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhotoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BiometricDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiometricDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerificationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerificationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* IdentificationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdentificationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Match_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Match_reflection_ = NULL;
const ::google::protobuf::Descriptor* Matches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Matches_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceSearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceSearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcquiredData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcquiredData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FingerprintAcquiredData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FingerprintAcquiredData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnrollmentFeedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnrollmentFeedback_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerificationFeedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerificationFeedback_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPhoto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QueryPhoto_PhotoResponseType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QueryPersons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPersons_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryLocations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryLocations_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryVisitors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryVisitors_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocketConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocketConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* BioClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BioClient_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EntityState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Finger_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EyeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AccessState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Gender_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Rights_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PhotoSizeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PhotoOriginType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IsoComplianceTemplate_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Ethnicity_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_bio_5fservice_2eproto() {
  protobuf_AddDesc_bio_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bio_service.proto");
  GOOGLE_CHECK(file != NULL);
  ServiceException_descriptor_ = file->message_type(0);
  static const int ServiceException_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceException, is_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceException, error_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceException, message_),
  };
  ServiceException_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServiceException_descriptor_,
      ServiceException::default_instance_,
      ServiceException_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServiceException),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceException, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceException, _is_default_instance_));
  PopulationCreationResponse_descriptor_ = file->message_type(1);
  static const int PopulationCreationResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, exception_),
  };
  PopulationCreationResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PopulationCreationResponse_descriptor_,
      PopulationCreationResponse::default_instance_,
      PopulationCreationResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PopulationCreationResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopulationCreationResponse, _is_default_instance_));
  AcquisitionResponse_descriptor_ = file->message_type(2);
  static const int AcquisitionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquisitionResponse, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquisitionResponse, exception_),
  };
  AcquisitionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AcquisitionResponse_descriptor_,
      AcquisitionResponse::default_instance_,
      AcquisitionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AcquisitionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquisitionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquisitionResponse, _is_default_instance_));
  RawIndexes_descriptor_ = file->message_type(3);
  static const int RawIndexes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawIndexes, indexes_),
  };
  RawIndexes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawIndexes_descriptor_,
      RawIndexes::default_instance_,
      RawIndexes_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawIndexes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawIndexes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawIndexes, _is_default_instance_));
  Criminal_descriptor_ = file->message_type(4);
  static const int Criminal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Criminal, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Criminal, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Criminal, alert_),
  };
  Criminal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Criminal_descriptor_,
      Criminal::default_instance_,
      Criminal_offsets_,
      -1,
      -1,
      -1,
      sizeof(Criminal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Criminal, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Criminal, _is_default_instance_));
  FullVisitorData_descriptor_ = file->message_type(5);
  static const int FullVisitorData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullVisitorData, visitor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullVisitorData, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullVisitorData, fingerprint_),
  };
  FullVisitorData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FullVisitorData_descriptor_,
      FullVisitorData::default_instance_,
      FullVisitorData_offsets_,
      -1,
      -1,
      -1,
      sizeof(FullVisitorData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullVisitorData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullVisitorData, _is_default_instance_));
  Person_descriptor_ = file->message_type(6);
  static const int Person_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, dateofbirth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, rights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, thumbnailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, criminal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, fingerprints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, biometric_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, exception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, message_),
  };
  Person_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Person_descriptor_,
      Person::default_instance_,
      Person_offsets_,
      -1,
      -1,
      -1,
      sizeof(Person),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _is_default_instance_));
  AccessDevice_descriptor_ = file->message_type(7);
  static const int AccessDevice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, portname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, exception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, entity_state_),
  };
  AccessDevice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AccessDevice_descriptor_,
      AccessDevice::default_instance_,
      AccessDevice_offsets_,
      -1,
      -1,
      -1,
      sizeof(AccessDevice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessDevice, _is_default_instance_));
  CaptureDevice_descriptor_ = file->message_type(8);
  static const int CaptureDevice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureDevice, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureDevice, exception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureDevice, entity_state_),
  };
  CaptureDevice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CaptureDevice_descriptor_,
      CaptureDevice::default_instance_,
      CaptureDevice_offsets_,
      -1,
      -1,
      -1,
      sizeof(CaptureDevice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureDevice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureDevice, _is_default_instance_));
  FingerprintDevice_descriptor_ = file->message_type(9);
  static const int FingerprintDevice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintDevice, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintDevice, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintDevice, exception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintDevice, entity_state_),
  };
  FingerprintDevice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FingerprintDevice_descriptor_,
      FingerprintDevice::default_instance_,
      FingerprintDevice_offsets_,
      -1,
      -1,
      -1,
      sizeof(FingerprintDevice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintDevice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintDevice, _is_default_instance_));
  IrisDevice_descriptor_ = file->message_type(10);
  static const int IrisDevice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrisDevice, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrisDevice, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrisDevice, exception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrisDevice, entity_state_),
  };
  IrisDevice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IrisDevice_descriptor_,
      IrisDevice::default_instance_,
      IrisDevice_offsets_,
      -1,
      -1,
      -1,
      sizeof(IrisDevice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrisDevice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrisDevice, _is_default_instance_));
  Card_descriptor_ = file->message_type(11);
  static const int Card_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, personid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, unique_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, exception_),
  };
  Card_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Card_descriptor_,
      Card::default_instance_,
      Card_offsets_,
      -1,
      -1,
      -1,
      sizeof(Card),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _is_default_instance_));
  Location_descriptor_ = file->message_type(12);
  static const int Location_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, location_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, mac_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, capturedevice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, accessdevice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, fingerprintdevice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, irisdevice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, access_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, exception_),
  };
  Location_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Location_descriptor_,
      Location::default_instance_,
      Location_offsets_,
      -1,
      -1,
      -1,
      sizeof(Location),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _is_default_instance_));
  AccessInfo_descriptor_ = file->message_type(13);
  static const int AccessInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessInfo, access_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessInfo, persons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessInfo, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessInfo, exception_),
  };
  AccessInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AccessInfo_descriptor_,
      AccessInfo::default_instance_,
      AccessInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(AccessInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessInfo, _is_default_instance_));
  AccessInfo_AccessType_descriptor_ = AccessInfo_descriptor_->enum_type(0);
  LogRecord_descriptor_ = file->message_type(14);
  static const int LogRecord_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, detected_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, exception_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, function_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, line_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, comment_),
  };
  LogRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogRecord_descriptor_,
      LogRecord::default_instance_,
      LogRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, _is_default_instance_));
  ConfidentPosition_descriptor_ = file->message_type(15);
  static const int ConfidentPosition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidentPosition, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidentPosition, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidentPosition, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidentPosition, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidentPosition, exception_),
  };
  ConfidentPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfidentPosition_descriptor_,
      ConfidentPosition::default_instance_,
      ConfidentPosition_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConfidentPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidentPosition, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidentPosition, _is_default_instance_));
  EyesCharacteristic_descriptor_ = file->message_type(16);
  static const int EyesCharacteristic_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyesCharacteristic, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyesCharacteristic, left_eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyesCharacteristic, right_eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyesCharacteristic, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyesCharacteristic, exception_),
  };
  EyesCharacteristic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EyesCharacteristic_descriptor_,
      EyesCharacteristic::default_instance_,
      EyesCharacteristic_offsets_,
      -1,
      -1,
      -1,
      sizeof(EyesCharacteristic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyesCharacteristic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyesCharacteristic, _is_default_instance_));
  PortraitCharacteristic_descriptor_ = file->message_type(17);
  static const int PortraitCharacteristic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortraitCharacteristic, faces_),
  };
  PortraitCharacteristic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PortraitCharacteristic_descriptor_,
      PortraitCharacteristic::default_instance_,
      PortraitCharacteristic_offsets_,
      -1,
      -1,
      -1,
      sizeof(PortraitCharacteristic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortraitCharacteristic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortraitCharacteristic, _is_default_instance_));
  FaceCharacteristic_descriptor_ = file->message_type(18);
  static const int FaceCharacteristic_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, eye_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, face_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, glasses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, natural_skin_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, head_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, head_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, pose_angle_roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, chin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, crown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, left_ear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, rigth_ear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, mouth_closed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, ethnithity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, eyes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, compliance_iso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, good_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, best_practices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, personid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, photoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, exception_),
  };
  FaceCharacteristic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FaceCharacteristic_descriptor_,
      FaceCharacteristic::default_instance_,
      FaceCharacteristic_offsets_,
      -1,
      -1,
      -1,
      sizeof(FaceCharacteristic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceCharacteristic, _is_default_instance_));
  Position_descriptor_ = file->message_type(19);
  static const int Position_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
  };
  Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      -1,
      -1,
      -1,
      sizeof(Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _is_default_instance_));
  SurroundingBox_descriptor_ = file->message_type(20);
  static const int SurroundingBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurroundingBox, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurroundingBox, end_),
  };
  SurroundingBox_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SurroundingBox_descriptor_,
      SurroundingBox::default_instance_,
      SurroundingBox_offsets_,
      -1,
      -1,
      -1,
      sizeof(SurroundingBox),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurroundingBox, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurroundingBox, _is_default_instance_));
  DetailedEyeCharacteristic_descriptor_ = file->message_type(21);
  static const int DetailedEyeCharacteristic_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEyeCharacteristic, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEyeCharacteristic, is_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEyeCharacteristic, is_gaze_frontal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEyeCharacteristic, is_red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEyeCharacteristic, is_tined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEyeCharacteristic, confidence_),
  };
  DetailedEyeCharacteristic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetailedEyeCharacteristic_descriptor_,
      DetailedEyeCharacteristic::default_instance_,
      DetailedEyeCharacteristic_offsets_,
      -1,
      -1,
      -1,
      sizeof(DetailedEyeCharacteristic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEyeCharacteristic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEyeCharacteristic, _is_default_instance_));
  FingerprintCharacteristic_descriptor_ = file->message_type(22);
  static const int FingerprintCharacteristic_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, minutiaes_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, personid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, photoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, exception_),
  };
  FingerprintCharacteristic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FingerprintCharacteristic_descriptor_,
      FingerprintCharacteristic::default_instance_,
      FingerprintCharacteristic_offsets_,
      -1,
      -1,
      -1,
      sizeof(FingerprintCharacteristic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintCharacteristic, _is_default_instance_));
  BioIdentificationRecord_descriptor_ = file->message_type(23);
  static const int BioIdentificationRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioIdentificationRecord, bir_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioIdentificationRecord, bir_bytestring_),
  };
  BioIdentificationRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BioIdentificationRecord_descriptor_,
      BioIdentificationRecord::default_instance_,
      BioIdentificationRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(BioIdentificationRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioIdentificationRecord, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioIdentificationRecord, _is_default_instance_));
  BioFingerprintData_descriptor_ = file->message_type(24);
  static const int BioFingerprintData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioFingerprintData, characteristics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioFingerprintData, biometric_record_),
  };
  BioFingerprintData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BioFingerprintData_descriptor_,
      BioFingerprintData::default_instance_,
      BioFingerprintData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BioFingerprintData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioFingerprintData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioFingerprintData, _is_default_instance_));
  BioPersonData_descriptor_ = file->message_type(25);
  static const int BioPersonData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioPersonData, person_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioPersonData, faces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioPersonData, fingerprints_),
  };
  BioPersonData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BioPersonData_descriptor_,
      BioPersonData::default_instance_,
      BioPersonData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BioPersonData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioPersonData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioPersonData, _is_default_instance_));
  BiometricData_descriptor_ = file->message_type(26);
  static const int BiometricData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricData, faces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricData, fingerprints_),
  };
  BiometricData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BiometricData_descriptor_,
      BiometricData::default_instance_,
      BiometricData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BiometricData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricData, _is_default_instance_));
  FacialImage_descriptor_ = file->message_type(27);
  static const int FacialImage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacialImage, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacialImage, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacialImage, template__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacialImage, faces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacialImage, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacialImage, exception_),
  };
  FacialImage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FacialImage_descriptor_,
      FacialImage::default_instance_,
      FacialImage_offsets_,
      -1,
      -1,
      -1,
      sizeof(FacialImage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacialImage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacialImage, _is_default_instance_));
  DatabaseFacialImageResponse_descriptor_ = file->message_type(28);
  static const int DatabaseFacialImageResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseFacialImageResponse, faces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseFacialImageResponse, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseFacialImageResponse, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseFacialImageResponse, exception_),
  };
  DatabaseFacialImageResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DatabaseFacialImageResponse_descriptor_,
      DatabaseFacialImageResponse::default_instance_,
      DatabaseFacialImageResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DatabaseFacialImageResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseFacialImageResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseFacialImageResponse, _is_default_instance_));
  FingerprintImage_descriptor_ = file->message_type(29);
  static const int FingerprintImage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintImage, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintImage, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintImage, template__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintImage, fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintImage, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintImage, exception_),
  };
  FingerprintImage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FingerprintImage_descriptor_,
      FingerprintImage::default_instance_,
      FingerprintImage_offsets_,
      -1,
      -1,
      -1,
      sizeof(FingerprintImage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintImage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintImage, _is_default_instance_));
  DatabaseFingerprintImageResponse_descriptor_ = file->message_type(30);
  static const int DatabaseFingerprintImageResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseFingerprintImageResponse, fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseFingerprintImageResponse, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseFingerprintImageResponse, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseFingerprintImageResponse, exception_),
  };
  DatabaseFingerprintImageResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DatabaseFingerprintImageResponse_descriptor_,
      DatabaseFingerprintImageResponse::default_instance_,
      DatabaseFingerprintImageResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DatabaseFingerprintImageResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseFingerprintImageResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseFingerprintImageResponse, _is_default_instance_));
  Photo_descriptor_ = file->message_type(31);
  static const int Photo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, photo_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, bytestring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, origin_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, exception_),
  };
  Photo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Photo_descriptor_,
      Photo::default_instance_,
      Photo_offsets_,
      -1,
      -1,
      -1,
      sizeof(Photo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, _is_default_instance_));
  Visitor_descriptor_ = file->message_type(32);
  static const int Visitor_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, personid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, locationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, card_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, biometricdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, entity_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, exception_),
  };
  Visitor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Visitor_descriptor_,
      Visitor::default_instance_,
      Visitor_offsets_,
      -1,
      -1,
      -1,
      sizeof(Visitor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visitor, _is_default_instance_));
  VisitorList_descriptor_ = file->message_type(33);
  static const int VisitorList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitorList, visitors_),
  };
  VisitorList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VisitorList_descriptor_,
      VisitorList::default_instance_,
      VisitorList_offsets_,
      -1,
      -1,
      -1,
      sizeof(VisitorList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitorList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisitorList, _is_default_instance_));
  LocationList_descriptor_ = file->message_type(34);
  static const int LocationList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationList, locations_),
  };
  LocationList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocationList_descriptor_,
      LocationList::default_instance_,
      LocationList_offsets_,
      -1,
      -1,
      -1,
      sizeof(LocationList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationList, _is_default_instance_));
  PersonList_descriptor_ = file->message_type(35);
  static const int PersonList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonList, persons_),
  };
  PersonList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PersonList_descriptor_,
      PersonList::default_instance_,
      PersonList_offsets_,
      -1,
      -1,
      -1,
      sizeof(PersonList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonList, _is_default_instance_));
  PhotoList_descriptor_ = file->message_type(36);
  static const int PhotoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoList, photos_),
  };
  PhotoList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PhotoList_descriptor_,
      PhotoList::default_instance_,
      PhotoList_offsets_,
      -1,
      -1,
      -1,
      sizeof(PhotoList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoList, _is_default_instance_));
  CardList_descriptor_ = file->message_type(37);
  static const int CardList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardList, cards_),
  };
  CardList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CardList_descriptor_,
      CardList::default_instance_,
      CardList_offsets_,
      -1,
      -1,
      -1,
      sizeof(CardList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardList, _is_default_instance_));
  BiometricDataList_descriptor_ = file->message_type(38);
  static const int BiometricDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricDataList, data_),
  };
  BiometricDataList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BiometricDataList_descriptor_,
      BiometricDataList::default_instance_,
      BiometricDataList_offsets_,
      -1,
      -1,
      -1,
      sizeof(BiometricDataList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricDataList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiometricDataList, _is_default_instance_));
  Response_descriptor_ = file->message_type(39);
  static const int Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, good_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  VerificationData_descriptor_ = file->message_type(40);
  static const int VerificationData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, target_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, comparison_image_),
  };
  VerificationData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VerificationData_descriptor_,
      VerificationData::default_instance_,
      VerificationData_offsets_,
      -1,
      -1,
      -1,
      sizeof(VerificationData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationData, _is_default_instance_));
  IdentificationData_descriptor_ = file->message_type(41);
  static const int IdentificationData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, target_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, population_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, comparison_images_),
  };
  IdentificationData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IdentificationData_descriptor_,
      IdentificationData::default_instance_,
      IdentificationData_offsets_,
      -1,
      -1,
      -1,
      sizeof(IdentificationData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentificationData, _is_default_instance_));
  Match_descriptor_ = file->message_type(42);
  static const int Match_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, match_),
  };
  Match_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Match_descriptor_,
      Match::default_instance_,
      Match_offsets_,
      -1,
      -1,
      -1,
      sizeof(Match),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _is_default_instance_));
  Matches_descriptor_ = file->message_type(43);
  static const int Matches_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matches, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matches, matches_),
  };
  Matches_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Matches_descriptor_,
      Matches::default_instance_,
      Matches_offsets_,
      -1,
      -1,
      -1,
      sizeof(Matches),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matches, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matches, _is_default_instance_));
  FaceSearchResponse_descriptor_ = file->message_type(44);
  static const int FaceSearchResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, portraits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, matches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, exception_),
  };
  FaceSearchResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FaceSearchResponse_descriptor_,
      FaceSearchResponse::default_instance_,
      FaceSearchResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(FaceSearchResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSearchResponse, _is_default_instance_));
  AcquiredData_descriptor_ = file->message_type(45);
  static const int AcquiredData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquiredData, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquiredData, owner_id_),
  };
  AcquiredData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AcquiredData_descriptor_,
      AcquiredData::default_instance_,
      AcquiredData_offsets_,
      -1,
      -1,
      -1,
      sizeof(AcquiredData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquiredData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcquiredData, _is_default_instance_));
  FingerprintAcquiredData_descriptor_ = file->message_type(46);
  static const int FingerprintAcquiredData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintAcquiredData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintAcquiredData, position_),
  };
  FingerprintAcquiredData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FingerprintAcquiredData_descriptor_,
      FingerprintAcquiredData::default_instance_,
      FingerprintAcquiredData_offsets_,
      -1,
      -1,
      -1,
      sizeof(FingerprintAcquiredData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintAcquiredData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintAcquiredData, _is_default_instance_));
  EnrollmentFeedback_descriptor_ = file->message_type(47);
  static const int EnrollmentFeedback_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, characteristic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, photo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, exception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, message_),
  };
  EnrollmentFeedback_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnrollmentFeedback_descriptor_,
      EnrollmentFeedback::default_instance_,
      EnrollmentFeedback_offsets_,
      -1,
      -1,
      -1,
      sizeof(EnrollmentFeedback),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnrollmentFeedback, _is_default_instance_));
  VerificationFeedback_descriptor_ = file->message_type(48);
  static const int VerificationFeedback_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationFeedback, enrollment_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationFeedback, match_),
  };
  VerificationFeedback_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VerificationFeedback_descriptor_,
      VerificationFeedback::default_instance_,
      VerificationFeedback_offsets_,
      -1,
      -1,
      -1,
      sizeof(VerificationFeedback),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationFeedback, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerificationFeedback, _is_default_instance_));
  QueryPhoto_descriptor_ = file->message_type(49);
  static const int QueryPhoto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhoto, with_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhoto, persons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhoto, photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhoto, items_per_page_),
  };
  QueryPhoto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryPhoto_descriptor_,
      QueryPhoto::default_instance_,
      QueryPhoto_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryPhoto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhoto, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhoto, _is_default_instance_));
  QueryPhoto_PhotoResponseType_descriptor_ = QueryPhoto_descriptor_->enum_type(0);
  QueryPersons_descriptor_ = file->message_type(50);
  static const int QueryPersons_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPersons, count_),
  };
  QueryPersons_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryPersons_descriptor_,
      QueryPersons::default_instance_,
      QueryPersons_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryPersons),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPersons, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPersons, _is_default_instance_));
  QueryLocations_descriptor_ = file->message_type(51);
  static const int QueryLocations_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLocations, count_),
  };
  QueryLocations_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryLocations_descriptor_,
      QueryLocations::default_instance_,
      QueryLocations_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryLocations),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLocations, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLocations, _is_default_instance_));
  QueryVisitors_descriptor_ = file->message_type(52);
  static const int QueryVisitors_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVisitors, countries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVisitors, locations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVisitors, persons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVisitors, datetime_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVisitors, datetime_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVisitors, items_per_page_),
  };
  QueryVisitors_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryVisitors_descriptor_,
      QueryVisitors::default_instance_,
      QueryVisitors_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryVisitors),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVisitors, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVisitors, _is_default_instance_));
  SocketConfiguration_descriptor_ = file->message_type(53);
  static const int SocketConfiguration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketConfiguration, address_),
  };
  SocketConfiguration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SocketConfiguration_descriptor_,
      SocketConfiguration::default_instance_,
      SocketConfiguration_offsets_,
      -1,
      -1,
      -1,
      sizeof(SocketConfiguration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketConfiguration, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketConfiguration, _is_default_instance_));
  BioClient_descriptor_ = file->message_type(54);
  static const int BioClient_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioClient, ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioClient, port_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioClient, mac_address_),
  };
  BioClient_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BioClient_descriptor_,
      BioClient::default_instance_,
      BioClient_offsets_,
      -1,
      -1,
      -1,
      sizeof(BioClient),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioClient, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BioClient, _is_default_instance_));
  ImageFormat_descriptor_ = file->enum_type(0);
  EntityState_descriptor_ = file->enum_type(1);
  Finger_descriptor_ = file->enum_type(2);
  EyeType_descriptor_ = file->enum_type(3);
  AccessState_descriptor_ = file->enum_type(4);
  Gender_descriptor_ = file->enum_type(5);
  Rights_descriptor_ = file->enum_type(6);
  MessageType_descriptor_ = file->enum_type(7);
  PhotoSizeType_descriptor_ = file->enum_type(8);
  PhotoOriginType_descriptor_ = file->enum_type(9);
  IsoComplianceTemplate_descriptor_ = file->enum_type(10);
  Ethnicity_descriptor_ = file->enum_type(11);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bio_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServiceException_descriptor_, &ServiceException::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PopulationCreationResponse_descriptor_, &PopulationCreationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AcquisitionResponse_descriptor_, &AcquisitionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawIndexes_descriptor_, &RawIndexes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Criminal_descriptor_, &Criminal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FullVisitorData_descriptor_, &FullVisitorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Person_descriptor_, &Person::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AccessDevice_descriptor_, &AccessDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CaptureDevice_descriptor_, &CaptureDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FingerprintDevice_descriptor_, &FingerprintDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IrisDevice_descriptor_, &IrisDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Card_descriptor_, &Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Location_descriptor_, &Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AccessInfo_descriptor_, &AccessInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogRecord_descriptor_, &LogRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfidentPosition_descriptor_, &ConfidentPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EyesCharacteristic_descriptor_, &EyesCharacteristic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PortraitCharacteristic_descriptor_, &PortraitCharacteristic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceCharacteristic_descriptor_, &FaceCharacteristic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SurroundingBox_descriptor_, &SurroundingBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetailedEyeCharacteristic_descriptor_, &DetailedEyeCharacteristic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FingerprintCharacteristic_descriptor_, &FingerprintCharacteristic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BioIdentificationRecord_descriptor_, &BioIdentificationRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BioFingerprintData_descriptor_, &BioFingerprintData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BioPersonData_descriptor_, &BioPersonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BiometricData_descriptor_, &BiometricData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FacialImage_descriptor_, &FacialImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DatabaseFacialImageResponse_descriptor_, &DatabaseFacialImageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FingerprintImage_descriptor_, &FingerprintImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DatabaseFingerprintImageResponse_descriptor_, &DatabaseFingerprintImageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Photo_descriptor_, &Photo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Visitor_descriptor_, &Visitor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VisitorList_descriptor_, &VisitorList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocationList_descriptor_, &LocationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PersonList_descriptor_, &PersonList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PhotoList_descriptor_, &PhotoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CardList_descriptor_, &CardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BiometricDataList_descriptor_, &BiometricDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VerificationData_descriptor_, &VerificationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IdentificationData_descriptor_, &IdentificationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Match_descriptor_, &Match::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Matches_descriptor_, &Matches::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceSearchResponse_descriptor_, &FaceSearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AcquiredData_descriptor_, &AcquiredData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FingerprintAcquiredData_descriptor_, &FingerprintAcquiredData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnrollmentFeedback_descriptor_, &EnrollmentFeedback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VerificationFeedback_descriptor_, &VerificationFeedback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryPhoto_descriptor_, &QueryPhoto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryPersons_descriptor_, &QueryPersons::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryLocations_descriptor_, &QueryLocations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryVisitors_descriptor_, &QueryVisitors::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SocketConfiguration_descriptor_, &SocketConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BioClient_descriptor_, &BioClient::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bio_5fservice_2eproto() {
  delete ServiceException::default_instance_;
  delete ServiceException_reflection_;
  delete PopulationCreationResponse::default_instance_;
  delete PopulationCreationResponse_reflection_;
  delete AcquisitionResponse::default_instance_;
  delete AcquisitionResponse_reflection_;
  delete RawIndexes::default_instance_;
  delete RawIndexes_reflection_;
  delete Criminal::default_instance_;
  delete Criminal_reflection_;
  delete FullVisitorData::default_instance_;
  delete FullVisitorData_reflection_;
  delete Person::default_instance_;
  delete Person_reflection_;
  delete AccessDevice::default_instance_;
  delete AccessDevice_reflection_;
  delete CaptureDevice::default_instance_;
  delete CaptureDevice_reflection_;
  delete FingerprintDevice::default_instance_;
  delete FingerprintDevice_reflection_;
  delete IrisDevice::default_instance_;
  delete IrisDevice_reflection_;
  delete Card::default_instance_;
  delete Card_reflection_;
  delete Location::default_instance_;
  delete Location_reflection_;
  delete AccessInfo::default_instance_;
  delete AccessInfo_reflection_;
  delete LogRecord::default_instance_;
  delete LogRecord_reflection_;
  delete ConfidentPosition::default_instance_;
  delete ConfidentPosition_reflection_;
  delete EyesCharacteristic::default_instance_;
  delete EyesCharacteristic_reflection_;
  delete PortraitCharacteristic::default_instance_;
  delete PortraitCharacteristic_reflection_;
  delete FaceCharacteristic::default_instance_;
  delete FaceCharacteristic_reflection_;
  delete Position::default_instance_;
  delete Position_reflection_;
  delete SurroundingBox::default_instance_;
  delete SurroundingBox_reflection_;
  delete DetailedEyeCharacteristic::default_instance_;
  delete DetailedEyeCharacteristic_reflection_;
  delete FingerprintCharacteristic::default_instance_;
  delete FingerprintCharacteristic_reflection_;
  delete BioIdentificationRecord::default_instance_;
  delete BioIdentificationRecord_reflection_;
  delete BioFingerprintData::default_instance_;
  delete BioFingerprintData_reflection_;
  delete BioPersonData::default_instance_;
  delete BioPersonData_reflection_;
  delete BiometricData::default_instance_;
  delete BiometricData_reflection_;
  delete FacialImage::default_instance_;
  delete FacialImage_reflection_;
  delete DatabaseFacialImageResponse::default_instance_;
  delete DatabaseFacialImageResponse_reflection_;
  delete FingerprintImage::default_instance_;
  delete FingerprintImage_reflection_;
  delete DatabaseFingerprintImageResponse::default_instance_;
  delete DatabaseFingerprintImageResponse_reflection_;
  delete Photo::default_instance_;
  delete Photo_reflection_;
  delete Visitor::default_instance_;
  delete Visitor_reflection_;
  delete VisitorList::default_instance_;
  delete VisitorList_reflection_;
  delete LocationList::default_instance_;
  delete LocationList_reflection_;
  delete PersonList::default_instance_;
  delete PersonList_reflection_;
  delete PhotoList::default_instance_;
  delete PhotoList_reflection_;
  delete CardList::default_instance_;
  delete CardList_reflection_;
  delete BiometricDataList::default_instance_;
  delete BiometricDataList_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete VerificationData::default_instance_;
  delete VerificationData_reflection_;
  delete IdentificationData::default_instance_;
  delete IdentificationData_reflection_;
  delete Match::default_instance_;
  delete Match_reflection_;
  delete Matches::default_instance_;
  delete Matches_reflection_;
  delete FaceSearchResponse::default_instance_;
  delete FaceSearchResponse_reflection_;
  delete AcquiredData::default_instance_;
  delete AcquiredData_reflection_;
  delete FingerprintAcquiredData::default_instance_;
  delete FingerprintAcquiredData_reflection_;
  delete EnrollmentFeedback::default_instance_;
  delete EnrollmentFeedback_reflection_;
  delete VerificationFeedback::default_instance_;
  delete VerificationFeedback_reflection_;
  delete QueryPhoto::default_instance_;
  delete QueryPhoto_reflection_;
  delete QueryPersons::default_instance_;
  delete QueryPersons_reflection_;
  delete QueryLocations::default_instance_;
  delete QueryLocations_reflection_;
  delete QueryVisitors::default_instance_;
  delete QueryVisitors_reflection_;
  delete SocketConfiguration::default_instance_;
  delete SocketConfiguration_reflection_;
  delete BioClient::default_instance_;
  delete BioClient_reflection_;
}

void protobuf_AddDesc_bio_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021bio_service.proto\022\nBioService\"D\n\020Servi"
    "ceException\022\r\n\005is_ok\030\001 \001(\010\022\020\n\010error_id\030\002"
    " \001(\003\022\017\n\007message\030\003 \001(\t\"\217\001\n\032PopulationCrea"
    "tionResponse\022\n\n\002id\030\001 \001(\003\0224\n\010portrait\030\002 \003"
    "(\0132\".BioService.PortraitCharacteristic\022/"
    "\n\texception\030\003 \001(\0132\034.BioService.ServiceEx"
    "ception\"|\n\023AcquisitionResponse\0224\n\010portra"
    "it\030\001 \001(\0132\".BioService.PortraitCharacteri"
    "stic\022/\n\texception\030\002 \001(\0132\034.BioService.Ser"
    "viceException\"\035\n\nRawIndexes\022\017\n\007indexes\030\001"
    " \003(\003\":\n\010Criminal\022\n\n\002id\030\001 \001(\003\022\023\n\013descript"
    "ion\030\002 \001(\t\022\r\n\005alert\030\003 \001(\t\"\221\001\n\017FullVisitor"
    "Data\022$\n\007visitor\030\001 \001(\0132\023.BioService.Visit"
    "or\022%\n\004face\030\002 \001(\0132\027.BioService.FacialImag"
    "e\0221\n\013fingerprint\030\003 \001(\0132\034.BioService.Fing"
    "erprintImage\"\270\004\n\006Person\022\n\n\002id\030\001 \001(\003\022\021\n\tf"
    "irstname\030\002 \001(\t\022\020\n\010lastname\030\003 \001(\t\022\023\n\013date"
    "ofbirth\030\004 \001(\003\022\"\n\006gender\030\005 \001(\0162\022.BioServi"
    "ce.Gender\022\017\n\007country\030\006 \001(\t\022\014\n\004city\030\007 \001(\t"
    "\022\020\n\010comments\030\010 \001(\t\022\"\n\006rights\030\t \001(\0162\022.Bio"
    "Service.Rights\022\r\n\005email\030\n \001(\t\022\023\n\013thumbna"
    "ilid\030\013 \001(\003\022&\n\010criminal\030\014 \001(\0132\024.BioServic"
    "e.Criminal\022;\n\014fingerprints\030\r \003(\0132%.BioSe"
    "rvice.FingerprintCharacteristic\022\037\n\005cards"
    "\030\016 \003(\0132\020.BioService.Card\022!\n\006photos\030\017 \003(\013"
    "2\021.BioService.Photo\0221\n\016biometric_data\030\020 "
    "\001(\0132\031.BioService.BiometricData\022-\n\014entity"
    "_state\030\021 \001(\0162\027.BioService.EntityState\022/\n"
    "\texception\030\022 \001(\0132\034.BioService.ServiceExc"
    "eption\022\017\n\007message\030\023 \001(\t\"\200\001\n\014AccessDevice"
    "\022\020\n\010portname\030\001 \001(\t\022/\n\texception\030\002 \001(\0132\034."
    "BioService.ServiceException\022-\n\014entity_st"
    "ate\030\003 \001(\0162\027.BioService.EntityState\"\203\001\n\rC"
    "aptureDevice\022\022\n\ndevicename\030\001 \001(\t\022/\n\texce"
    "ption\030\002 \001(\0132\034.BioService.ServiceExceptio"
    "n\022-\n\014entity_state\030\003 \001(\0162\027.BioService.Ent"
    "ityState\"\236\001\n\021FingerprintDevice\022\022\n\ndevice"
    "name\030\001 \001(\t\022\025\n\rserial_number\030\002 \001(\t\022/\n\texc"
    "eption\030\003 \001(\0132\034.BioService.ServiceExcepti"
    "on\022-\n\014entity_state\030\004 \001(\0162\027.BioService.En"
    "tityState\"\227\001\n\nIrisDevice\022\022\n\ndevicename\030\001"
    " \001(\t\022\025\n\rserial_number\030\002 \001(\t\022/\n\texception"
    "\030\003 \001(\0132\034.BioService.ServiceException\022-\n\014"
    "entity_state\030\004 \001(\0162\027.BioService.EntitySt"
    "ate\"\233\001\n\004Card\022\n\n\002id\030\001 \001(\003\022\020\n\010personid\030\002 \001"
    "(\003\022\025\n\runique_number\030\003 \001(\t\022-\n\014entity_stat"
    "e\030\004 \001(\0162\027.BioService.EntityState\022/\n\texce"
    "ption\030\005 \001(\0132\034.BioService.ServiceExceptio"
    "n\"\254\003\n\010Location\022\n\n\002id\030\001 \001(\003\022\025\n\rlocation_n"
    "ame\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\023\n\013mac_ad"
    "dress\030\004 \001(\t\0220\n\rcaptureDevice\030\005 \001(\0132\031.Bio"
    "Service.CaptureDevice\022.\n\014accessDevice\030\006 "
    "\001(\0132\030.BioService.AccessDevice\0228\n\021fingerp"
    "rintDevice\030\007 \001(\0132\035.BioService.Fingerprin"
    "tDevice\022*\n\nirisDevice\030\010 \001(\0132\026.BioService"
    ".IrisDevice\022+\n\013access_info\030\t \001(\0132\026.BioSe"
    "rvice.AccessInfo\022-\n\014entity_state\030\n \001(\0162\027"
    ".BioService.EntityState\022/\n\texception\030\013 \001"
    "(\0132\034.BioService.ServiceException\"\366\001\n\nAcc"
    "essInfo\0226\n\013access_type\030\001 \001(\0162!.BioServic"
    "e.AccessInfo.AccessType\022#\n\007persons\030\002 \003(\013"
    "2\022.BioService.Person\022-\n\014entity_state\030\003 \001"
    "(\0162\027.BioService.EntityState\022/\n\texception"
    "\030\004 \001(\0132\034.BioService.ServiceException\"+\n\n"
    "AccessType\022\010\n\004None\020\000\022\007\n\003All\020\001\022\n\n\006Custom\020"
    "\002\"\275\001\n\tLogRecord\022-\n\014message_type\030\001 \001(\0162\027."
    "BioService.MessageType\022\025\n\rdetected_time\030"
    "\002 \001(\003\022\031\n\021exception_message\030\003 \001(\t\022\022\n\nclas"
    "s_name\030\004 \001(\t\022\025\n\rfunction_name\030\005 \001(\t\022\023\n\013l"
    "ine_number\030\006 \001(\003\022\017\n\007comment\030\007 \001(\t\"\243\001\n\021Co"
    "nfidentPosition\022\014\n\004xpos\030\001 \001(\002\022\014\n\004ypos\030\002 "
    "\001(\002\022\022\n\nconfidence\030\003 \001(\002\022-\n\014entity_state\030"
    "\004 \001(\0162\027.BioService.EntityState\022/\n\texcept"
    "ion\030\005 \001(\0132\034.BioService.ServiceException\""
    "\363\001\n\022EyesCharacteristic\022\n\n\002id\030\001 \001(\003\0227\n\010le"
    "ft_eye\030\002 \001(\0132%.BioService.DetailedEyeCha"
    "racteristic\0228\n\tright_eye\030\003 \001(\0132%.BioServ"
    "ice.DetailedEyeCharacteristic\022-\n\014entity_"
    "state\030\004 \001(\0162\027.BioService.EntityState\022/\n\t"
    "exception\030\005 \001(\0132\034.BioService.ServiceExce"
    "ption\"G\n\026PortraitCharacteristic\022-\n\005faces"
    "\030\001 \003(\0132\036.BioService.FaceCharacteristic\"\260"
    "\005\n\022FaceCharacteristic\022\n\n\002id\030\001 \001(\003\022\'\n\003box"
    "\030\002 \001(\0132\032.BioService.SurroundingBox\022\024\n\014ey"
    "e_distance\030\003 \001(\002\022)\n\013face_center\030\004 \001(\0132\024."
    "BioService.Position\022\017\n\007glasses\030\005 \001(\002\022\032\n\022"
    "natural_skin_color\030\006 \001(\002\022\022\n\nhead_width\030\007"
    " \001(\002\022\023\n\013head_length\030\010 \001(\002\022\027\n\017pose_angle_"
    "roll\030\t \001(\002\022\014\n\004chin\030\n \001(\002\022\r\n\005crown\030\013 \001(\002\022"
    "\020\n\010left_ear\030\014 \001(\002\022\021\n\trigth_ear\030\r \001(\002\022\022\n\n"
    "confidence\030\016 \001(\002\022\024\n\014mouth_closed\030\017 \001(\002\022)"
    "\n\nethnithity\030\020 \001(\0162\025.BioService.Ethnicit"
    "y\022\013\n\003age\030\021 \001(\017\022\"\n\006gender\030\022 \001(\0162\022.BioServ"
    "ice.Gender\022,\n\004eyes\030\023 \001(\0132\036.BioService.Ey"
    "esCharacteristic\022\026\n\016compliance_iso\030\024 \001(\005"
    "\022\014\n\004good\030\025 \001(\010\022\026\n\016best_practices\030\026 \001(\010\022\020"
    "\n\010personid\030\027 \001(\003\022\017\n\007photoid\030\030 \001(\003\022-\n\014ent"
    "ity_state\030\031 \001(\0162\027.BioService.EntityState"
    "\022/\n\texception\030\032 \001(\0132\034.BioService.Service"
    "Exception\" \n\010Position\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 "
    "\001(\002\"X\n\016SurroundingBox\022#\n\005begin\030\001 \001(\0132\024.B"
    "ioService.Position\022!\n\003end\030\002 \001(\0132\024.BioSer"
    "vice.Position\"\243\001\n\031DetailedEyeCharacteris"
    "tic\022&\n\010position\030\001 \001(\0132\024.BioService.Posit"
    "ion\022\017\n\007is_open\030\002 \001(\010\022\027\n\017is_gaze_frontal\030"
    "\003 \001(\002\022\016\n\006is_red\030\004 \001(\010\022\020\n\010is_tined\030\005 \001(\010\022"
    "\022\n\nconfidence\030\006 \001(\002\"\226\002\n\031FingerprintChara"
    "cteristic\022\n\n\002id\030\001 \001(\003\022$\n\010position\030\002 \001(\0162"
    "\022.BioService.Finger\022\027\n\017minutiaes_count\030\003"
    " \001(\017\022\020\n\010personid\030\004 \001(\003\022\017\n\007photoid\030\005 \001(\003\022"
    "+\n\006origin\030\006 \001(\0162\033.BioService.PhotoOrigin"
    "Type\022-\n\014entity_state\030\007 \001(\0162\027.BioService."
    "EntityState\022/\n\texception\030\010 \001(\0132\034.BioServ"
    "ice.ServiceException\"B\n\027BioIdentificatio"
    "nRecord\022\017\n\007bir_url\030\001 \001(\t\022\026\n\016bir_bytestri"
    "ng\030\002 \001(\014\"\223\001\n\022BioFingerprintData\022>\n\017chara"
    "cteristics\030\001 \001(\0132%.BioService.Fingerprin"
    "tCharacteristic\022=\n\020biometric_record\030\002 \001("
    "\0132#.BioService.BioIdentificationRecord\"\221"
    "\001\n\rBioPersonData\022\021\n\tperson_id\030\001 \001(\003\0222\n\005f"
    "aces\030\002 \003(\0132#.BioService.BioIdentificatio"
    "nRecord\0229\n\014fingerprints\030\003 \003(\0132#.BioServi"
    "ce.BioIdentificationRecord\"\207\001\n\rBiometric"
    "Data\022\n\n\002id\030\001 \001(\003\022-\n\005faces\030\002 \003(\0132\036.BioSer"
    "vice.FaceCharacteristic\022;\n\014fingerprints\030"
    "\003 \003(\0132%.BioService.FingerprintCharacteri"
    "stic\"\342\001\n\013FacialImage\022\020\n\010owner_id\030\001 \001(\003\022 "
    "\n\005image\030\002 \001(\0132\021.BioService.Photo\022\020\n\010temp"
    "late\030\003 \001(\014\022-\n\005faces\030\004 \003(\0132\036.BioService.F"
    "aceCharacteristic\022-\n\014entity_state\030\005 \001(\0162"
    "\027.BioService.EntityState\022/\n\texception\030\006 "
    "\001(\0132\034.BioService.ServiceException\"\316\001\n\033Da"
    "tabaseFacialImageResponse\022-\n\005faces\030\001 \003(\013"
    "2\036.BioService.FaceCharacteristic\022 \n\005imag"
    "e\030\002 \001(\0132\021.BioService.Photo\022-\n\014entity_sta"
    "te\030\003 \001(\0162\027.BioService.EntityState\022/\n\texc"
    "eption\030\004 \001(\0132\034.BioService.ServiceExcepti"
    "on\"\364\001\n\020FingerprintImage\022\020\n\010owner_id\030\001 \001("
    "\003\022 \n\005image\030\002 \001(\0132\021.BioService.Photo\022\020\n\010t"
    "emplate\030\003 \001(\014\022:\n\013fingerprint\030\004 \001(\0132%.Bio"
    "Service.FingerprintCharacteristic\022-\n\014ent"
    "ity_state\030\005 \001(\0162\027.BioService.EntityState"
    "\022/\n\texception\030\006 \001(\0132\034.BioService.Service"
    "Exception\"\340\001\n DatabaseFingerprintImageRe"
    "sponse\022:\n\013fingerprint\030\001 \001(\0132%.BioService"
    ".FingerprintCharacteristic\022 \n\005image\030\002 \001("
    "\0132\021.BioService.Photo\022-\n\014entity_state\030\003 \001"
    "(\0162\027.BioService.EntityState\022/\n\texception"
    "\030\004 \001(\0132\034.BioService.ServiceException\"\217\002\n"
    "\005Photo\022\n\n\002id\030\001 \001(\003\022\020\n\010datetime\030\003 \001(\003\022\021\n\t"
    "photo_url\030\004 \001(\t\022\022\n\nbytestring\030\005 \001(\014\022\r\n\005w"
    "idth\030\006 \001(\003\022\016\n\006height\030\007 \001(\003\0220\n\013origin_typ"
    "e\030\010 \001(\0162\033.BioService.PhotoOriginType\022\020\n\010"
    "owner_id\030\t \001(\003\022-\n\014entity_state\030\n \001(\0162\027.B"
    "ioService.EntityState\022/\n\texception\030\013 \001(\013"
    "2\034.BioService.ServiceException\"\231\002\n\007Visit"
    "or\022\n\n\002id\030\001 \001(\003\022\020\n\010personid\030\002 \001(\003\022\022\n\nloca"
    "tionid\030\003 \001(\003\022\014\n\004time\030\004 \001(\003\022\023\n\013card_numbe"
    "r\030\005 \001(\t\022\'\n\006status\030\006 \001(\0162\027.BioService.Acc"
    "essState\0220\n\rbiometricData\030\007 \001(\0132\031.BioSer"
    "vice.BiometricData\022-\n\014entity_state\030\010 \001(\016"
    "2\027.BioService.EntityState\022/\n\texception\030\t"
    " \001(\0132\034.BioService.ServiceException\"4\n\013Vi"
    "sitorList\022%\n\010visitors\030\001 \003(\0132\023.BioService"
    ".Visitor\"7\n\014LocationList\022\'\n\tlocations\030\001 "
    "\003(\0132\024.BioService.Location\"1\n\nPersonList\022"
    "#\n\007persons\030\001 \003(\0132\022.BioService.Person\".\n\t"
    "PhotoList\022!\n\006photos\030\001 \003(\0132\021.BioService.P"
    "hoto\"+\n\010CardList\022\037\n\005cards\030\001 \003(\0132\020.BioSer"
    "vice.Card\"<\n\021BiometricDataList\022\'\n\004data\030\001"
    " \003(\0132\031.BioService.BiometricData\"\030\n\010Respo"
    "nse\022\014\n\004good\030\001 \001(\010\"h\n\020VerificationData\022\'\n"
    "\014target_image\030\001 \001(\0132\021.BioService.Photo\022+"
    "\n\020comparison_image\030\002 \001(\0132\021.BioService.Ph"
    "oto\"\202\001\n\022IdentificationData\022\'\n\014target_ima"
    "ge\030\001 \001(\0132\021.BioService.Photo\022\025\n\rpopulatio"
    "n_id\030\002 \001(\003\022,\n\021comparison_images\030\003 \003(\0132\021."
    "BioService.Photo\"\'\n\005Match\022\017\n\007face_id\030\002 \001"
    "(\003\022\r\n\005match\030\003 \001(\002\">\n\007Matches\022\017\n\007face_id\030"
    "\001 \001(\003\022\"\n\007matches\030\002 \003(\0132\021.BioService.Matc"
    "h\"\263\001\n\022FaceSearchResponse\0225\n\tportraits\030\001 "
    "\003(\0132\".BioService.PortraitCharacteristic\022"
    "$\n\007matches\030\002 \003(\0132\023.BioService.Matches\022\017\n"
    "\007message\030\003 \001(\t\022/\n\texception\030\004 \001(\0132\034.BioS"
    "ervice.ServiceException\"B\n\014AcquiredData\022"
    " \n\005image\030\001 \001(\0132\021.BioService.Photo\022\020\n\010own"
    "er_id\030\002 \001(\003\"g\n\027FingerprintAcquiredData\022&"
    "\n\004data\030\001 \001(\0132\030.BioService.AcquiredData\022$"
    "\n\010position\030\002 \001(\0162\022.BioService.Finger\"\246\001\n"
    "\022EnrollmentFeedback\022\031\n\021characteristic_id"
    "\030\001 \001(\003\022\020\n\010photo_id\030\002 \001(\003\022\017\n\007quality\030\003 \001("
    "\017\022/\n\tException\030\004 \001(\0132\034.BioService.Servic"
    "eException\022\020\n\010progress\030\005 \001(\017\022\017\n\007message\030"
    "\006 \001(\t\"b\n\024VerificationFeedback\022;\n\023enrollm"
    "ent_feedback\030\001 \001(\0132\036.BioService.Enrollme"
    "ntFeedback\022\r\n\005match\030\002 \001(\002\"\315\001\n\nQueryPhoto"
    "\022<\n\nwith_bytes\030\001 \001(\0162(.BioService.QueryP"
    "hoto.PhotoResponseType\022\017\n\007persons\030\002 \003(\003\022"
    "\016\n\006photos\030\003 \003(\003\022\026\n\016items_per_page\030\004 \001(\003\""
    "H\n\021PhotoResponseType\022\r\n\tUndefined\020\000\022\010\n\004F"
    "ull\020\001\022\r\n\tOnlyBytes\020\002\022\013\n\007NoBytes\020\003\"\035\n\014Que"
    "ryPersons\022\r\n\005count\030\001 \001(\003\"\037\n\016QueryLocatio"
    "ns\022\r\n\005count\030\001 \001(\003\"\212\001\n\rQueryVisitors\022\021\n\tc"
    "ountries\030\002 \003(\t\022\021\n\tlocations\030\003 \003(\003\022\017\n\007per"
    "sons\030\004 \003(\003\022\025\n\rdatetime_from\030\005 \001(\003\022\023\n\013dat"
    "etime_to\030\006 \001(\003\022\026\n\016items_per_page\030\007 \001(\003\"&"
    "\n\023SocketConfiguration\022\017\n\007address\030\001 \001(\t\"I"
    "\n\tBioClient\022\022\n\nip_address\030\001 \001(\t\022\023\n\013port_"
    "number\030\002 \001(\003\022\023\n\013mac_address\030\003 \001(\t*T\n\013Ima"
    "geFormat\022\010\n\004JPEG\020\000\022\014\n\010JPEG2000\020\001\022\007\n\003PNG\020"
    "\002\022\007\n\003BMP\020\003\022\007\n\003PGM\020\004\022\022\n\016GRAYSCALE_8BIT\020\005*"
    "B\n\013EntityState\022\r\n\tUnchanged\020\000\022\t\n\005Added\020\001"
    "\022\014\n\010Modified\020\002\022\013\n\007Deleted\020\003*\256\001\n\006Finger\022\007"
    "\n\003Any\020\000\022\016\n\nRightThumb\020\001\022\r\n\tLeftThumb\020\002\022\016"
    "\n\nRightIndex\020\003\022\r\n\tLeftIndex\020\004\022\017\n\013RightMi"
    "ddle\020\005\022\016\n\nLeftMiddle\020\006\022\r\n\tRightRing\020\007\022\014\n"
    "\010LeftRing\020\010\022\017\n\013RightLittle\020\t\022\016\n\nLeftLitt"
    "le\020\n*5\n\007EyeType\022\013\n\007NoneEye\020\000\022\010\n\004Left\020\001\022\t"
    "\n\005Right\020\002\022\010\n\004Both\020\003*2\n\013AccessState\022\r\n\tNo"
    "neState\020\000\022\n\n\006Access\020\001\022\010\n\004Deny\020\002*(\n\006Gende"
    "r\022\010\n\004None\020\000\022\010\n\004Male\020\001\022\n\n\006Female\020\002*\?\n\006Rig"
    "hts\022\n\n\006Custom\020\000\022\014\n\010Operator\020\001\022\013\n\007Manager"
    "\020\002\022\016\n\nSupervisor\020\003*6\n\013MessageType\022\017\n\013Inf"
    "ormation\020\000\022\t\n\005Error\020\001\022\013\n\007Warning\020\002*%\n\rPh"
    "otoSizeType\022\010\n\004Full\020\000\022\n\n\006Croped\020\001*<\n\017Pho"
    "toOriginType\022\014\n\010Enrolled\020\000\022\014\n\010Verified\020\001"
    "\022\r\n\tThumbnail\020\002*\370\004\n\025IsoComplianceTemplat"
    "e\022\013\n\007Npthing\020\000\022\026\n\022OnlyOneFaceVisible\020\001\022\034"
    "\n\030goodVerticalFacePosition\020\002\022\034\n\030horizont"
    "allyCenteredFace\020\003\022\017\n\013widthOfHead\020\004\022\020\n\014l"
    "engthOfHead\020\005\022\033\n\027widthOfHeadBestPractice"
    "\020\006\022\034\n\030lengthOfHeadBestPractice\020\007\022\016\n\nreso"
    "lution\020\010\022\032\n\026resolutionBestPractice\020\t\022\"\n\036"
    "imageWidthToHeightBestPractice\020\n\022\020\n\014good"
    "Exposure\020\013\022\030\n\024goodGrayScaleProfile\020\014\022\030\n\024"
    "hasNaturalSkinColour\020\r\022\016\n\nnoHotSpots\020\016\022#"
    "\n\037isBackgroundUniformBestPractice\020\017\022\r\n\ti"
    "sFrontal\020\020\022\031\n\025isFrontalBestPractice\020\021\022\025\n"
    "\021isLightingUniform\020\022\022\030\n\024eyesOpenBestPrac"
    "tice\020\023\022\037\n\033eyesGazeFrontalBestPractice\020\024\022"
    "\032\n\026eyesNotRedBestPractice\020\025\022\023\n\017noTintedG"
    "lasses\020\026\022\013\n\007isSharp\020\027\022\033\n\027mouthClosedBest"
    "Practice\020\030*\?\n\tEthnicity\022\021\n\rUnpredictable"
    "\020\000\022\t\n\005White\020\001\022\t\n\005Black\020\002\022\t\n\005Asian\020\0032\241\004\n\025"
    "BiometricFacialSevice\022D\n\tAddSocket\022\037.Bio"
    "Service.SocketConfiguration\032\024.BioService"
    ".Response\"\000\022\?\n\007Acquire\022\021.BioService.Phot"
    "o\032\037.BioService.AcquisitionResponse\"\000\022D\n\006"
    "Enroll\022\030.BioService.AcquiredData\032\036.BioSe"
    "rvice.EnrollmentFeedback\"\000\022F\n\006Verify\022\030.B"
    "ioService.AcquiredData\032 .BioService.Veri"
    "ficationFeedback\"\000\022S\n\020CreatePopulation\022\025"
    ".BioService.PhotoList\032&.BioService.Popul"
    "ationCreationResponse\"\000\022L\n\nVerifyFace\022\034."
    "BioService.VerificationData\032\036.BioService"
    ".FaceSearchResponse\"\000\022P\n\014IdentifyFace\022\036."
    "BioService.IdentificationData\032\036.BioServi"
    "ce.FaceSearchResponse\"\0002\313\001\n\032BiometricFin"
    "gerprintSevice\022Z\n\021EnrollFingerprint\022#.Bi"
    "oService.FingerprintAcquiredData\032\036.BioSe"
    "rvice.EnrollmentFeedback\"\000\022Q\n\021VerifyFing"
    "erprint\022\030.BioService.AcquiredData\032 .BioS"
    "ervice.VerificationFeedback\"\0002\325\001\n\030Biomet"
    "ricDatabaseService\022T\n\016AddFacialImage\022\027.B"
    "ioService.FacialImage\032\'.BioService.Datab"
    "aseFacialImageResponse\"\000\022c\n\023AddFingerpri"
    "ntImage\022\034.BioService.FingerprintImage\032,."
    "BioService.DatabaseFingerprintImageRespo"
    "nse\"\0002\240\014\n\016DatabaseSevice\022B\n\014PersonSelect"
    "\022\030.BioService.QueryPersons\032\026.BioService."
    "PersonList\"\000\0225\n\tAddPerson\022\022.BioService.P"
    "erson\032\022.BioService.Person\"\000\0228\n\014UpdatePer"
    "son\022\022.BioService.Person\032\022.BioService.Per"
    "son\"\000\0228\n\014RemovePerson\022\022.BioService.Perso"
    "n\032\022.BioService.Person\"\000\0229\n\014SetThumbnail\022"
    "\021.BioService.Photo\032\024.BioService.Response"
    "\"\000\022/\n\007AddCard\022\020.BioService.Card\032\020.BioSer"
    "vice.Card\"\000\022;\n\013RemoveCards\022\024.BioService."
    "CardList\032\024.BioService.CardList\"\000\0222\n\nRemo"
    "veCard\022\020.BioService.Card\032\020.BioService.Ca"
    "rd\"\000\022\?\n\014SelectPhotos\022\026.BioService.QueryP"
    "hoto\032\025.BioService.PhotoList\"\000\0222\n\010AddPhot"
    "o\022\021.BioService.Photo\032\021.BioService.Photo\""
    "\000\022@\n\014RemovePhotos\022\026.BioService.RawIndexe"
    "s\032\026.BioService.RawIndexes\"\000\022F\n\016SelectVis"
    "itors\022\031.BioService.QueryVisitors\032\027.BioSe"
    "rvice.VisitorList\"\000\022D\n\025AttachVisitorToPe"
    "rson\022\023.BioService.Visitor\032\024.BioService.R"
    "esponse\"\000\022B\n\016RemoveVisitors\022\026.BioService"
    ".RawIndexes\032\026.BioService.RawIndexes\"\000\022@\n"
    "\nAddVisitor\022\033.BioService.FullVisitorData"
    "\032\023.BioService.Visitor\"\000\022I\n\017SelectLocatio"
    "ns\022\032.BioService.QueryLocations\032\030.BioServ"
    "ice.LocationList\"\000\022;\n\013AddLocation\022\024.BioS"
    "ervice.Location\032\024.BioService.Location\"\000\022"
    ">\n\016UpdateLocation\022\024.BioService.Location\032"
    "\024.BioService.Location\"\000\022>\n\016RemoveLocatio"
    "n\022\024.BioService.Location\032\024.BioService.Loc"
    "ation\"\000\022N\n\016AddFingerprint\022\034.BioService.F"
    "ingerprintImage\032\034.BioService.Fingerprint"
    "Image\"\000\022Q\n\021RemoveFingerprint\022\034.BioServic"
    "e.FingerprintImage\032\034.BioService.Fingerpr"
    "intImage\"\000\022Q\n\021UpdateFingerprint\022\034.BioSer"
    "vice.FingerprintImage\032\034.BioService.Finge"
    "rprintImage\"\000\022:\n\tAddClient\022\025.BioService."
    "BioClient\032\024.BioService.Response\"\000\022=\n\014Rem"
    "oveClient\022\025.BioService.BioClient\032\024.BioSe"
    "rvice.Response\"\000B\017\n\007ex.grpc\242\002\003RTGb\006proto"
    "3", 12321);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bio_service.proto", &protobuf_RegisterTypes);
  ServiceException::default_instance_ = new ServiceException();
  PopulationCreationResponse::default_instance_ = new PopulationCreationResponse();
  AcquisitionResponse::default_instance_ = new AcquisitionResponse();
  RawIndexes::default_instance_ = new RawIndexes();
  Criminal::default_instance_ = new Criminal();
  FullVisitorData::default_instance_ = new FullVisitorData();
  Person::default_instance_ = new Person();
  AccessDevice::default_instance_ = new AccessDevice();
  CaptureDevice::default_instance_ = new CaptureDevice();
  FingerprintDevice::default_instance_ = new FingerprintDevice();
  IrisDevice::default_instance_ = new IrisDevice();
  Card::default_instance_ = new Card();
  Location::default_instance_ = new Location();
  AccessInfo::default_instance_ = new AccessInfo();
  LogRecord::default_instance_ = new LogRecord();
  ConfidentPosition::default_instance_ = new ConfidentPosition();
  EyesCharacteristic::default_instance_ = new EyesCharacteristic();
  PortraitCharacteristic::default_instance_ = new PortraitCharacteristic();
  FaceCharacteristic::default_instance_ = new FaceCharacteristic();
  Position::default_instance_ = new Position();
  SurroundingBox::default_instance_ = new SurroundingBox();
  DetailedEyeCharacteristic::default_instance_ = new DetailedEyeCharacteristic();
  FingerprintCharacteristic::default_instance_ = new FingerprintCharacteristic();
  BioIdentificationRecord::default_instance_ = new BioIdentificationRecord();
  BioFingerprintData::default_instance_ = new BioFingerprintData();
  BioPersonData::default_instance_ = new BioPersonData();
  BiometricData::default_instance_ = new BiometricData();
  FacialImage::default_instance_ = new FacialImage();
  DatabaseFacialImageResponse::default_instance_ = new DatabaseFacialImageResponse();
  FingerprintImage::default_instance_ = new FingerprintImage();
  DatabaseFingerprintImageResponse::default_instance_ = new DatabaseFingerprintImageResponse();
  Photo::default_instance_ = new Photo();
  Visitor::default_instance_ = new Visitor();
  VisitorList::default_instance_ = new VisitorList();
  LocationList::default_instance_ = new LocationList();
  PersonList::default_instance_ = new PersonList();
  PhotoList::default_instance_ = new PhotoList();
  CardList::default_instance_ = new CardList();
  BiometricDataList::default_instance_ = new BiometricDataList();
  Response::default_instance_ = new Response();
  VerificationData::default_instance_ = new VerificationData();
  IdentificationData::default_instance_ = new IdentificationData();
  Match::default_instance_ = new Match();
  Matches::default_instance_ = new Matches();
  FaceSearchResponse::default_instance_ = new FaceSearchResponse();
  AcquiredData::default_instance_ = new AcquiredData();
  FingerprintAcquiredData::default_instance_ = new FingerprintAcquiredData();
  EnrollmentFeedback::default_instance_ = new EnrollmentFeedback();
  VerificationFeedback::default_instance_ = new VerificationFeedback();
  QueryPhoto::default_instance_ = new QueryPhoto();
  QueryPersons::default_instance_ = new QueryPersons();
  QueryLocations::default_instance_ = new QueryLocations();
  QueryVisitors::default_instance_ = new QueryVisitors();
  SocketConfiguration::default_instance_ = new SocketConfiguration();
  BioClient::default_instance_ = new BioClient();
  ServiceException::default_instance_->InitAsDefaultInstance();
  PopulationCreationResponse::default_instance_->InitAsDefaultInstance();
  AcquisitionResponse::default_instance_->InitAsDefaultInstance();
  RawIndexes::default_instance_->InitAsDefaultInstance();
  Criminal::default_instance_->InitAsDefaultInstance();
  FullVisitorData::default_instance_->InitAsDefaultInstance();
  Person::default_instance_->InitAsDefaultInstance();
  AccessDevice::default_instance_->InitAsDefaultInstance();
  CaptureDevice::default_instance_->InitAsDefaultInstance();
  FingerprintDevice::default_instance_->InitAsDefaultInstance();
  IrisDevice::default_instance_->InitAsDefaultInstance();
  Card::default_instance_->InitAsDefaultInstance();
  Location::default_instance_->InitAsDefaultInstance();
  AccessInfo::default_instance_->InitAsDefaultInstance();
  LogRecord::default_instance_->InitAsDefaultInstance();
  ConfidentPosition::default_instance_->InitAsDefaultInstance();
  EyesCharacteristic::default_instance_->InitAsDefaultInstance();
  PortraitCharacteristic::default_instance_->InitAsDefaultInstance();
  FaceCharacteristic::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  SurroundingBox::default_instance_->InitAsDefaultInstance();
  DetailedEyeCharacteristic::default_instance_->InitAsDefaultInstance();
  FingerprintCharacteristic::default_instance_->InitAsDefaultInstance();
  BioIdentificationRecord::default_instance_->InitAsDefaultInstance();
  BioFingerprintData::default_instance_->InitAsDefaultInstance();
  BioPersonData::default_instance_->InitAsDefaultInstance();
  BiometricData::default_instance_->InitAsDefaultInstance();
  FacialImage::default_instance_->InitAsDefaultInstance();
  DatabaseFacialImageResponse::default_instance_->InitAsDefaultInstance();
  FingerprintImage::default_instance_->InitAsDefaultInstance();
  DatabaseFingerprintImageResponse::default_instance_->InitAsDefaultInstance();
  Photo::default_instance_->InitAsDefaultInstance();
  Visitor::default_instance_->InitAsDefaultInstance();
  VisitorList::default_instance_->InitAsDefaultInstance();
  LocationList::default_instance_->InitAsDefaultInstance();
  PersonList::default_instance_->InitAsDefaultInstance();
  PhotoList::default_instance_->InitAsDefaultInstance();
  CardList::default_instance_->InitAsDefaultInstance();
  BiometricDataList::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  VerificationData::default_instance_->InitAsDefaultInstance();
  IdentificationData::default_instance_->InitAsDefaultInstance();
  Match::default_instance_->InitAsDefaultInstance();
  Matches::default_instance_->InitAsDefaultInstance();
  FaceSearchResponse::default_instance_->InitAsDefaultInstance();
  AcquiredData::default_instance_->InitAsDefaultInstance();
  FingerprintAcquiredData::default_instance_->InitAsDefaultInstance();
  EnrollmentFeedback::default_instance_->InitAsDefaultInstance();
  VerificationFeedback::default_instance_->InitAsDefaultInstance();
  QueryPhoto::default_instance_->InitAsDefaultInstance();
  QueryPersons::default_instance_->InitAsDefaultInstance();
  QueryLocations::default_instance_->InitAsDefaultInstance();
  QueryVisitors::default_instance_->InitAsDefaultInstance();
  SocketConfiguration::default_instance_->InitAsDefaultInstance();
  BioClient::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bio_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bio_5fservice_2eproto {
  StaticDescriptorInitializer_bio_5fservice_2eproto() {
    protobuf_AddDesc_bio_5fservice_2eproto();
  }
} static_descriptor_initializer_bio_5fservice_2eproto_;
const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageFormat_descriptor_;
}
bool ImageFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntityState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityState_descriptor_;
}
bool EntityState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Finger_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Finger_descriptor_;
}
bool Finger_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EyeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EyeType_descriptor_;
}
bool EyeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AccessState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessState_descriptor_;
}
bool AccessState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gender_descriptor_;
}
bool Gender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Rights_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rights_descriptor_;
}
bool Rights_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PhotoSizeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoSizeType_descriptor_;
}
bool PhotoSizeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PhotoOriginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoOriginType_descriptor_;
}
bool PhotoOriginType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IsoComplianceTemplate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsoComplianceTemplate_descriptor_;
}
bool IsoComplianceTemplate_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Ethnicity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ethnicity_descriptor_;
}
bool Ethnicity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceException::kIsOkFieldNumber;
const int ServiceException::kErrorIdFieldNumber;
const int ServiceException::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceException::ServiceException()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.ServiceException)
}

void ServiceException::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ServiceException::ServiceException(const ServiceException& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.ServiceException)
}

void ServiceException::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_ok_ = false;
  error_id_ = GOOGLE_LONGLONG(0);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ServiceException::~ServiceException() {
  // @@protoc_insertion_point(destructor:BioService.ServiceException)
  SharedDtor();
}

void ServiceException::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServiceException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceException::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceException_descriptor_;
}

const ServiceException& ServiceException::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

ServiceException* ServiceException::default_instance_ = NULL;

ServiceException* ServiceException::New(::google::protobuf::Arena* arena) const {
  ServiceException* n = new ServiceException;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceException::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.ServiceException)
  is_ok_ = false;
  error_id_ = GOOGLE_LONGLONG(0);
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServiceException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.ServiceException)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_ok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_id;
        break;
      }

      // optional int64 error_id = 2;
      case 2: {
        if (tag == 16) {
         parse_error_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.ServiceException.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.ServiceException)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.ServiceException)
  return false;
#undef DO_
}

void ServiceException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.ServiceException)
  // optional bool is_ok = 1;
  if (this->is_ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_ok(), output);
  }

  // optional int64 error_id = 2;
  if (this->error_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->error_id(), output);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.ServiceException.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.ServiceException)
}

::google::protobuf::uint8* ServiceException::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.ServiceException)
  // optional bool is_ok = 1;
  if (this->is_ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_ok(), target);
  }

  // optional int64 error_id = 2;
  if (this->error_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->error_id(), target);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.ServiceException.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.ServiceException)
  return target;
}

int ServiceException::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.ServiceException)
  int total_size = 0;

  // optional bool is_ok = 1;
  if (this->is_ok() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 error_id = 2;
  if (this->error_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->error_id());
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceException::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.ServiceException)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServiceException* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceException>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.ServiceException)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.ServiceException)
    MergeFrom(*source);
  }
}

void ServiceException::MergeFrom(const ServiceException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.ServiceException)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.is_ok() != 0) {
    set_is_ok(from.is_ok());
  }
  if (from.error_id() != 0) {
    set_error_id(from.error_id());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void ServiceException::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.ServiceException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceException::CopyFrom(const ServiceException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.ServiceException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceException::IsInitialized() const {

  return true;
}

void ServiceException::Swap(ServiceException* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceException::InternalSwap(ServiceException* other) {
  std::swap(is_ok_, other->is_ok_);
  std::swap(error_id_, other->error_id_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceException::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceException_descriptor_;
  metadata.reflection = ServiceException_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceException

// optional bool is_ok = 1;
void ServiceException::clear_is_ok() {
  is_ok_ = false;
}
 bool ServiceException::is_ok() const {
  // @@protoc_insertion_point(field_get:BioService.ServiceException.is_ok)
  return is_ok_;
}
 void ServiceException::set_is_ok(bool value) {
  
  is_ok_ = value;
  // @@protoc_insertion_point(field_set:BioService.ServiceException.is_ok)
}

// optional int64 error_id = 2;
void ServiceException::clear_error_id() {
  error_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ServiceException::error_id() const {
  // @@protoc_insertion_point(field_get:BioService.ServiceException.error_id)
  return error_id_;
}
 void ServiceException::set_error_id(::google::protobuf::int64 value) {
  
  error_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.ServiceException.error_id)
}

// optional string message = 3;
void ServiceException::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ServiceException::message() const {
  // @@protoc_insertion_point(field_get:BioService.ServiceException.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServiceException::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.ServiceException.message)
}
 void ServiceException::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.ServiceException.message)
}
 void ServiceException::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.ServiceException.message)
}
 ::std::string* ServiceException::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.ServiceException.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServiceException::release_message() {
  // @@protoc_insertion_point(field_release:BioService.ServiceException.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServiceException::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BioService.ServiceException.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PopulationCreationResponse::kIdFieldNumber;
const int PopulationCreationResponse::kPortraitFieldNumber;
const int PopulationCreationResponse::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PopulationCreationResponse::PopulationCreationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.PopulationCreationResponse)
}

void PopulationCreationResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

PopulationCreationResponse::PopulationCreationResponse(const PopulationCreationResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.PopulationCreationResponse)
}

void PopulationCreationResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  exception_ = NULL;
}

PopulationCreationResponse::~PopulationCreationResponse() {
  // @@protoc_insertion_point(destructor:BioService.PopulationCreationResponse)
  SharedDtor();
}

void PopulationCreationResponse::SharedDtor() {
  if (this != default_instance_) {
    delete exception_;
  }
}

void PopulationCreationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PopulationCreationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PopulationCreationResponse_descriptor_;
}

const PopulationCreationResponse& PopulationCreationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

PopulationCreationResponse* PopulationCreationResponse::default_instance_ = NULL;

PopulationCreationResponse* PopulationCreationResponse::New(::google::protobuf::Arena* arena) const {
  PopulationCreationResponse* n = new PopulationCreationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PopulationCreationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.PopulationCreationResponse)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
  portrait_.Clear();
}

bool PopulationCreationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.PopulationCreationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_portrait;
        break;
      }

      // repeated .BioService.PortraitCharacteristic portrait = 2;
      case 2: {
        if (tag == 18) {
         parse_portrait:
          DO_(input->IncrementRecursionDepth());
         parse_loop_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_portrait;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 3;
      case 3: {
        if (tag == 26) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.PopulationCreationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.PopulationCreationResponse)
  return false;
#undef DO_
}

void PopulationCreationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.PopulationCreationResponse)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated .BioService.PortraitCharacteristic portrait = 2;
  for (unsigned int i = 0, n = this->portrait_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->portrait(i), output);
  }

  // optional .BioService.ServiceException exception = 3;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.PopulationCreationResponse)
}

::google::protobuf::uint8* PopulationCreationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.PopulationCreationResponse)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated .BioService.PortraitCharacteristic portrait = 2;
  for (unsigned int i = 0, n = this->portrait_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->portrait(i), target);
  }

  // optional .BioService.ServiceException exception = 3;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.PopulationCreationResponse)
  return target;
}

int PopulationCreationResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.PopulationCreationResponse)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .BioService.ServiceException exception = 3;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // repeated .BioService.PortraitCharacteristic portrait = 2;
  total_size += 1 * this->portrait_size();
  for (int i = 0; i < this->portrait_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->portrait(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PopulationCreationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.PopulationCreationResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PopulationCreationResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PopulationCreationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.PopulationCreationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.PopulationCreationResponse)
    MergeFrom(*source);
  }
}

void PopulationCreationResponse::MergeFrom(const PopulationCreationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.PopulationCreationResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  portrait_.MergeFrom(from.portrait_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void PopulationCreationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.PopulationCreationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopulationCreationResponse::CopyFrom(const PopulationCreationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.PopulationCreationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopulationCreationResponse::IsInitialized() const {

  return true;
}

void PopulationCreationResponse::Swap(PopulationCreationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PopulationCreationResponse::InternalSwap(PopulationCreationResponse* other) {
  std::swap(id_, other->id_);
  portrait_.UnsafeArenaSwap(&other->portrait_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PopulationCreationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PopulationCreationResponse_descriptor_;
  metadata.reflection = PopulationCreationResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PopulationCreationResponse

// optional int64 id = 1;
void PopulationCreationResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PopulationCreationResponse::id() const {
  // @@protoc_insertion_point(field_get:BioService.PopulationCreationResponse.id)
  return id_;
}
 void PopulationCreationResponse::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.PopulationCreationResponse.id)
}

// repeated .BioService.PortraitCharacteristic portrait = 2;
int PopulationCreationResponse::portrait_size() const {
  return portrait_.size();
}
void PopulationCreationResponse::clear_portrait() {
  portrait_.Clear();
}
const ::BioService::PortraitCharacteristic& PopulationCreationResponse::portrait(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PopulationCreationResponse.portrait)
  return portrait_.Get(index);
}
::BioService::PortraitCharacteristic* PopulationCreationResponse::mutable_portrait(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PopulationCreationResponse.portrait)
  return portrait_.Mutable(index);
}
::BioService::PortraitCharacteristic* PopulationCreationResponse::add_portrait() {
  // @@protoc_insertion_point(field_add:BioService.PopulationCreationResponse.portrait)
  return portrait_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >*
PopulationCreationResponse::mutable_portrait() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PopulationCreationResponse.portrait)
  return &portrait_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >&
PopulationCreationResponse::portrait() const {
  // @@protoc_insertion_point(field_list:BioService.PopulationCreationResponse.portrait)
  return portrait_;
}

// optional .BioService.ServiceException exception = 3;
bool PopulationCreationResponse::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void PopulationCreationResponse::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& PopulationCreationResponse::exception() const {
  // @@protoc_insertion_point(field_get:BioService.PopulationCreationResponse.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* PopulationCreationResponse::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.PopulationCreationResponse.exception)
  return exception_;
}
::BioService::ServiceException* PopulationCreationResponse::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.PopulationCreationResponse.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void PopulationCreationResponse::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.PopulationCreationResponse.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcquisitionResponse::kPortraitFieldNumber;
const int AcquisitionResponse::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcquisitionResponse::AcquisitionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.AcquisitionResponse)
}

void AcquisitionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  portrait_ = const_cast< ::BioService::PortraitCharacteristic*>(&::BioService::PortraitCharacteristic::default_instance());
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

AcquisitionResponse::AcquisitionResponse(const AcquisitionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.AcquisitionResponse)
}

void AcquisitionResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  portrait_ = NULL;
  exception_ = NULL;
}

AcquisitionResponse::~AcquisitionResponse() {
  // @@protoc_insertion_point(destructor:BioService.AcquisitionResponse)
  SharedDtor();
}

void AcquisitionResponse::SharedDtor() {
  if (this != default_instance_) {
    delete portrait_;
    delete exception_;
  }
}

void AcquisitionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcquisitionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcquisitionResponse_descriptor_;
}

const AcquisitionResponse& AcquisitionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

AcquisitionResponse* AcquisitionResponse::default_instance_ = NULL;

AcquisitionResponse* AcquisitionResponse::New(::google::protobuf::Arena* arena) const {
  AcquisitionResponse* n = new AcquisitionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcquisitionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.AcquisitionResponse)
  if (GetArenaNoVirtual() == NULL && portrait_ != NULL) delete portrait_;
  portrait_ = NULL;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}

bool AcquisitionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.AcquisitionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.PortraitCharacteristic portrait = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 2;
      case 2: {
        if (tag == 18) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.AcquisitionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.AcquisitionResponse)
  return false;
#undef DO_
}

void AcquisitionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.AcquisitionResponse)
  // optional .BioService.PortraitCharacteristic portrait = 1;
  if (this->has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->portrait_, output);
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.AcquisitionResponse)
}

::google::protobuf::uint8* AcquisitionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.AcquisitionResponse)
  // optional .BioService.PortraitCharacteristic portrait = 1;
  if (this->has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->portrait_, target);
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.AcquisitionResponse)
  return target;
}

int AcquisitionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.AcquisitionResponse)
  int total_size = 0;

  // optional .BioService.PortraitCharacteristic portrait = 1;
  if (this->has_portrait()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->portrait_);
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcquisitionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.AcquisitionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AcquisitionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AcquisitionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.AcquisitionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.AcquisitionResponse)
    MergeFrom(*source);
  }
}

void AcquisitionResponse::MergeFrom(const AcquisitionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.AcquisitionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_portrait()) {
    mutable_portrait()->::BioService::PortraitCharacteristic::MergeFrom(from.portrait());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void AcquisitionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.AcquisitionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcquisitionResponse::CopyFrom(const AcquisitionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.AcquisitionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcquisitionResponse::IsInitialized() const {

  return true;
}

void AcquisitionResponse::Swap(AcquisitionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcquisitionResponse::InternalSwap(AcquisitionResponse* other) {
  std::swap(portrait_, other->portrait_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcquisitionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcquisitionResponse_descriptor_;
  metadata.reflection = AcquisitionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcquisitionResponse

// optional .BioService.PortraitCharacteristic portrait = 1;
bool AcquisitionResponse::has_portrait() const {
  return !_is_default_instance_ && portrait_ != NULL;
}
void AcquisitionResponse::clear_portrait() {
  if (GetArenaNoVirtual() == NULL && portrait_ != NULL) delete portrait_;
  portrait_ = NULL;
}
const ::BioService::PortraitCharacteristic& AcquisitionResponse::portrait() const {
  // @@protoc_insertion_point(field_get:BioService.AcquisitionResponse.portrait)
  return portrait_ != NULL ? *portrait_ : *default_instance_->portrait_;
}
::BioService::PortraitCharacteristic* AcquisitionResponse::mutable_portrait() {
  
  if (portrait_ == NULL) {
    portrait_ = new ::BioService::PortraitCharacteristic;
  }
  // @@protoc_insertion_point(field_mutable:BioService.AcquisitionResponse.portrait)
  return portrait_;
}
::BioService::PortraitCharacteristic* AcquisitionResponse::release_portrait() {
  // @@protoc_insertion_point(field_release:BioService.AcquisitionResponse.portrait)
  
  ::BioService::PortraitCharacteristic* temp = portrait_;
  portrait_ = NULL;
  return temp;
}
void AcquisitionResponse::set_allocated_portrait(::BioService::PortraitCharacteristic* portrait) {
  delete portrait_;
  portrait_ = portrait;
  if (portrait) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.AcquisitionResponse.portrait)
}

// optional .BioService.ServiceException exception = 2;
bool AcquisitionResponse::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void AcquisitionResponse::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& AcquisitionResponse::exception() const {
  // @@protoc_insertion_point(field_get:BioService.AcquisitionResponse.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* AcquisitionResponse::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.AcquisitionResponse.exception)
  return exception_;
}
::BioService::ServiceException* AcquisitionResponse::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.AcquisitionResponse.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void AcquisitionResponse::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.AcquisitionResponse.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawIndexes::kIndexesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawIndexes::RawIndexes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.RawIndexes)
}

void RawIndexes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RawIndexes::RawIndexes(const RawIndexes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.RawIndexes)
}

void RawIndexes::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RawIndexes::~RawIndexes() {
  // @@protoc_insertion_point(destructor:BioService.RawIndexes)
  SharedDtor();
}

void RawIndexes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RawIndexes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawIndexes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawIndexes_descriptor_;
}

const RawIndexes& RawIndexes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

RawIndexes* RawIndexes::default_instance_ = NULL;

RawIndexes* RawIndexes::New(::google::protobuf::Arena* arena) const {
  RawIndexes* n = new RawIndexes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawIndexes::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.RawIndexes)
  indexes_.Clear();
}

bool RawIndexes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.RawIndexes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 indexes = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_indexes())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_indexes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.RawIndexes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.RawIndexes)
  return false;
#undef DO_
}

void RawIndexes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.RawIndexes)
  // repeated int64 indexes = 1;
  if (this->indexes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_indexes_cached_byte_size_);
  }
  for (int i = 0; i < this->indexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->indexes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.RawIndexes)
}

::google::protobuf::uint8* RawIndexes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.RawIndexes)
  // repeated int64 indexes = 1;
  if (this->indexes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _indexes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->indexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->indexes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.RawIndexes)
  return target;
}

int RawIndexes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.RawIndexes)
  int total_size = 0;

  // repeated int64 indexes = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->indexes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->indexes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _indexes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawIndexes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.RawIndexes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawIndexes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RawIndexes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.RawIndexes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.RawIndexes)
    MergeFrom(*source);
  }
}

void RawIndexes::MergeFrom(const RawIndexes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.RawIndexes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  indexes_.MergeFrom(from.indexes_);
}

void RawIndexes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.RawIndexes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawIndexes::CopyFrom(const RawIndexes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.RawIndexes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawIndexes::IsInitialized() const {

  return true;
}

void RawIndexes::Swap(RawIndexes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawIndexes::InternalSwap(RawIndexes* other) {
  indexes_.UnsafeArenaSwap(&other->indexes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawIndexes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawIndexes_descriptor_;
  metadata.reflection = RawIndexes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawIndexes

// repeated int64 indexes = 1;
int RawIndexes::indexes_size() const {
  return indexes_.size();
}
void RawIndexes::clear_indexes() {
  indexes_.Clear();
}
 ::google::protobuf::int64 RawIndexes::indexes(int index) const {
  // @@protoc_insertion_point(field_get:BioService.RawIndexes.indexes)
  return indexes_.Get(index);
}
 void RawIndexes::set_indexes(int index, ::google::protobuf::int64 value) {
  indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.RawIndexes.indexes)
}
 void RawIndexes::add_indexes(::google::protobuf::int64 value) {
  indexes_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.RawIndexes.indexes)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
RawIndexes::indexes() const {
  // @@protoc_insertion_point(field_list:BioService.RawIndexes.indexes)
  return indexes_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
RawIndexes::mutable_indexes() {
  // @@protoc_insertion_point(field_mutable_list:BioService.RawIndexes.indexes)
  return &indexes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Criminal::kIdFieldNumber;
const int Criminal::kDescriptionFieldNumber;
const int Criminal::kAlertFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Criminal::Criminal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Criminal)
}

void Criminal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Criminal::Criminal(const Criminal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Criminal)
}

void Criminal::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Criminal::~Criminal() {
  // @@protoc_insertion_point(destructor:BioService.Criminal)
  SharedDtor();
}

void Criminal::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alert_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Criminal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Criminal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Criminal_descriptor_;
}

const Criminal& Criminal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Criminal* Criminal::default_instance_ = NULL;

Criminal* Criminal::New(::google::protobuf::Arena* arena) const {
  Criminal* n = new Criminal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Criminal::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Criminal)
  id_ = GOOGLE_LONGLONG(0);
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Criminal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Criminal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Criminal.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_alert;
        break;
      }

      // optional string alert = 3;
      case 3: {
        if (tag == 26) {
         parse_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alert()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alert().data(), this->alert().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Criminal.alert"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Criminal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Criminal)
  return false;
#undef DO_
}

void Criminal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Criminal)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Criminal.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string alert = 3;
  if (this->alert().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alert().data(), this->alert().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Criminal.alert");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->alert(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Criminal)
}

::google::protobuf::uint8* Criminal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Criminal)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Criminal.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string alert = 3;
  if (this->alert().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alert().data(), this->alert().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Criminal.alert");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->alert(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Criminal)
  return target;
}

int Criminal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Criminal)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string alert = 3;
  if (this->alert().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alert());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Criminal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Criminal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Criminal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Criminal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Criminal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Criminal)
    MergeFrom(*source);
  }
}

void Criminal::MergeFrom(const Criminal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Criminal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.alert().size() > 0) {

    alert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alert_);
  }
}

void Criminal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Criminal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Criminal::CopyFrom(const Criminal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Criminal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Criminal::IsInitialized() const {

  return true;
}

void Criminal::Swap(Criminal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Criminal::InternalSwap(Criminal* other) {
  std::swap(id_, other->id_);
  description_.Swap(&other->description_);
  alert_.Swap(&other->alert_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Criminal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Criminal_descriptor_;
  metadata.reflection = Criminal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Criminal

// optional int64 id = 1;
void Criminal::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Criminal::id() const {
  // @@protoc_insertion_point(field_get:BioService.Criminal.id)
  return id_;
}
 void Criminal::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Criminal.id)
}

// optional string description = 2;
void Criminal::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Criminal::description() const {
  // @@protoc_insertion_point(field_get:BioService.Criminal.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Criminal::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Criminal.description)
}
 void Criminal::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Criminal.description)
}
 void Criminal::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Criminal.description)
}
 ::std::string* Criminal::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Criminal.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Criminal::release_description() {
  // @@protoc_insertion_point(field_release:BioService.Criminal.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Criminal::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:BioService.Criminal.description)
}

// optional string alert = 3;
void Criminal::clear_alert() {
  alert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Criminal::alert() const {
  // @@protoc_insertion_point(field_get:BioService.Criminal.alert)
  return alert_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Criminal::set_alert(const ::std::string& value) {
  
  alert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Criminal.alert)
}
 void Criminal::set_alert(const char* value) {
  
  alert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Criminal.alert)
}
 void Criminal::set_alert(const char* value, size_t size) {
  
  alert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Criminal.alert)
}
 ::std::string* Criminal::mutable_alert() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Criminal.alert)
  return alert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Criminal::release_alert() {
  // @@protoc_insertion_point(field_release:BioService.Criminal.alert)
  
  return alert_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Criminal::set_allocated_alert(::std::string* alert) {
  if (alert != NULL) {
    
  } else {
    
  }
  alert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alert);
  // @@protoc_insertion_point(field_set_allocated:BioService.Criminal.alert)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FullVisitorData::kVisitorFieldNumber;
const int FullVisitorData::kFaceFieldNumber;
const int FullVisitorData::kFingerprintFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullVisitorData::FullVisitorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.FullVisitorData)
}

void FullVisitorData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  visitor_ = const_cast< ::BioService::Visitor*>(&::BioService::Visitor::default_instance());
  face_ = const_cast< ::BioService::FacialImage*>(&::BioService::FacialImage::default_instance());
  fingerprint_ = const_cast< ::BioService::FingerprintImage*>(&::BioService::FingerprintImage::default_instance());
}

FullVisitorData::FullVisitorData(const FullVisitorData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.FullVisitorData)
}

void FullVisitorData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  visitor_ = NULL;
  face_ = NULL;
  fingerprint_ = NULL;
}

FullVisitorData::~FullVisitorData() {
  // @@protoc_insertion_point(destructor:BioService.FullVisitorData)
  SharedDtor();
}

void FullVisitorData::SharedDtor() {
  if (this != default_instance_) {
    delete visitor_;
    delete face_;
    delete fingerprint_;
  }
}

void FullVisitorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullVisitorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FullVisitorData_descriptor_;
}

const FullVisitorData& FullVisitorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

FullVisitorData* FullVisitorData::default_instance_ = NULL;

FullVisitorData* FullVisitorData::New(::google::protobuf::Arena* arena) const {
  FullVisitorData* n = new FullVisitorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FullVisitorData::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.FullVisitorData)
  if (GetArenaNoVirtual() == NULL && visitor_ != NULL) delete visitor_;
  visitor_ = NULL;
  if (GetArenaNoVirtual() == NULL && face_ != NULL) delete face_;
  face_ = NULL;
  if (GetArenaNoVirtual() == NULL && fingerprint_ != NULL) delete fingerprint_;
  fingerprint_ = NULL;
}

bool FullVisitorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.FullVisitorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.Visitor visitor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visitor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_face;
        break;
      }

      // optional .BioService.FacialImage face = 2;
      case 2: {
        if (tag == 18) {
         parse_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_face()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fingerprint;
        break;
      }

      // optional .BioService.FingerprintImage fingerprint = 3;
      case 3: {
        if (tag == 26) {
         parse_fingerprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fingerprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.FullVisitorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.FullVisitorData)
  return false;
#undef DO_
}

void FullVisitorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.FullVisitorData)
  // optional .BioService.Visitor visitor = 1;
  if (this->has_visitor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->visitor_, output);
  }

  // optional .BioService.FacialImage face = 2;
  if (this->has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->face_, output);
  }

  // optional .BioService.FingerprintImage fingerprint = 3;
  if (this->has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fingerprint_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.FullVisitorData)
}

::google::protobuf::uint8* FullVisitorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.FullVisitorData)
  // optional .BioService.Visitor visitor = 1;
  if (this->has_visitor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->visitor_, target);
  }

  // optional .BioService.FacialImage face = 2;
  if (this->has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->face_, target);
  }

  // optional .BioService.FingerprintImage fingerprint = 3;
  if (this->has_fingerprint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->fingerprint_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.FullVisitorData)
  return target;
}

int FullVisitorData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.FullVisitorData)
  int total_size = 0;

  // optional .BioService.Visitor visitor = 1;
  if (this->has_visitor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->visitor_);
  }

  // optional .BioService.FacialImage face = 2;
  if (this->has_face()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->face_);
  }

  // optional .BioService.FingerprintImage fingerprint = 3;
  if (this->has_fingerprint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fingerprint_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullVisitorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.FullVisitorData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FullVisitorData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FullVisitorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.FullVisitorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.FullVisitorData)
    MergeFrom(*source);
  }
}

void FullVisitorData::MergeFrom(const FullVisitorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.FullVisitorData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_visitor()) {
    mutable_visitor()->::BioService::Visitor::MergeFrom(from.visitor());
  }
  if (from.has_face()) {
    mutable_face()->::BioService::FacialImage::MergeFrom(from.face());
  }
  if (from.has_fingerprint()) {
    mutable_fingerprint()->::BioService::FingerprintImage::MergeFrom(from.fingerprint());
  }
}

void FullVisitorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.FullVisitorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullVisitorData::CopyFrom(const FullVisitorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.FullVisitorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullVisitorData::IsInitialized() const {

  return true;
}

void FullVisitorData::Swap(FullVisitorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullVisitorData::InternalSwap(FullVisitorData* other) {
  std::swap(visitor_, other->visitor_);
  std::swap(face_, other->face_);
  std::swap(fingerprint_, other->fingerprint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FullVisitorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FullVisitorData_descriptor_;
  metadata.reflection = FullVisitorData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FullVisitorData

// optional .BioService.Visitor visitor = 1;
bool FullVisitorData::has_visitor() const {
  return !_is_default_instance_ && visitor_ != NULL;
}
void FullVisitorData::clear_visitor() {
  if (GetArenaNoVirtual() == NULL && visitor_ != NULL) delete visitor_;
  visitor_ = NULL;
}
const ::BioService::Visitor& FullVisitorData::visitor() const {
  // @@protoc_insertion_point(field_get:BioService.FullVisitorData.visitor)
  return visitor_ != NULL ? *visitor_ : *default_instance_->visitor_;
}
::BioService::Visitor* FullVisitorData::mutable_visitor() {
  
  if (visitor_ == NULL) {
    visitor_ = new ::BioService::Visitor;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FullVisitorData.visitor)
  return visitor_;
}
::BioService::Visitor* FullVisitorData::release_visitor() {
  // @@protoc_insertion_point(field_release:BioService.FullVisitorData.visitor)
  
  ::BioService::Visitor* temp = visitor_;
  visitor_ = NULL;
  return temp;
}
void FullVisitorData::set_allocated_visitor(::BioService::Visitor* visitor) {
  delete visitor_;
  visitor_ = visitor;
  if (visitor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FullVisitorData.visitor)
}

// optional .BioService.FacialImage face = 2;
bool FullVisitorData::has_face() const {
  return !_is_default_instance_ && face_ != NULL;
}
void FullVisitorData::clear_face() {
  if (GetArenaNoVirtual() == NULL && face_ != NULL) delete face_;
  face_ = NULL;
}
const ::BioService::FacialImage& FullVisitorData::face() const {
  // @@protoc_insertion_point(field_get:BioService.FullVisitorData.face)
  return face_ != NULL ? *face_ : *default_instance_->face_;
}
::BioService::FacialImage* FullVisitorData::mutable_face() {
  
  if (face_ == NULL) {
    face_ = new ::BioService::FacialImage;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FullVisitorData.face)
  return face_;
}
::BioService::FacialImage* FullVisitorData::release_face() {
  // @@protoc_insertion_point(field_release:BioService.FullVisitorData.face)
  
  ::BioService::FacialImage* temp = face_;
  face_ = NULL;
  return temp;
}
void FullVisitorData::set_allocated_face(::BioService::FacialImage* face) {
  delete face_;
  face_ = face;
  if (face) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FullVisitorData.face)
}

// optional .BioService.FingerprintImage fingerprint = 3;
bool FullVisitorData::has_fingerprint() const {
  return !_is_default_instance_ && fingerprint_ != NULL;
}
void FullVisitorData::clear_fingerprint() {
  if (GetArenaNoVirtual() == NULL && fingerprint_ != NULL) delete fingerprint_;
  fingerprint_ = NULL;
}
const ::BioService::FingerprintImage& FullVisitorData::fingerprint() const {
  // @@protoc_insertion_point(field_get:BioService.FullVisitorData.fingerprint)
  return fingerprint_ != NULL ? *fingerprint_ : *default_instance_->fingerprint_;
}
::BioService::FingerprintImage* FullVisitorData::mutable_fingerprint() {
  
  if (fingerprint_ == NULL) {
    fingerprint_ = new ::BioService::FingerprintImage;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FullVisitorData.fingerprint)
  return fingerprint_;
}
::BioService::FingerprintImage* FullVisitorData::release_fingerprint() {
  // @@protoc_insertion_point(field_release:BioService.FullVisitorData.fingerprint)
  
  ::BioService::FingerprintImage* temp = fingerprint_;
  fingerprint_ = NULL;
  return temp;
}
void FullVisitorData::set_allocated_fingerprint(::BioService::FingerprintImage* fingerprint) {
  delete fingerprint_;
  fingerprint_ = fingerprint;
  if (fingerprint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FullVisitorData.fingerprint)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Person::kIdFieldNumber;
const int Person::kFirstnameFieldNumber;
const int Person::kLastnameFieldNumber;
const int Person::kDateofbirthFieldNumber;
const int Person::kGenderFieldNumber;
const int Person::kCountryFieldNumber;
const int Person::kCityFieldNumber;
const int Person::kCommentsFieldNumber;
const int Person::kRightsFieldNumber;
const int Person::kEmailFieldNumber;
const int Person::kThumbnailidFieldNumber;
const int Person::kCriminalFieldNumber;
const int Person::kFingerprintsFieldNumber;
const int Person::kCardsFieldNumber;
const int Person::kPhotosFieldNumber;
const int Person::kBiometricDataFieldNumber;
const int Person::kEntityStateFieldNumber;
const int Person::kExceptionFieldNumber;
const int Person::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Person::Person()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Person)
}

void Person::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  criminal_ = const_cast< ::BioService::Criminal*>(&::BioService::Criminal::default_instance());
  biometric_data_ = const_cast< ::BioService::BiometricData*>(&::BioService::BiometricData::default_instance());
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

Person::Person(const Person& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Person)
}

void Person::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  firstname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dateofbirth_ = GOOGLE_LONGLONG(0);
  gender_ = 0;
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comments_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rights_ = 0;
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnailid_ = GOOGLE_LONGLONG(0);
  criminal_ = NULL;
  biometric_data_ = NULL;
  entity_state_ = 0;
  exception_ = NULL;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:BioService.Person)
  SharedDtor();
}

void Person::SharedDtor() {
  firstname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comments_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete criminal_;
    delete biometric_data_;
    delete exception_;
  }
}

void Person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Person::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Person_descriptor_;
}

const Person& Person::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Person* Person::default_instance_ = NULL;

Person* Person::New(::google::protobuf::Arena* arena) const {
  Person* n = new Person;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Person)
  id_ = GOOGLE_LONGLONG(0);
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dateofbirth_ = GOOGLE_LONGLONG(0);
  gender_ = 0;
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comments_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rights_ = 0;
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnailid_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && criminal_ != NULL) delete criminal_;
  criminal_ = NULL;
  if (GetArenaNoVirtual() == NULL && biometric_data_ != NULL) delete biometric_data_;
  biometric_data_ = NULL;
  entity_state_ = 0;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fingerprints_.Clear();
  cards_.Clear();
  photos_.Clear();
}

bool Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_firstname;
        break;
      }

      // optional string firstname = 2;
      case 2: {
        if (tag == 18) {
         parse_firstname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Person.firstname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lastname;
        break;
      }

      // optional string lastname = 3;
      case 3: {
        if (tag == 26) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Person.lastname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dateofbirth;
        break;
      }

      // optional int64 dateofbirth = 4;
      case 4: {
        if (tag == 32) {
         parse_dateofbirth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dateofbirth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional .BioService.Gender gender = 5;
      case 5: {
        if (tag == 40) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gender(static_cast< ::BioService::Gender >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_country;
        break;
      }

      // optional string country = 6;
      case 6: {
        if (tag == 50) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Person.country"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_city;
        break;
      }

      // optional string city = 7;
      case 7: {
        if (tag == 58) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Person.city"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_comments;
        break;
      }

      // optional string comments = 8;
      case 8: {
        if (tag == 66) {
         parse_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comments()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comments().data(), this->comments().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Person.comments"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_rights;
        break;
      }

      // optional .BioService.Rights rights = 9;
      case 9: {
        if (tag == 72) {
         parse_rights:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rights(static_cast< ::BioService::Rights >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_email;
        break;
      }

      // optional string email = 10;
      case 10: {
        if (tag == 82) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Person.email"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_thumbnailid;
        break;
      }

      // optional int64 thumbnailid = 11;
      case 11: {
        if (tag == 88) {
         parse_thumbnailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &thumbnailid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_criminal;
        break;
      }

      // optional .BioService.Criminal criminal = 12;
      case 12: {
        if (tag == 98) {
         parse_criminal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_criminal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_fingerprints;
        break;
      }

      // repeated .BioService.FingerprintCharacteristic fingerprints = 13;
      case 13: {
        if (tag == 106) {
         parse_fingerprints:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fingerprints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fingerprints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_fingerprints;
        if (input->ExpectTag(114)) goto parse_loop_cards;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .BioService.Card cards = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_cards;
        if (input->ExpectTag(122)) goto parse_loop_photos;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .BioService.Photo photos = 15;
      case 15: {
        if (tag == 122) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_photos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(130)) goto parse_biometric_data;
        break;
      }

      // optional .BioService.BiometricData biometric_data = 16;
      case 16: {
        if (tag == 130) {
         parse_biometric_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_biometric_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 17;
      case 17: {
        if (tag == 136) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 18;
      case 18: {
        if (tag == 146) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_message;
        break;
      }

      // optional string message = 19;
      case 19: {
        if (tag == 154) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Person.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Person)
  return false;
#undef DO_
}

void Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Person)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string firstname = 2;
  if (this->firstname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.firstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firstname(), output);
  }

  // optional string lastname = 3;
  if (this->lastname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.lastname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lastname(), output);
  }

  // optional int64 dateofbirth = 4;
  if (this->dateofbirth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dateofbirth(), output);
  }

  // optional .BioService.Gender gender = 5;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gender(), output);
  }

  // optional string country = 6;
  if (this->country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->country(), output);
  }

  // optional string city = 7;
  if (this->city().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->city(), output);
  }

  // optional string comments = 8;
  if (this->comments().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.comments");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->comments(), output);
  }

  // optional .BioService.Rights rights = 9;
  if (this->rights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->rights(), output);
  }

  // optional string email = 10;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->email(), output);
  }

  // optional int64 thumbnailid = 11;
  if (this->thumbnailid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->thumbnailid(), output);
  }

  // optional .BioService.Criminal criminal = 12;
  if (this->has_criminal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->criminal_, output);
  }

  // repeated .BioService.FingerprintCharacteristic fingerprints = 13;
  for (unsigned int i = 0, n = this->fingerprints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->fingerprints(i), output);
  }

  // repeated .BioService.Card cards = 14;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cards(i), output);
  }

  // repeated .BioService.Photo photos = 15;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->photos(i), output);
  }

  // optional .BioService.BiometricData biometric_data = 16;
  if (this->has_biometric_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->biometric_data_, output);
  }

  // optional .BioService.EntityState entity_state = 17;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 18;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->exception_, output);
  }

  // optional string message = 19;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Person)
}

::google::protobuf::uint8* Person::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Person)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string firstname = 2;
  if (this->firstname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.firstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->firstname(), target);
  }

  // optional string lastname = 3;
  if (this->lastname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.lastname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lastname(), target);
  }

  // optional int64 dateofbirth = 4;
  if (this->dateofbirth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->dateofbirth(), target);
  }

  // optional .BioService.Gender gender = 5;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->gender(), target);
  }

  // optional string country = 6;
  if (this->country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->country(), target);
  }

  // optional string city = 7;
  if (this->city().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->city(), target);
  }

  // optional string comments = 8;
  if (this->comments().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.comments");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->comments(), target);
  }

  // optional .BioService.Rights rights = 9;
  if (this->rights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->rights(), target);
  }

  // optional string email = 10;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->email(), target);
  }

  // optional int64 thumbnailid = 11;
  if (this->thumbnailid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->thumbnailid(), target);
  }

  // optional .BioService.Criminal criminal = 12;
  if (this->has_criminal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->criminal_, target);
  }

  // repeated .BioService.FingerprintCharacteristic fingerprints = 13;
  for (unsigned int i = 0, n = this->fingerprints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->fingerprints(i), target);
  }

  // repeated .BioService.Card cards = 14;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cards(i), target);
  }

  // repeated .BioService.Photo photos = 15;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->photos(i), target);
  }

  // optional .BioService.BiometricData biometric_data = 16;
  if (this->has_biometric_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, *this->biometric_data_, target);
  }

  // optional .BioService.EntityState entity_state = 17;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 18;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, *this->exception_, target);
  }

  // optional string message = 19;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Person.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Person)
  return target;
}

int Person::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Person)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional string firstname = 2;
  if (this->firstname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firstname());
  }

  // optional string lastname = 3;
  if (this->lastname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lastname());
  }

  // optional int64 dateofbirth = 4;
  if (this->dateofbirth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dateofbirth());
  }

  // optional .BioService.Gender gender = 5;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
  }

  // optional string country = 6;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country());
  }

  // optional string city = 7;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->city());
  }

  // optional string comments = 8;
  if (this->comments().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comments());
  }

  // optional .BioService.Rights rights = 9;
  if (this->rights() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rights());
  }

  // optional string email = 10;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // optional int64 thumbnailid = 11;
  if (this->thumbnailid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->thumbnailid());
  }

  // optional .BioService.Criminal criminal = 12;
  if (this->has_criminal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->criminal_);
  }

  // optional .BioService.BiometricData biometric_data = 16;
  if (this->has_biometric_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->biometric_data_);
  }

  // optional .BioService.EntityState entity_state = 17;
  if (this->entity_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 18;
  if (this->has_exception()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // optional string message = 19;
  if (this->message().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // repeated .BioService.FingerprintCharacteristic fingerprints = 13;
  total_size += 1 * this->fingerprints_size();
  for (int i = 0; i < this->fingerprints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fingerprints(i));
  }

  // repeated .BioService.Card cards = 14;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  // repeated .BioService.Photo photos = 15;
  total_size += 1 * this->photos_size();
  for (int i = 0; i < this->photos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->photos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Person::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Person)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Person* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Person>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Person)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Person)
    MergeFrom(*source);
  }
}

void Person::MergeFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Person)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fingerprints_.MergeFrom(from.fingerprints_);
  cards_.MergeFrom(from.cards_);
  photos_.MergeFrom(from.photos_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.firstname().size() > 0) {

    firstname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firstname_);
  }
  if (from.lastname().size() > 0) {

    lastname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastname_);
  }
  if (from.dateofbirth() != 0) {
    set_dateofbirth(from.dateofbirth());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.city().size() > 0) {

    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.comments().size() > 0) {

    comments_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comments_);
  }
  if (from.rights() != 0) {
    set_rights(from.rights());
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.thumbnailid() != 0) {
    set_thumbnailid(from.thumbnailid());
  }
  if (from.has_criminal()) {
    mutable_criminal()->::BioService::Criminal::MergeFrom(from.criminal());
  }
  if (from.has_biometric_data()) {
    mutable_biometric_data()->::BioService::BiometricData::MergeFrom(from.biometric_data());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Person::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {

  return true;
}

void Person::Swap(Person* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Person::InternalSwap(Person* other) {
  std::swap(id_, other->id_);
  firstname_.Swap(&other->firstname_);
  lastname_.Swap(&other->lastname_);
  std::swap(dateofbirth_, other->dateofbirth_);
  std::swap(gender_, other->gender_);
  country_.Swap(&other->country_);
  city_.Swap(&other->city_);
  comments_.Swap(&other->comments_);
  std::swap(rights_, other->rights_);
  email_.Swap(&other->email_);
  std::swap(thumbnailid_, other->thumbnailid_);
  std::swap(criminal_, other->criminal_);
  fingerprints_.UnsafeArenaSwap(&other->fingerprints_);
  cards_.UnsafeArenaSwap(&other->cards_);
  photos_.UnsafeArenaSwap(&other->photos_);
  std::swap(biometric_data_, other->biometric_data_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Person::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Person_descriptor_;
  metadata.reflection = Person_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Person

// optional int64 id = 1;
void Person::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Person::id() const {
  // @@protoc_insertion_point(field_get:BioService.Person.id)
  return id_;
}
 void Person::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.id)
}

// optional string firstname = 2;
void Person::clear_firstname() {
  firstname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Person::firstname() const {
  // @@protoc_insertion_point(field_get:BioService.Person.firstname)
  return firstname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_firstname(const ::std::string& value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.firstname)
}
 void Person::set_firstname(const char* value) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.firstname)
}
 void Person::set_firstname(const char* value, size_t size) {
  
  firstname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.firstname)
}
 ::std::string* Person::mutable_firstname() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.firstname)
  return firstname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_firstname() {
  // @@protoc_insertion_point(field_release:BioService.Person.firstname)
  
  return firstname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_firstname(::std::string* firstname) {
  if (firstname != NULL) {
    
  } else {
    
  }
  firstname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firstname);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.firstname)
}

// optional string lastname = 3;
void Person::clear_lastname() {
  lastname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Person::lastname() const {
  // @@protoc_insertion_point(field_get:BioService.Person.lastname)
  return lastname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_lastname(const ::std::string& value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.lastname)
}
 void Person::set_lastname(const char* value) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.lastname)
}
 void Person::set_lastname(const char* value, size_t size) {
  
  lastname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.lastname)
}
 ::std::string* Person::mutable_lastname() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.lastname)
  return lastname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_lastname() {
  // @@protoc_insertion_point(field_release:BioService.Person.lastname)
  
  return lastname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_lastname(::std::string* lastname) {
  if (lastname != NULL) {
    
  } else {
    
  }
  lastname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastname);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.lastname)
}

// optional int64 dateofbirth = 4;
void Person::clear_dateofbirth() {
  dateofbirth_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Person::dateofbirth() const {
  // @@protoc_insertion_point(field_get:BioService.Person.dateofbirth)
  return dateofbirth_;
}
 void Person::set_dateofbirth(::google::protobuf::int64 value) {
  
  dateofbirth_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.dateofbirth)
}

// optional .BioService.Gender gender = 5;
void Person::clear_gender() {
  gender_ = 0;
}
 ::BioService::Gender Person::gender() const {
  // @@protoc_insertion_point(field_get:BioService.Person.gender)
  return static_cast< ::BioService::Gender >(gender_);
}
 void Person::set_gender(::BioService::Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.gender)
}

// optional string country = 6;
void Person::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Person::country() const {
  // @@protoc_insertion_point(field_get:BioService.Person.country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.country)
}
 void Person::set_country(const char* value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.country)
}
 void Person::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.country)
}
 ::std::string* Person::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_country() {
  // @@protoc_insertion_point(field_release:BioService.Person.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.country)
}

// optional string city = 7;
void Person::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Person::city() const {
  // @@protoc_insertion_point(field_get:BioService.Person.city)
  return city_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.city)
}
 void Person::set_city(const char* value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.city)
}
 void Person::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.city)
}
 ::std::string* Person::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_city() {
  // @@protoc_insertion_point(field_release:BioService.Person.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.city)
}

// optional string comments = 8;
void Person::clear_comments() {
  comments_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Person::comments() const {
  // @@protoc_insertion_point(field_get:BioService.Person.comments)
  return comments_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_comments(const ::std::string& value) {
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.comments)
}
 void Person::set_comments(const char* value) {
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.comments)
}
 void Person::set_comments(const char* value, size_t size) {
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.comments)
}
 ::std::string* Person::mutable_comments() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.comments)
  return comments_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_comments() {
  // @@protoc_insertion_point(field_release:BioService.Person.comments)
  
  return comments_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_comments(::std::string* comments) {
  if (comments != NULL) {
    
  } else {
    
  }
  comments_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comments);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.comments)
}

// optional .BioService.Rights rights = 9;
void Person::clear_rights() {
  rights_ = 0;
}
 ::BioService::Rights Person::rights() const {
  // @@protoc_insertion_point(field_get:BioService.Person.rights)
  return static_cast< ::BioService::Rights >(rights_);
}
 void Person::set_rights(::BioService::Rights value) {
  
  rights_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.rights)
}

// optional string email = 10;
void Person::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Person::email() const {
  // @@protoc_insertion_point(field_get:BioService.Person.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.email)
}
 void Person::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.email)
}
 void Person::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.email)
}
 ::std::string* Person::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_email() {
  // @@protoc_insertion_point(field_release:BioService.Person.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.email)
}

// optional int64 thumbnailid = 11;
void Person::clear_thumbnailid() {
  thumbnailid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Person::thumbnailid() const {
  // @@protoc_insertion_point(field_get:BioService.Person.thumbnailid)
  return thumbnailid_;
}
 void Person::set_thumbnailid(::google::protobuf::int64 value) {
  
  thumbnailid_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.thumbnailid)
}

// optional .BioService.Criminal criminal = 12;
bool Person::has_criminal() const {
  return !_is_default_instance_ && criminal_ != NULL;
}
void Person::clear_criminal() {
  if (GetArenaNoVirtual() == NULL && criminal_ != NULL) delete criminal_;
  criminal_ = NULL;
}
const ::BioService::Criminal& Person::criminal() const {
  // @@protoc_insertion_point(field_get:BioService.Person.criminal)
  return criminal_ != NULL ? *criminal_ : *default_instance_->criminal_;
}
::BioService::Criminal* Person::mutable_criminal() {
  
  if (criminal_ == NULL) {
    criminal_ = new ::BioService::Criminal;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Person.criminal)
  return criminal_;
}
::BioService::Criminal* Person::release_criminal() {
  // @@protoc_insertion_point(field_release:BioService.Person.criminal)
  
  ::BioService::Criminal* temp = criminal_;
  criminal_ = NULL;
  return temp;
}
void Person::set_allocated_criminal(::BioService::Criminal* criminal) {
  delete criminal_;
  criminal_ = criminal;
  if (criminal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.criminal)
}

// repeated .BioService.FingerprintCharacteristic fingerprints = 13;
int Person::fingerprints_size() const {
  return fingerprints_.size();
}
void Person::clear_fingerprints() {
  fingerprints_.Clear();
}
const ::BioService::FingerprintCharacteristic& Person::fingerprints(int index) const {
  // @@protoc_insertion_point(field_get:BioService.Person.fingerprints)
  return fingerprints_.Get(index);
}
::BioService::FingerprintCharacteristic* Person::mutable_fingerprints(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.Person.fingerprints)
  return fingerprints_.Mutable(index);
}
::BioService::FingerprintCharacteristic* Person::add_fingerprints() {
  // @@protoc_insertion_point(field_add:BioService.Person.fingerprints)
  return fingerprints_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::FingerprintCharacteristic >*
Person::mutable_fingerprints() {
  // @@protoc_insertion_point(field_mutable_list:BioService.Person.fingerprints)
  return &fingerprints_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::FingerprintCharacteristic >&
Person::fingerprints() const {
  // @@protoc_insertion_point(field_list:BioService.Person.fingerprints)
  return fingerprints_;
}

// repeated .BioService.Card cards = 14;
int Person::cards_size() const {
  return cards_.size();
}
void Person::clear_cards() {
  cards_.Clear();
}
const ::BioService::Card& Person::cards(int index) const {
  // @@protoc_insertion_point(field_get:BioService.Person.cards)
  return cards_.Get(index);
}
::BioService::Card* Person::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.Person.cards)
  return cards_.Mutable(index);
}
::BioService::Card* Person::add_cards() {
  // @@protoc_insertion_point(field_add:BioService.Person.cards)
  return cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Card >*
Person::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:BioService.Person.cards)
  return &cards_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Card >&
Person::cards() const {
  // @@protoc_insertion_point(field_list:BioService.Person.cards)
  return cards_;
}

// repeated .BioService.Photo photos = 15;
int Person::photos_size() const {
  return photos_.size();
}
void Person::clear_photos() {
  photos_.Clear();
}
const ::BioService::Photo& Person::photos(int index) const {
  // @@protoc_insertion_point(field_get:BioService.Person.photos)
  return photos_.Get(index);
}
::BioService::Photo* Person::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.Person.photos)
  return photos_.Mutable(index);
}
::BioService::Photo* Person::add_photos() {
  // @@protoc_insertion_point(field_add:BioService.Person.photos)
  return photos_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Photo >*
Person::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:BioService.Person.photos)
  return &photos_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Photo >&
Person::photos() const {
  // @@protoc_insertion_point(field_list:BioService.Person.photos)
  return photos_;
}

// optional .BioService.BiometricData biometric_data = 16;
bool Person::has_biometric_data() const {
  return !_is_default_instance_ && biometric_data_ != NULL;
}
void Person::clear_biometric_data() {
  if (GetArenaNoVirtual() == NULL && biometric_data_ != NULL) delete biometric_data_;
  biometric_data_ = NULL;
}
const ::BioService::BiometricData& Person::biometric_data() const {
  // @@protoc_insertion_point(field_get:BioService.Person.biometric_data)
  return biometric_data_ != NULL ? *biometric_data_ : *default_instance_->biometric_data_;
}
::BioService::BiometricData* Person::mutable_biometric_data() {
  
  if (biometric_data_ == NULL) {
    biometric_data_ = new ::BioService::BiometricData;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Person.biometric_data)
  return biometric_data_;
}
::BioService::BiometricData* Person::release_biometric_data() {
  // @@protoc_insertion_point(field_release:BioService.Person.biometric_data)
  
  ::BioService::BiometricData* temp = biometric_data_;
  biometric_data_ = NULL;
  return temp;
}
void Person::set_allocated_biometric_data(::BioService::BiometricData* biometric_data) {
  delete biometric_data_;
  biometric_data_ = biometric_data;
  if (biometric_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.biometric_data)
}

// optional .BioService.EntityState entity_state = 17;
void Person::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState Person::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.Person.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void Person::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.Person.entity_state)
}

// optional .BioService.ServiceException exception = 18;
bool Person::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void Person::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& Person::exception() const {
  // @@protoc_insertion_point(field_get:BioService.Person.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* Person::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Person.exception)
  return exception_;
}
::BioService::ServiceException* Person::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.Person.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void Person::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.exception)
}

// optional string message = 19;
void Person::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Person::message() const {
  // @@protoc_insertion_point(field_get:BioService.Person.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Person.message)
}
 void Person::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Person.message)
}
 void Person::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Person.message)
}
 ::std::string* Person::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Person.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_message() {
  // @@protoc_insertion_point(field_release:BioService.Person.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BioService.Person.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessDevice::kPortnameFieldNumber;
const int AccessDevice::kExceptionFieldNumber;
const int AccessDevice::kEntityStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessDevice::AccessDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.AccessDevice)
}

void AccessDevice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

AccessDevice::AccessDevice(const AccessDevice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.AccessDevice)
}

void AccessDevice::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  portname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exception_ = NULL;
  entity_state_ = 0;
}

AccessDevice::~AccessDevice() {
  // @@protoc_insertion_point(destructor:BioService.AccessDevice)
  SharedDtor();
}

void AccessDevice::SharedDtor() {
  portname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete exception_;
  }
}

void AccessDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessDevice_descriptor_;
}

const AccessDevice& AccessDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

AccessDevice* AccessDevice::default_instance_ = NULL;

AccessDevice* AccessDevice::New(::google::protobuf::Arena* arena) const {
  AccessDevice* n = new AccessDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.AccessDevice)
  portname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
  entity_state_ = 0;
}

bool AccessDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.AccessDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string portname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->portname().data(), this->portname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.AccessDevice.portname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 2;
      case 2: {
        if (tag == 18) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 3;
      case 3: {
        if (tag == 24) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.AccessDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.AccessDevice)
  return false;
#undef DO_
}

void AccessDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.AccessDevice)
  // optional string portname = 1;
  if (this->portname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->portname().data(), this->portname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.AccessDevice.portname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->portname(), output);
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->exception_, output);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->entity_state(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.AccessDevice)
}

::google::protobuf::uint8* AccessDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.AccessDevice)
  // optional string portname = 1;
  if (this->portname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->portname().data(), this->portname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.AccessDevice.portname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portname(), target);
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->exception_, target);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->entity_state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.AccessDevice)
  return target;
}

int AccessDevice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.AccessDevice)
  int total_size = 0;

  // optional string portname = 1;
  if (this->portname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->portname());
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.AccessDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AccessDevice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.AccessDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.AccessDevice)
    MergeFrom(*source);
  }
}

void AccessDevice::MergeFrom(const AccessDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.AccessDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.portname().size() > 0) {

    portname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.portname_);
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
}

void AccessDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.AccessDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessDevice::CopyFrom(const AccessDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.AccessDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessDevice::IsInitialized() const {

  return true;
}

void AccessDevice::Swap(AccessDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessDevice::InternalSwap(AccessDevice* other) {
  portname_.Swap(&other->portname_);
  std::swap(exception_, other->exception_);
  std::swap(entity_state_, other->entity_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessDevice_descriptor_;
  metadata.reflection = AccessDevice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessDevice

// optional string portname = 1;
void AccessDevice::clear_portname() {
  portname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AccessDevice::portname() const {
  // @@protoc_insertion_point(field_get:BioService.AccessDevice.portname)
  return portname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccessDevice::set_portname(const ::std::string& value) {
  
  portname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.AccessDevice.portname)
}
 void AccessDevice::set_portname(const char* value) {
  
  portname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.AccessDevice.portname)
}
 void AccessDevice::set_portname(const char* value, size_t size) {
  
  portname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.AccessDevice.portname)
}
 ::std::string* AccessDevice::mutable_portname() {
  
  // @@protoc_insertion_point(field_mutable:BioService.AccessDevice.portname)
  return portname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccessDevice::release_portname() {
  // @@protoc_insertion_point(field_release:BioService.AccessDevice.portname)
  
  return portname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccessDevice::set_allocated_portname(::std::string* portname) {
  if (portname != NULL) {
    
  } else {
    
  }
  portname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portname);
  // @@protoc_insertion_point(field_set_allocated:BioService.AccessDevice.portname)
}

// optional .BioService.ServiceException exception = 2;
bool AccessDevice::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void AccessDevice::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& AccessDevice::exception() const {
  // @@protoc_insertion_point(field_get:BioService.AccessDevice.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* AccessDevice::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.AccessDevice.exception)
  return exception_;
}
::BioService::ServiceException* AccessDevice::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.AccessDevice.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void AccessDevice::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.AccessDevice.exception)
}

// optional .BioService.EntityState entity_state = 3;
void AccessDevice::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState AccessDevice::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.AccessDevice.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void AccessDevice::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.AccessDevice.entity_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaptureDevice::kDevicenameFieldNumber;
const int CaptureDevice::kExceptionFieldNumber;
const int CaptureDevice::kEntityStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptureDevice::CaptureDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.CaptureDevice)
}

void CaptureDevice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

CaptureDevice::CaptureDevice(const CaptureDevice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.CaptureDevice)
}

void CaptureDevice::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exception_ = NULL;
  entity_state_ = 0;
}

CaptureDevice::~CaptureDevice() {
  // @@protoc_insertion_point(destructor:BioService.CaptureDevice)
  SharedDtor();
}

void CaptureDevice::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete exception_;
  }
}

void CaptureDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaptureDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaptureDevice_descriptor_;
}

const CaptureDevice& CaptureDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

CaptureDevice* CaptureDevice::default_instance_ = NULL;

CaptureDevice* CaptureDevice::New(::google::protobuf::Arena* arena) const {
  CaptureDevice* n = new CaptureDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CaptureDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.CaptureDevice)
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
  entity_state_ = 0;
}

bool CaptureDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.CaptureDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devicename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.CaptureDevice.devicename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 2;
      case 2: {
        if (tag == 18) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 3;
      case 3: {
        if (tag == 24) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.CaptureDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.CaptureDevice)
  return false;
#undef DO_
}

void CaptureDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.CaptureDevice)
  // optional string devicename = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.CaptureDevice.devicename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicename(), output);
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->exception_, output);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->entity_state(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.CaptureDevice)
}

::google::protobuf::uint8* CaptureDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.CaptureDevice)
  // optional string devicename = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.CaptureDevice.devicename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicename(), target);
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->exception_, target);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->entity_state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.CaptureDevice)
  return target;
}

int CaptureDevice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.CaptureDevice)
  int total_size = 0;

  // optional string devicename = 1;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // optional .BioService.ServiceException exception = 2;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaptureDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.CaptureDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CaptureDevice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CaptureDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.CaptureDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.CaptureDevice)
    MergeFrom(*source);
  }
}

void CaptureDevice::MergeFrom(const CaptureDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.CaptureDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
}

void CaptureDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.CaptureDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaptureDevice::CopyFrom(const CaptureDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.CaptureDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureDevice::IsInitialized() const {

  return true;
}

void CaptureDevice::Swap(CaptureDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptureDevice::InternalSwap(CaptureDevice* other) {
  devicename_.Swap(&other->devicename_);
  std::swap(exception_, other->exception_);
  std::swap(entity_state_, other->entity_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CaptureDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaptureDevice_descriptor_;
  metadata.reflection = CaptureDevice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CaptureDevice

// optional string devicename = 1;
void CaptureDevice::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CaptureDevice::devicename() const {
  // @@protoc_insertion_point(field_get:BioService.CaptureDevice.devicename)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CaptureDevice::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.CaptureDevice.devicename)
}
 void CaptureDevice::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.CaptureDevice.devicename)
}
 void CaptureDevice::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.CaptureDevice.devicename)
}
 ::std::string* CaptureDevice::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:BioService.CaptureDevice.devicename)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CaptureDevice::release_devicename() {
  // @@protoc_insertion_point(field_release:BioService.CaptureDevice.devicename)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CaptureDevice::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:BioService.CaptureDevice.devicename)
}

// optional .BioService.ServiceException exception = 2;
bool CaptureDevice::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void CaptureDevice::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& CaptureDevice::exception() const {
  // @@protoc_insertion_point(field_get:BioService.CaptureDevice.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* CaptureDevice::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.CaptureDevice.exception)
  return exception_;
}
::BioService::ServiceException* CaptureDevice::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.CaptureDevice.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void CaptureDevice::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.CaptureDevice.exception)
}

// optional .BioService.EntityState entity_state = 3;
void CaptureDevice::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState CaptureDevice::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.CaptureDevice.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void CaptureDevice::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.CaptureDevice.entity_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FingerprintDevice::kDevicenameFieldNumber;
const int FingerprintDevice::kSerialNumberFieldNumber;
const int FingerprintDevice::kExceptionFieldNumber;
const int FingerprintDevice::kEntityStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FingerprintDevice::FingerprintDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.FingerprintDevice)
}

void FingerprintDevice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

FingerprintDevice::FingerprintDevice(const FingerprintDevice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.FingerprintDevice)
}

void FingerprintDevice::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exception_ = NULL;
  entity_state_ = 0;
}

FingerprintDevice::~FingerprintDevice() {
  // @@protoc_insertion_point(destructor:BioService.FingerprintDevice)
  SharedDtor();
}

void FingerprintDevice::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete exception_;
  }
}

void FingerprintDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FingerprintDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FingerprintDevice_descriptor_;
}

const FingerprintDevice& FingerprintDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

FingerprintDevice* FingerprintDevice::default_instance_ = NULL;

FingerprintDevice* FingerprintDevice::New(::google::protobuf::Arena* arena) const {
  FingerprintDevice* n = new FingerprintDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FingerprintDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.FingerprintDevice)
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
  entity_state_ = 0;
}

bool FingerprintDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.FingerprintDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devicename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.FingerprintDevice.devicename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serial_number;
        break;
      }

      // optional string serial_number = 2;
      case 2: {
        if (tag == 18) {
         parse_serial_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.FingerprintDevice.serial_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 3;
      case 3: {
        if (tag == 26) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 4;
      case 4: {
        if (tag == 32) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.FingerprintDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.FingerprintDevice)
  return false;
#undef DO_
}

void FingerprintDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.FingerprintDevice)
  // optional string devicename = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.FingerprintDevice.devicename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicename(), output);
  }

  // optional string serial_number = 2;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.FingerprintDevice.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serial_number(), output);
  }

  // optional .BioService.ServiceException exception = 3;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->exception_, output);
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->entity_state(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.FingerprintDevice)
}

::google::protobuf::uint8* FingerprintDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.FingerprintDevice)
  // optional string devicename = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.FingerprintDevice.devicename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicename(), target);
  }

  // optional string serial_number = 2;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.FingerprintDevice.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serial_number(), target);
  }

  // optional .BioService.ServiceException exception = 3;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->exception_, target);
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->entity_state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.FingerprintDevice)
  return target;
}

int FingerprintDevice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.FingerprintDevice)
  int total_size = 0;

  // optional string devicename = 1;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // optional string serial_number = 2;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // optional .BioService.ServiceException exception = 3;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FingerprintDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.FingerprintDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FingerprintDevice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FingerprintDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.FingerprintDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.FingerprintDevice)
    MergeFrom(*source);
  }
}

void FingerprintDevice::MergeFrom(const FingerprintDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.FingerprintDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
}

void FingerprintDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.FingerprintDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerprintDevice::CopyFrom(const FingerprintDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.FingerprintDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerprintDevice::IsInitialized() const {

  return true;
}

void FingerprintDevice::Swap(FingerprintDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FingerprintDevice::InternalSwap(FingerprintDevice* other) {
  devicename_.Swap(&other->devicename_);
  serial_number_.Swap(&other->serial_number_);
  std::swap(exception_, other->exception_);
  std::swap(entity_state_, other->entity_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FingerprintDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FingerprintDevice_descriptor_;
  metadata.reflection = FingerprintDevice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FingerprintDevice

// optional string devicename = 1;
void FingerprintDevice::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FingerprintDevice::devicename() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintDevice.devicename)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FingerprintDevice::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.FingerprintDevice.devicename)
}
 void FingerprintDevice::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.FingerprintDevice.devicename)
}
 void FingerprintDevice::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.FingerprintDevice.devicename)
}
 ::std::string* FingerprintDevice::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintDevice.devicename)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FingerprintDevice::release_devicename() {
  // @@protoc_insertion_point(field_release:BioService.FingerprintDevice.devicename)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FingerprintDevice::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintDevice.devicename)
}

// optional string serial_number = 2;
void FingerprintDevice::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FingerprintDevice::serial_number() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintDevice.serial_number)
  return serial_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FingerprintDevice::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.FingerprintDevice.serial_number)
}
 void FingerprintDevice::set_serial_number(const char* value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.FingerprintDevice.serial_number)
}
 void FingerprintDevice::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.FingerprintDevice.serial_number)
}
 ::std::string* FingerprintDevice::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintDevice.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FingerprintDevice::release_serial_number() {
  // @@protoc_insertion_point(field_release:BioService.FingerprintDevice.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FingerprintDevice::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintDevice.serial_number)
}

// optional .BioService.ServiceException exception = 3;
bool FingerprintDevice::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void FingerprintDevice::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& FingerprintDevice::exception() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintDevice.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* FingerprintDevice::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintDevice.exception)
  return exception_;
}
::BioService::ServiceException* FingerprintDevice::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.FingerprintDevice.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void FingerprintDevice::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintDevice.exception)
}

// optional .BioService.EntityState entity_state = 4;
void FingerprintDevice::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState FingerprintDevice::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintDevice.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void FingerprintDevice::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintDevice.entity_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IrisDevice::kDevicenameFieldNumber;
const int IrisDevice::kSerialNumberFieldNumber;
const int IrisDevice::kExceptionFieldNumber;
const int IrisDevice::kEntityStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IrisDevice::IrisDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.IrisDevice)
}

void IrisDevice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

IrisDevice::IrisDevice(const IrisDevice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.IrisDevice)
}

void IrisDevice::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exception_ = NULL;
  entity_state_ = 0;
}

IrisDevice::~IrisDevice() {
  // @@protoc_insertion_point(destructor:BioService.IrisDevice)
  SharedDtor();
}

void IrisDevice::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete exception_;
  }
}

void IrisDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IrisDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IrisDevice_descriptor_;
}

const IrisDevice& IrisDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

IrisDevice* IrisDevice::default_instance_ = NULL;

IrisDevice* IrisDevice::New(::google::protobuf::Arena* arena) const {
  IrisDevice* n = new IrisDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IrisDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.IrisDevice)
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
  entity_state_ = 0;
}

bool IrisDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.IrisDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string devicename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.IrisDevice.devicename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serial_number;
        break;
      }

      // optional string serial_number = 2;
      case 2: {
        if (tag == 18) {
         parse_serial_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.IrisDevice.serial_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 3;
      case 3: {
        if (tag == 26) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 4;
      case 4: {
        if (tag == 32) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.IrisDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.IrisDevice)
  return false;
#undef DO_
}

void IrisDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.IrisDevice)
  // optional string devicename = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.IrisDevice.devicename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicename(), output);
  }

  // optional string serial_number = 2;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.IrisDevice.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serial_number(), output);
  }

  // optional .BioService.ServiceException exception = 3;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->exception_, output);
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->entity_state(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.IrisDevice)
}

::google::protobuf::uint8* IrisDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.IrisDevice)
  // optional string devicename = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.IrisDevice.devicename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicename(), target);
  }

  // optional string serial_number = 2;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.IrisDevice.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serial_number(), target);
  }

  // optional .BioService.ServiceException exception = 3;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->exception_, target);
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->entity_state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.IrisDevice)
  return target;
}

int IrisDevice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.IrisDevice)
  int total_size = 0;

  // optional string devicename = 1;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // optional string serial_number = 2;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // optional .BioService.ServiceException exception = 3;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IrisDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.IrisDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IrisDevice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IrisDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.IrisDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.IrisDevice)
    MergeFrom(*source);
  }
}

void IrisDevice::MergeFrom(const IrisDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.IrisDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
}

void IrisDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.IrisDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IrisDevice::CopyFrom(const IrisDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.IrisDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IrisDevice::IsInitialized() const {

  return true;
}

void IrisDevice::Swap(IrisDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IrisDevice::InternalSwap(IrisDevice* other) {
  devicename_.Swap(&other->devicename_);
  serial_number_.Swap(&other->serial_number_);
  std::swap(exception_, other->exception_);
  std::swap(entity_state_, other->entity_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IrisDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IrisDevice_descriptor_;
  metadata.reflection = IrisDevice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IrisDevice

// optional string devicename = 1;
void IrisDevice::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IrisDevice::devicename() const {
  // @@protoc_insertion_point(field_get:BioService.IrisDevice.devicename)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IrisDevice::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.IrisDevice.devicename)
}
 void IrisDevice::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.IrisDevice.devicename)
}
 void IrisDevice::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.IrisDevice.devicename)
}
 ::std::string* IrisDevice::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:BioService.IrisDevice.devicename)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IrisDevice::release_devicename() {
  // @@protoc_insertion_point(field_release:BioService.IrisDevice.devicename)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IrisDevice::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:BioService.IrisDevice.devicename)
}

// optional string serial_number = 2;
void IrisDevice::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IrisDevice::serial_number() const {
  // @@protoc_insertion_point(field_get:BioService.IrisDevice.serial_number)
  return serial_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IrisDevice::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.IrisDevice.serial_number)
}
 void IrisDevice::set_serial_number(const char* value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.IrisDevice.serial_number)
}
 void IrisDevice::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.IrisDevice.serial_number)
}
 ::std::string* IrisDevice::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:BioService.IrisDevice.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IrisDevice::release_serial_number() {
  // @@protoc_insertion_point(field_release:BioService.IrisDevice.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IrisDevice::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:BioService.IrisDevice.serial_number)
}

// optional .BioService.ServiceException exception = 3;
bool IrisDevice::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void IrisDevice::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& IrisDevice::exception() const {
  // @@protoc_insertion_point(field_get:BioService.IrisDevice.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* IrisDevice::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.IrisDevice.exception)
  return exception_;
}
::BioService::ServiceException* IrisDevice::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.IrisDevice.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void IrisDevice::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.IrisDevice.exception)
}

// optional .BioService.EntityState entity_state = 4;
void IrisDevice::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState IrisDevice::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.IrisDevice.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void IrisDevice::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.IrisDevice.entity_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Card::kIdFieldNumber;
const int Card::kPersonidFieldNumber;
const int Card::kUniqueNumberFieldNumber;
const int Card::kEntityStateFieldNumber;
const int Card::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Card::Card()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Card)
}

void Card::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

Card::Card(const Card& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Card)
}

void Card::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  personid_ = GOOGLE_LONGLONG(0);
  unique_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_state_ = 0;
  exception_ = NULL;
}

Card::~Card() {
  // @@protoc_insertion_point(destructor:BioService.Card)
  SharedDtor();
}

void Card::SharedDtor() {
  unique_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete exception_;
  }
}

void Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_descriptor_;
}

const Card& Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Card* Card::default_instance_ = NULL;

Card* Card::New(::google::protobuf::Arena* arena) const {
  Card* n = new Card;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Card::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Card)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Card, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Card*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, personid_);
  unique_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_state_ = 0;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Card)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_personid;
        break;
      }

      // optional int64 personid = 2;
      case 2: {
        if (tag == 16) {
         parse_personid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &personid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unique_number;
        break;
      }

      // optional string unique_number = 3;
      case 3: {
        if (tag == 26) {
         parse_unique_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unique_number().data(), this->unique_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Card.unique_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 4;
      case 4: {
        if (tag == 32) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 5;
      case 5: {
        if (tag == 42) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Card)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Card)
  return false;
#undef DO_
}

void Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Card)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 personid = 2;
  if (this->personid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->personid(), output);
  }

  // optional string unique_number = 3;
  if (this->unique_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_number().data(), this->unique_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Card.unique_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->unique_number(), output);
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 5;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Card)
}

::google::protobuf::uint8* Card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Card)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 personid = 2;
  if (this->personid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->personid(), target);
  }

  // optional string unique_number = 3;
  if (this->unique_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_number().data(), this->unique_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Card.unique_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->unique_number(), target);
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 5;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Card)
  return target;
}

int Card::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Card)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional int64 personid = 2;
  if (this->personid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->personid());
  }

  // optional string unique_number = 3;
  if (this->unique_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unique_number());
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 5;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Card::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Card)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Card* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Card>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Card)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Card)
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Card)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.personid() != 0) {
    set_personid(from.personid());
  }
  if (from.unique_number().size() > 0) {

    unique_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unique_number_);
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void Card::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {

  return true;
}

void Card::Swap(Card* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Card::InternalSwap(Card* other) {
  std::swap(id_, other->id_);
  std::swap(personid_, other->personid_);
  unique_number_.Swap(&other->unique_number_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Card_descriptor_;
  metadata.reflection = Card_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Card

// optional int64 id = 1;
void Card::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Card::id() const {
  // @@protoc_insertion_point(field_get:BioService.Card.id)
  return id_;
}
 void Card::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Card.id)
}

// optional int64 personid = 2;
void Card::clear_personid() {
  personid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Card::personid() const {
  // @@protoc_insertion_point(field_get:BioService.Card.personid)
  return personid_;
}
 void Card::set_personid(::google::protobuf::int64 value) {
  
  personid_ = value;
  // @@protoc_insertion_point(field_set:BioService.Card.personid)
}

// optional string unique_number = 3;
void Card::clear_unique_number() {
  unique_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Card::unique_number() const {
  // @@protoc_insertion_point(field_get:BioService.Card.unique_number)
  return unique_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Card::set_unique_number(const ::std::string& value) {
  
  unique_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Card.unique_number)
}
 void Card::set_unique_number(const char* value) {
  
  unique_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Card.unique_number)
}
 void Card::set_unique_number(const char* value, size_t size) {
  
  unique_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Card.unique_number)
}
 ::std::string* Card::mutable_unique_number() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Card.unique_number)
  return unique_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Card::release_unique_number() {
  // @@protoc_insertion_point(field_release:BioService.Card.unique_number)
  
  return unique_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Card::set_allocated_unique_number(::std::string* unique_number) {
  if (unique_number != NULL) {
    
  } else {
    
  }
  unique_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_number);
  // @@protoc_insertion_point(field_set_allocated:BioService.Card.unique_number)
}

// optional .BioService.EntityState entity_state = 4;
void Card::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState Card::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.Card.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void Card::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.Card.entity_state)
}

// optional .BioService.ServiceException exception = 5;
bool Card::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void Card::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& Card::exception() const {
  // @@protoc_insertion_point(field_get:BioService.Card.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* Card::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Card.exception)
  return exception_;
}
::BioService::ServiceException* Card::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.Card.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void Card::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Card.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kIdFieldNumber;
const int Location::kLocationNameFieldNumber;
const int Location::kDescriptionFieldNumber;
const int Location::kMacAddressFieldNumber;
const int Location::kCaptureDeviceFieldNumber;
const int Location::kAccessDeviceFieldNumber;
const int Location::kFingerprintDeviceFieldNumber;
const int Location::kIrisDeviceFieldNumber;
const int Location::kAccessInfoFieldNumber;
const int Location::kEntityStateFieldNumber;
const int Location::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Location)
}

void Location::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  capturedevice_ = const_cast< ::BioService::CaptureDevice*>(&::BioService::CaptureDevice::default_instance());
  accessdevice_ = const_cast< ::BioService::AccessDevice*>(&::BioService::AccessDevice::default_instance());
  fingerprintdevice_ = const_cast< ::BioService::FingerprintDevice*>(&::BioService::FingerprintDevice::default_instance());
  irisdevice_ = const_cast< ::BioService::IrisDevice*>(&::BioService::IrisDevice::default_instance());
  access_info_ = const_cast< ::BioService::AccessInfo*>(&::BioService::AccessInfo::default_instance());
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

Location::Location(const Location& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Location)
}

void Location::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  location_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  capturedevice_ = NULL;
  accessdevice_ = NULL;
  fingerprintdevice_ = NULL;
  irisdevice_ = NULL;
  access_info_ = NULL;
  entity_state_ = 0;
  exception_ = NULL;
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:BioService.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  location_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete capturedevice_;
    delete accessdevice_;
    delete fingerprintdevice_;
    delete irisdevice_;
    delete access_info_;
    delete exception_;
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_descriptor_;
}

const Location& Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Location* Location::default_instance_ = NULL;

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Location)
  id_ = GOOGLE_LONGLONG(0);
  location_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && capturedevice_ != NULL) delete capturedevice_;
  capturedevice_ = NULL;
  if (GetArenaNoVirtual() == NULL && accessdevice_ != NULL) delete accessdevice_;
  accessdevice_ = NULL;
  if (GetArenaNoVirtual() == NULL && fingerprintdevice_ != NULL) delete fingerprintdevice_;
  fingerprintdevice_ = NULL;
  if (GetArenaNoVirtual() == NULL && irisdevice_ != NULL) delete irisdevice_;
  irisdevice_ = NULL;
  if (GetArenaNoVirtual() == NULL && access_info_ != NULL) delete access_info_;
  access_info_ = NULL;
  entity_state_ = 0;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location_name;
        break;
      }

      // optional string location_name = 2;
      case 2: {
        if (tag == 18) {
         parse_location_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_name().data(), this->location_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Location.location_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Location.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mac_address;
        break;
      }

      // optional string mac_address = 4;
      case 4: {
        if (tag == 34) {
         parse_mac_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac_address().data(), this->mac_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Location.mac_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_captureDevice;
        break;
      }

      // optional .BioService.CaptureDevice captureDevice = 5;
      case 5: {
        if (tag == 42) {
         parse_captureDevice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capturedevice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_accessDevice;
        break;
      }

      // optional .BioService.AccessDevice accessDevice = 6;
      case 6: {
        if (tag == 50) {
         parse_accessDevice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accessdevice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fingerprintDevice;
        break;
      }

      // optional .BioService.FingerprintDevice fingerprintDevice = 7;
      case 7: {
        if (tag == 58) {
         parse_fingerprintDevice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fingerprintdevice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_irisDevice;
        break;
      }

      // optional .BioService.IrisDevice irisDevice = 8;
      case 8: {
        if (tag == 66) {
         parse_irisDevice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_irisdevice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_access_info;
        break;
      }

      // optional .BioService.AccessInfo access_info = 9;
      case 9: {
        if (tag == 74) {
         parse_access_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_access_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 10;
      case 10: {
        if (tag == 80) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 11;
      case 11: {
        if (tag == 90) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Location)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string location_name = 2;
  if (this->location_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_name().data(), this->location_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Location.location_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->location_name(), output);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Location.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional string mac_address = 4;
  if (this->mac_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_address().data(), this->mac_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Location.mac_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mac_address(), output);
  }

  // optional .BioService.CaptureDevice captureDevice = 5;
  if (this->has_capturedevice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->capturedevice_, output);
  }

  // optional .BioService.AccessDevice accessDevice = 6;
  if (this->has_accessdevice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->accessdevice_, output);
  }

  // optional .BioService.FingerprintDevice fingerprintDevice = 7;
  if (this->has_fingerprintdevice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->fingerprintdevice_, output);
  }

  // optional .BioService.IrisDevice irisDevice = 8;
  if (this->has_irisdevice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->irisdevice_, output);
  }

  // optional .BioService.AccessInfo access_info = 9;
  if (this->has_access_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->access_info_, output);
  }

  // optional .BioService.EntityState entity_state = 10;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 11;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Location)
}

::google::protobuf::uint8* Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Location)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string location_name = 2;
  if (this->location_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_name().data(), this->location_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Location.location_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->location_name(), target);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Location.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional string mac_address = 4;
  if (this->mac_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_address().data(), this->mac_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Location.mac_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mac_address(), target);
  }

  // optional .BioService.CaptureDevice captureDevice = 5;
  if (this->has_capturedevice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->capturedevice_, target);
  }

  // optional .BioService.AccessDevice accessDevice = 6;
  if (this->has_accessdevice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->accessdevice_, target);
  }

  // optional .BioService.FingerprintDevice fingerprintDevice = 7;
  if (this->has_fingerprintdevice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->fingerprintdevice_, target);
  }

  // optional .BioService.IrisDevice irisDevice = 8;
  if (this->has_irisdevice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->irisdevice_, target);
  }

  // optional .BioService.AccessInfo access_info = 9;
  if (this->has_access_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->access_info_, target);
  }

  // optional .BioService.EntityState entity_state = 10;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 11;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Location)
  return target;
}

int Location::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Location)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional string location_name = 2;
  if (this->location_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_name());
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string mac_address = 4;
  if (this->mac_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac_address());
  }

  // optional .BioService.CaptureDevice captureDevice = 5;
  if (this->has_capturedevice()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capturedevice_);
  }

  // optional .BioService.AccessDevice accessDevice = 6;
  if (this->has_accessdevice()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accessdevice_);
  }

  // optional .BioService.FingerprintDevice fingerprintDevice = 7;
  if (this->has_fingerprintdevice()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fingerprintdevice_);
  }

  // optional .BioService.IrisDevice irisDevice = 8;
  if (this->has_irisdevice()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->irisdevice_);
  }

  // optional .BioService.AccessInfo access_info = 9;
  if (this->has_access_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->access_info_);
  }

  // optional .BioService.EntityState entity_state = 10;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 11;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Location* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.location_name().size() > 0) {

    location_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.mac_address().size() > 0) {

    mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  if (from.has_capturedevice()) {
    mutable_capturedevice()->::BioService::CaptureDevice::MergeFrom(from.capturedevice());
  }
  if (from.has_accessdevice()) {
    mutable_accessdevice()->::BioService::AccessDevice::MergeFrom(from.accessdevice());
  }
  if (from.has_fingerprintdevice()) {
    mutable_fingerprintdevice()->::BioService::FingerprintDevice::MergeFrom(from.fingerprintdevice());
  }
  if (from.has_irisdevice()) {
    mutable_irisdevice()->::BioService::IrisDevice::MergeFrom(from.irisdevice());
  }
  if (from.has_access_info()) {
    mutable_access_info()->::BioService::AccessInfo::MergeFrom(from.access_info());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {

  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  std::swap(id_, other->id_);
  location_name_.Swap(&other->location_name_);
  description_.Swap(&other->description_);
  mac_address_.Swap(&other->mac_address_);
  std::swap(capturedevice_, other->capturedevice_);
  std::swap(accessdevice_, other->accessdevice_);
  std::swap(fingerprintdevice_, other->fingerprintdevice_);
  std::swap(irisdevice_, other->irisdevice_);
  std::swap(access_info_, other->access_info_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location_descriptor_;
  metadata.reflection = Location_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// optional int64 id = 1;
void Location::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Location::id() const {
  // @@protoc_insertion_point(field_get:BioService.Location.id)
  return id_;
}
 void Location::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Location.id)
}

// optional string location_name = 2;
void Location::clear_location_name() {
  location_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Location::location_name() const {
  // @@protoc_insertion_point(field_get:BioService.Location.location_name)
  return location_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Location::set_location_name(const ::std::string& value) {
  
  location_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Location.location_name)
}
 void Location::set_location_name(const char* value) {
  
  location_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Location.location_name)
}
 void Location::set_location_name(const char* value, size_t size) {
  
  location_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Location.location_name)
}
 ::std::string* Location::mutable_location_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Location.location_name)
  return location_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_location_name() {
  // @@protoc_insertion_point(field_release:BioService.Location.location_name)
  
  return location_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Location::set_allocated_location_name(::std::string* location_name) {
  if (location_name != NULL) {
    
  } else {
    
  }
  location_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.location_name)
}

// optional string description = 3;
void Location::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Location::description() const {
  // @@protoc_insertion_point(field_get:BioService.Location.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Location::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Location.description)
}
 void Location::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Location.description)
}
 void Location::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Location.description)
}
 ::std::string* Location::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Location.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_description() {
  // @@protoc_insertion_point(field_release:BioService.Location.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Location::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.description)
}

// optional string mac_address = 4;
void Location::clear_mac_address() {
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Location::mac_address() const {
  // @@protoc_insertion_point(field_get:BioService.Location.mac_address)
  return mac_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Location::set_mac_address(const ::std::string& value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Location.mac_address)
}
 void Location::set_mac_address(const char* value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Location.mac_address)
}
 void Location::set_mac_address(const char* value, size_t size) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Location.mac_address)
}
 ::std::string* Location::mutable_mac_address() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Location.mac_address)
  return mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_mac_address() {
  // @@protoc_insertion_point(field_release:BioService.Location.mac_address)
  
  return mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Location::set_allocated_mac_address(::std::string* mac_address) {
  if (mac_address != NULL) {
    
  } else {
    
  }
  mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_address);
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.mac_address)
}

// optional .BioService.CaptureDevice captureDevice = 5;
bool Location::has_capturedevice() const {
  return !_is_default_instance_ && capturedevice_ != NULL;
}
void Location::clear_capturedevice() {
  if (GetArenaNoVirtual() == NULL && capturedevice_ != NULL) delete capturedevice_;
  capturedevice_ = NULL;
}
const ::BioService::CaptureDevice& Location::capturedevice() const {
  // @@protoc_insertion_point(field_get:BioService.Location.captureDevice)
  return capturedevice_ != NULL ? *capturedevice_ : *default_instance_->capturedevice_;
}
::BioService::CaptureDevice* Location::mutable_capturedevice() {
  
  if (capturedevice_ == NULL) {
    capturedevice_ = new ::BioService::CaptureDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.captureDevice)
  return capturedevice_;
}
::BioService::CaptureDevice* Location::release_capturedevice() {
  // @@protoc_insertion_point(field_release:BioService.Location.captureDevice)
  
  ::BioService::CaptureDevice* temp = capturedevice_;
  capturedevice_ = NULL;
  return temp;
}
void Location::set_allocated_capturedevice(::BioService::CaptureDevice* capturedevice) {
  delete capturedevice_;
  capturedevice_ = capturedevice;
  if (capturedevice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.captureDevice)
}

// optional .BioService.AccessDevice accessDevice = 6;
bool Location::has_accessdevice() const {
  return !_is_default_instance_ && accessdevice_ != NULL;
}
void Location::clear_accessdevice() {
  if (GetArenaNoVirtual() == NULL && accessdevice_ != NULL) delete accessdevice_;
  accessdevice_ = NULL;
}
const ::BioService::AccessDevice& Location::accessdevice() const {
  // @@protoc_insertion_point(field_get:BioService.Location.accessDevice)
  return accessdevice_ != NULL ? *accessdevice_ : *default_instance_->accessdevice_;
}
::BioService::AccessDevice* Location::mutable_accessdevice() {
  
  if (accessdevice_ == NULL) {
    accessdevice_ = new ::BioService::AccessDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.accessDevice)
  return accessdevice_;
}
::BioService::AccessDevice* Location::release_accessdevice() {
  // @@protoc_insertion_point(field_release:BioService.Location.accessDevice)
  
  ::BioService::AccessDevice* temp = accessdevice_;
  accessdevice_ = NULL;
  return temp;
}
void Location::set_allocated_accessdevice(::BioService::AccessDevice* accessdevice) {
  delete accessdevice_;
  accessdevice_ = accessdevice;
  if (accessdevice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.accessDevice)
}

// optional .BioService.FingerprintDevice fingerprintDevice = 7;
bool Location::has_fingerprintdevice() const {
  return !_is_default_instance_ && fingerprintdevice_ != NULL;
}
void Location::clear_fingerprintdevice() {
  if (GetArenaNoVirtual() == NULL && fingerprintdevice_ != NULL) delete fingerprintdevice_;
  fingerprintdevice_ = NULL;
}
const ::BioService::FingerprintDevice& Location::fingerprintdevice() const {
  // @@protoc_insertion_point(field_get:BioService.Location.fingerprintDevice)
  return fingerprintdevice_ != NULL ? *fingerprintdevice_ : *default_instance_->fingerprintdevice_;
}
::BioService::FingerprintDevice* Location::mutable_fingerprintdevice() {
  
  if (fingerprintdevice_ == NULL) {
    fingerprintdevice_ = new ::BioService::FingerprintDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.fingerprintDevice)
  return fingerprintdevice_;
}
::BioService::FingerprintDevice* Location::release_fingerprintdevice() {
  // @@protoc_insertion_point(field_release:BioService.Location.fingerprintDevice)
  
  ::BioService::FingerprintDevice* temp = fingerprintdevice_;
  fingerprintdevice_ = NULL;
  return temp;
}
void Location::set_allocated_fingerprintdevice(::BioService::FingerprintDevice* fingerprintdevice) {
  delete fingerprintdevice_;
  fingerprintdevice_ = fingerprintdevice;
  if (fingerprintdevice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.fingerprintDevice)
}

// optional .BioService.IrisDevice irisDevice = 8;
bool Location::has_irisdevice() const {
  return !_is_default_instance_ && irisdevice_ != NULL;
}
void Location::clear_irisdevice() {
  if (GetArenaNoVirtual() == NULL && irisdevice_ != NULL) delete irisdevice_;
  irisdevice_ = NULL;
}
const ::BioService::IrisDevice& Location::irisdevice() const {
  // @@protoc_insertion_point(field_get:BioService.Location.irisDevice)
  return irisdevice_ != NULL ? *irisdevice_ : *default_instance_->irisdevice_;
}
::BioService::IrisDevice* Location::mutable_irisdevice() {
  
  if (irisdevice_ == NULL) {
    irisdevice_ = new ::BioService::IrisDevice;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.irisDevice)
  return irisdevice_;
}
::BioService::IrisDevice* Location::release_irisdevice() {
  // @@protoc_insertion_point(field_release:BioService.Location.irisDevice)
  
  ::BioService::IrisDevice* temp = irisdevice_;
  irisdevice_ = NULL;
  return temp;
}
void Location::set_allocated_irisdevice(::BioService::IrisDevice* irisdevice) {
  delete irisdevice_;
  irisdevice_ = irisdevice;
  if (irisdevice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.irisDevice)
}

// optional .BioService.AccessInfo access_info = 9;
bool Location::has_access_info() const {
  return !_is_default_instance_ && access_info_ != NULL;
}
void Location::clear_access_info() {
  if (GetArenaNoVirtual() == NULL && access_info_ != NULL) delete access_info_;
  access_info_ = NULL;
}
const ::BioService::AccessInfo& Location::access_info() const {
  // @@protoc_insertion_point(field_get:BioService.Location.access_info)
  return access_info_ != NULL ? *access_info_ : *default_instance_->access_info_;
}
::BioService::AccessInfo* Location::mutable_access_info() {
  
  if (access_info_ == NULL) {
    access_info_ = new ::BioService::AccessInfo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.access_info)
  return access_info_;
}
::BioService::AccessInfo* Location::release_access_info() {
  // @@protoc_insertion_point(field_release:BioService.Location.access_info)
  
  ::BioService::AccessInfo* temp = access_info_;
  access_info_ = NULL;
  return temp;
}
void Location::set_allocated_access_info(::BioService::AccessInfo* access_info) {
  delete access_info_;
  access_info_ = access_info;
  if (access_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.access_info)
}

// optional .BioService.EntityState entity_state = 10;
void Location::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState Location::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.Location.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void Location::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.Location.entity_state)
}

// optional .BioService.ServiceException exception = 11;
bool Location::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void Location::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& Location::exception() const {
  // @@protoc_insertion_point(field_get:BioService.Location.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* Location::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Location.exception)
  return exception_;
}
::BioService::ServiceException* Location::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.Location.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void Location::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Location.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* AccessInfo_AccessType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessInfo_AccessType_descriptor_;
}
bool AccessInfo_AccessType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AccessInfo_AccessType AccessInfo::None;
const AccessInfo_AccessType AccessInfo::All;
const AccessInfo_AccessType AccessInfo::Custom;
const AccessInfo_AccessType AccessInfo::AccessType_MIN;
const AccessInfo_AccessType AccessInfo::AccessType_MAX;
const int AccessInfo::AccessType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessInfo::kAccessTypeFieldNumber;
const int AccessInfo::kPersonsFieldNumber;
const int AccessInfo::kEntityStateFieldNumber;
const int AccessInfo::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessInfo::AccessInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.AccessInfo)
}

void AccessInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

AccessInfo::AccessInfo(const AccessInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.AccessInfo)
}

void AccessInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  access_type_ = 0;
  entity_state_ = 0;
  exception_ = NULL;
}

AccessInfo::~AccessInfo() {
  // @@protoc_insertion_point(destructor:BioService.AccessInfo)
  SharedDtor();
}

void AccessInfo::SharedDtor() {
  if (this != default_instance_) {
    delete exception_;
  }
}

void AccessInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessInfo_descriptor_;
}

const AccessInfo& AccessInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

AccessInfo* AccessInfo::default_instance_ = NULL;

AccessInfo* AccessInfo::New(::google::protobuf::Arena* arena) const {
  AccessInfo* n = new AccessInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.AccessInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AccessInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AccessInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(access_type_, entity_state_);
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  persons_.Clear();
}

bool AccessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.AccessInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.AccessInfo.AccessType access_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_access_type(static_cast< ::BioService::AccessInfo_AccessType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_persons;
        break;
      }

      // repeated .BioService.Person persons = 2;
      case 2: {
        if (tag == 18) {
         parse_persons:
          DO_(input->IncrementRecursionDepth());
         parse_loop_persons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_persons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_persons;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 3;
      case 3: {
        if (tag == 24) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 4;
      case 4: {
        if (tag == 34) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.AccessInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.AccessInfo)
  return false;
#undef DO_
}

void AccessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.AccessInfo)
  // optional .BioService.AccessInfo.AccessType access_type = 1;
  if (this->access_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->access_type(), output);
  }

  // repeated .BioService.Person persons = 2;
  for (unsigned int i = 0, n = this->persons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->persons(i), output);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.AccessInfo)
}

::google::protobuf::uint8* AccessInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.AccessInfo)
  // optional .BioService.AccessInfo.AccessType access_type = 1;
  if (this->access_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->access_type(), target);
  }

  // repeated .BioService.Person persons = 2;
  for (unsigned int i = 0, n = this->persons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->persons(i), target);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.AccessInfo)
  return target;
}

int AccessInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.AccessInfo)
  int total_size = 0;

  // optional .BioService.AccessInfo.AccessType access_type = 1;
  if (this->access_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_type());
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // repeated .BioService.Person persons = 2;
  total_size += 1 * this->persons_size();
  for (int i = 0; i < this->persons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->persons(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.AccessInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AccessInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.AccessInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.AccessInfo)
    MergeFrom(*source);
  }
}

void AccessInfo::MergeFrom(const AccessInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.AccessInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  persons_.MergeFrom(from.persons_);
  if (from.access_type() != 0) {
    set_access_type(from.access_type());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void AccessInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.AccessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessInfo::CopyFrom(const AccessInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.AccessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessInfo::IsInitialized() const {

  return true;
}

void AccessInfo::Swap(AccessInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessInfo::InternalSwap(AccessInfo* other) {
  std::swap(access_type_, other->access_type_);
  persons_.UnsafeArenaSwap(&other->persons_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessInfo_descriptor_;
  metadata.reflection = AccessInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessInfo

// optional .BioService.AccessInfo.AccessType access_type = 1;
void AccessInfo::clear_access_type() {
  access_type_ = 0;
}
 ::BioService::AccessInfo_AccessType AccessInfo::access_type() const {
  // @@protoc_insertion_point(field_get:BioService.AccessInfo.access_type)
  return static_cast< ::BioService::AccessInfo_AccessType >(access_type_);
}
 void AccessInfo::set_access_type(::BioService::AccessInfo_AccessType value) {
  
  access_type_ = value;
  // @@protoc_insertion_point(field_set:BioService.AccessInfo.access_type)
}

// repeated .BioService.Person persons = 2;
int AccessInfo::persons_size() const {
  return persons_.size();
}
void AccessInfo::clear_persons() {
  persons_.Clear();
}
const ::BioService::Person& AccessInfo::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.AccessInfo.persons)
  return persons_.Get(index);
}
::BioService::Person* AccessInfo::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.AccessInfo.persons)
  return persons_.Mutable(index);
}
::BioService::Person* AccessInfo::add_persons() {
  // @@protoc_insertion_point(field_add:BioService.AccessInfo.persons)
  return persons_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Person >*
AccessInfo::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.AccessInfo.persons)
  return &persons_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Person >&
AccessInfo::persons() const {
  // @@protoc_insertion_point(field_list:BioService.AccessInfo.persons)
  return persons_;
}

// optional .BioService.EntityState entity_state = 3;
void AccessInfo::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState AccessInfo::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.AccessInfo.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void AccessInfo::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.AccessInfo.entity_state)
}

// optional .BioService.ServiceException exception = 4;
bool AccessInfo::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void AccessInfo::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& AccessInfo::exception() const {
  // @@protoc_insertion_point(field_get:BioService.AccessInfo.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* AccessInfo::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.AccessInfo.exception)
  return exception_;
}
::BioService::ServiceException* AccessInfo::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.AccessInfo.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void AccessInfo::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.AccessInfo.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRecord::kMessageTypeFieldNumber;
const int LogRecord::kDetectedTimeFieldNumber;
const int LogRecord::kExceptionMessageFieldNumber;
const int LogRecord::kClassNameFieldNumber;
const int LogRecord::kFunctionNameFieldNumber;
const int LogRecord::kLineNumberFieldNumber;
const int LogRecord::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRecord::LogRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.LogRecord)
}

void LogRecord::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogRecord::LogRecord(const LogRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.LogRecord)
}

void LogRecord::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_type_ = 0;
  detected_time_ = GOOGLE_LONGLONG(0);
  exception_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_number_ = GOOGLE_LONGLONG(0);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogRecord::~LogRecord() {
  // @@protoc_insertion_point(destructor:BioService.LogRecord)
  SharedDtor();
}

void LogRecord::SharedDtor() {
  exception_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRecord_descriptor_;
}

const LogRecord& LogRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

LogRecord* LogRecord::default_instance_ = NULL;

LogRecord* LogRecord::New(::google::protobuf::Arena* arena) const {
  LogRecord* n = new LogRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.LogRecord)
  message_type_ = 0;
  detected_time_ = GOOGLE_LONGLONG(0);
  exception_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_number_ = GOOGLE_LONGLONG(0);
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.LogRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.MessageType message_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_message_type(static_cast< ::BioService::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_detected_time;
        break;
      }

      // optional int64 detected_time = 2;
      case 2: {
        if (tag == 16) {
         parse_detected_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &detected_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_exception_message;
        break;
      }

      // optional string exception_message = 3;
      case 3: {
        if (tag == 26) {
         parse_exception_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exception_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exception_message().data(), this->exception_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.LogRecord.exception_message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_class_name;
        break;
      }

      // optional string class_name = 4;
      case 4: {
        if (tag == 34) {
         parse_class_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.LogRecord.class_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_function_name;
        break;
      }

      // optional string function_name = 5;
      case 5: {
        if (tag == 42) {
         parse_function_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->function_name().data(), this->function_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.LogRecord.function_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_line_number;
        break;
      }

      // optional int64 line_number = 6;
      case 6: {
        if (tag == 48) {
         parse_line_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &line_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_comment;
        break;
      }

      // optional string comment = 7;
      case 7: {
        if (tag == 58) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.LogRecord.comment"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.LogRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.LogRecord)
  return false;
#undef DO_
}

void LogRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.LogRecord)
  // optional .BioService.MessageType message_type = 1;
  if (this->message_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }

  // optional int64 detected_time = 2;
  if (this->detected_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->detected_time(), output);
  }

  // optional string exception_message = 3;
  if (this->exception_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exception_message().data(), this->exception_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.exception_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exception_message(), output);
  }

  // optional string class_name = 4;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->class_name(), output);
  }

  // optional string function_name = 5;
  if (this->function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function_name().data(), this->function_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.function_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->function_name(), output);
  }

  // optional int64 line_number = 6;
  if (this->line_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->line_number(), output);
  }

  // optional string comment = 7;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->comment(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.LogRecord)
}

::google::protobuf::uint8* LogRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.LogRecord)
  // optional .BioService.MessageType message_type = 1;
  if (this->message_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_type(), target);
  }

  // optional int64 detected_time = 2;
  if (this->detected_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->detected_time(), target);
  }

  // optional string exception_message = 3;
  if (this->exception_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exception_message().data(), this->exception_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.exception_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exception_message(), target);
  }

  // optional string class_name = 4;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->class_name(), target);
  }

  // optional string function_name = 5;
  if (this->function_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function_name().data(), this->function_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.function_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->function_name(), target);
  }

  // optional int64 line_number = 6;
  if (this->line_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->line_number(), target);
  }

  // optional string comment = 7;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.LogRecord.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->comment(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.LogRecord)
  return target;
}

int LogRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.LogRecord)
  int total_size = 0;

  // optional .BioService.MessageType message_type = 1;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
  }

  // optional int64 detected_time = 2;
  if (this->detected_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->detected_time());
  }

  // optional string exception_message = 3;
  if (this->exception_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exception_message());
  }

  // optional string class_name = 4;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // optional string function_name = 5;
  if (this->function_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->function_name());
  }

  // optional int64 line_number = 6;
  if (this->line_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->line_number());
  }

  // optional string comment = 7;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.LogRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.LogRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.LogRecord)
    MergeFrom(*source);
  }
}

void LogRecord::MergeFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.LogRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
  if (from.detected_time() != 0) {
    set_detected_time(from.detected_time());
  }
  if (from.exception_message().size() > 0) {

    exception_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exception_message_);
  }
  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.function_name().size() > 0) {

    function_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function_name_);
  }
  if (from.line_number() != 0) {
    set_line_number(from.line_number());
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
}

void LogRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRecord::CopyFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecord::IsInitialized() const {

  return true;
}

void LogRecord::Swap(LogRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRecord::InternalSwap(LogRecord* other) {
  std::swap(message_type_, other->message_type_);
  std::swap(detected_time_, other->detected_time_);
  exception_message_.Swap(&other->exception_message_);
  class_name_.Swap(&other->class_name_);
  function_name_.Swap(&other->function_name_);
  std::swap(line_number_, other->line_number_);
  comment_.Swap(&other->comment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRecord_descriptor_;
  metadata.reflection = LogRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRecord

// optional .BioService.MessageType message_type = 1;
void LogRecord::clear_message_type() {
  message_type_ = 0;
}
 ::BioService::MessageType LogRecord::message_type() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.message_type)
  return static_cast< ::BioService::MessageType >(message_type_);
}
 void LogRecord::set_message_type(::BioService::MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:BioService.LogRecord.message_type)
}

// optional int64 detected_time = 2;
void LogRecord::clear_detected_time() {
  detected_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LogRecord::detected_time() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.detected_time)
  return detected_time_;
}
 void LogRecord::set_detected_time(::google::protobuf::int64 value) {
  
  detected_time_ = value;
  // @@protoc_insertion_point(field_set:BioService.LogRecord.detected_time)
}

// optional string exception_message = 3;
void LogRecord::clear_exception_message() {
  exception_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogRecord::exception_message() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.exception_message)
  return exception_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_exception_message(const ::std::string& value) {
  
  exception_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.exception_message)
}
 void LogRecord::set_exception_message(const char* value) {
  
  exception_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.exception_message)
}
 void LogRecord::set_exception_message(const char* value, size_t size) {
  
  exception_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.exception_message)
}
 ::std::string* LogRecord::mutable_exception_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.exception_message)
  return exception_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRecord::release_exception_message() {
  // @@protoc_insertion_point(field_release:BioService.LogRecord.exception_message)
  
  return exception_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_allocated_exception_message(::std::string* exception_message) {
  if (exception_message != NULL) {
    
  } else {
    
  }
  exception_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exception_message);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.exception_message)
}

// optional string class_name = 4;
void LogRecord::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogRecord::class_name() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.class_name)
  return class_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_class_name(const ::std::string& value) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.class_name)
}
 void LogRecord::set_class_name(const char* value) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.class_name)
}
 void LogRecord::set_class_name(const char* value, size_t size) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.class_name)
}
 ::std::string* LogRecord::mutable_class_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRecord::release_class_name() {
  // @@protoc_insertion_point(field_release:BioService.LogRecord.class_name)
  
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    
  } else {
    
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.class_name)
}

// optional string function_name = 5;
void LogRecord::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogRecord::function_name() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.function_name)
  return function_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_function_name(const ::std::string& value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.function_name)
}
 void LogRecord::set_function_name(const char* value) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.function_name)
}
 void LogRecord::set_function_name(const char* value, size_t size) {
  
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.function_name)
}
 ::std::string* LogRecord::mutable_function_name() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.function_name)
  return function_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRecord::release_function_name() {
  // @@protoc_insertion_point(field_release:BioService.LogRecord.function_name)
  
  return function_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_allocated_function_name(::std::string* function_name) {
  if (function_name != NULL) {
    
  } else {
    
  }
  function_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.function_name)
}

// optional int64 line_number = 6;
void LogRecord::clear_line_number() {
  line_number_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LogRecord::line_number() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.line_number)
  return line_number_;
}
 void LogRecord::set_line_number(::google::protobuf::int64 value) {
  
  line_number_ = value;
  // @@protoc_insertion_point(field_set:BioService.LogRecord.line_number)
}

// optional string comment = 7;
void LogRecord::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogRecord::comment() const {
  // @@protoc_insertion_point(field_get:BioService.LogRecord.comment)
  return comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.LogRecord.comment)
}
 void LogRecord::set_comment(const char* value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.LogRecord.comment)
}
 void LogRecord::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.LogRecord.comment)
}
 ::std::string* LogRecord::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:BioService.LogRecord.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRecord::release_comment() {
  // @@protoc_insertion_point(field_release:BioService.LogRecord.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRecord::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:BioService.LogRecord.comment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfidentPosition::kXposFieldNumber;
const int ConfidentPosition::kYposFieldNumber;
const int ConfidentPosition::kConfidenceFieldNumber;
const int ConfidentPosition::kEntityStateFieldNumber;
const int ConfidentPosition::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfidentPosition::ConfidentPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.ConfidentPosition)
}

void ConfidentPosition::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

ConfidentPosition::ConfidentPosition(const ConfidentPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.ConfidentPosition)
}

void ConfidentPosition::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  confidence_ = 0;
  entity_state_ = 0;
  exception_ = NULL;
}

ConfidentPosition::~ConfidentPosition() {
  // @@protoc_insertion_point(destructor:BioService.ConfidentPosition)
  SharedDtor();
}

void ConfidentPosition::SharedDtor() {
  if (this != default_instance_) {
    delete exception_;
  }
}

void ConfidentPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfidentPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfidentPosition_descriptor_;
}

const ConfidentPosition& ConfidentPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

ConfidentPosition* ConfidentPosition::default_instance_ = NULL;

ConfidentPosition* ConfidentPosition::New(::google::protobuf::Arena* arena) const {
  ConfidentPosition* n = new ConfidentPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfidentPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.ConfidentPosition)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConfidentPosition, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConfidentPosition*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(xpos_, entity_state_);
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ConfidentPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.ConfidentPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float xpos = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ypos;
        break;
      }

      // optional float ypos = 2;
      case 2: {
        if (tag == 21) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ypos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_confidence;
        break;
      }

      // optional float confidence = 3;
      case 3: {
        if (tag == 29) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 4;
      case 4: {
        if (tag == 32) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 5;
      case 5: {
        if (tag == 42) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.ConfidentPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.ConfidentPosition)
  return false;
#undef DO_
}

void ConfidentPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.ConfidentPosition)
  // optional float xpos = 1;
  if (this->xpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->xpos(), output);
  }

  // optional float ypos = 2;
  if (this->ypos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ypos(), output);
  }

  // optional float confidence = 3;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 5;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.ConfidentPosition)
}

::google::protobuf::uint8* ConfidentPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.ConfidentPosition)
  // optional float xpos = 1;
  if (this->xpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->xpos(), target);
  }

  // optional float ypos = 2;
  if (this->ypos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ypos(), target);
  }

  // optional float confidence = 3;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 5;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.ConfidentPosition)
  return target;
}

int ConfidentPosition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.ConfidentPosition)
  int total_size = 0;

  // optional float xpos = 1;
  if (this->xpos() != 0) {
    total_size += 1 + 4;
  }

  // optional float ypos = 2;
  if (this->ypos() != 0) {
    total_size += 1 + 4;
  }

  // optional float confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 5;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfidentPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.ConfidentPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConfidentPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfidentPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.ConfidentPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.ConfidentPosition)
    MergeFrom(*source);
  }
}

void ConfidentPosition::MergeFrom(const ConfidentPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.ConfidentPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.xpos() != 0) {
    set_xpos(from.xpos());
  }
  if (from.ypos() != 0) {
    set_ypos(from.ypos());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void ConfidentPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.ConfidentPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfidentPosition::CopyFrom(const ConfidentPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.ConfidentPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfidentPosition::IsInitialized() const {

  return true;
}

void ConfidentPosition::Swap(ConfidentPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfidentPosition::InternalSwap(ConfidentPosition* other) {
  std::swap(xpos_, other->xpos_);
  std::swap(ypos_, other->ypos_);
  std::swap(confidence_, other->confidence_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfidentPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfidentPosition_descriptor_;
  metadata.reflection = ConfidentPosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfidentPosition

// optional float xpos = 1;
void ConfidentPosition::clear_xpos() {
  xpos_ = 0;
}
 float ConfidentPosition::xpos() const {
  // @@protoc_insertion_point(field_get:BioService.ConfidentPosition.xpos)
  return xpos_;
}
 void ConfidentPosition::set_xpos(float value) {
  
  xpos_ = value;
  // @@protoc_insertion_point(field_set:BioService.ConfidentPosition.xpos)
}

// optional float ypos = 2;
void ConfidentPosition::clear_ypos() {
  ypos_ = 0;
}
 float ConfidentPosition::ypos() const {
  // @@protoc_insertion_point(field_get:BioService.ConfidentPosition.ypos)
  return ypos_;
}
 void ConfidentPosition::set_ypos(float value) {
  
  ypos_ = value;
  // @@protoc_insertion_point(field_set:BioService.ConfidentPosition.ypos)
}

// optional float confidence = 3;
void ConfidentPosition::clear_confidence() {
  confidence_ = 0;
}
 float ConfidentPosition::confidence() const {
  // @@protoc_insertion_point(field_get:BioService.ConfidentPosition.confidence)
  return confidence_;
}
 void ConfidentPosition::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:BioService.ConfidentPosition.confidence)
}

// optional .BioService.EntityState entity_state = 4;
void ConfidentPosition::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState ConfidentPosition::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.ConfidentPosition.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void ConfidentPosition::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.ConfidentPosition.entity_state)
}

// optional .BioService.ServiceException exception = 5;
bool ConfidentPosition::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void ConfidentPosition::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& ConfidentPosition::exception() const {
  // @@protoc_insertion_point(field_get:BioService.ConfidentPosition.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* ConfidentPosition::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.ConfidentPosition.exception)
  return exception_;
}
::BioService::ServiceException* ConfidentPosition::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.ConfidentPosition.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void ConfidentPosition::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.ConfidentPosition.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EyesCharacteristic::kIdFieldNumber;
const int EyesCharacteristic::kLeftEyeFieldNumber;
const int EyesCharacteristic::kRightEyeFieldNumber;
const int EyesCharacteristic::kEntityStateFieldNumber;
const int EyesCharacteristic::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EyesCharacteristic::EyesCharacteristic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.EyesCharacteristic)
}

void EyesCharacteristic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  left_eye_ = const_cast< ::BioService::DetailedEyeCharacteristic*>(&::BioService::DetailedEyeCharacteristic::default_instance());
  right_eye_ = const_cast< ::BioService::DetailedEyeCharacteristic*>(&::BioService::DetailedEyeCharacteristic::default_instance());
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

EyesCharacteristic::EyesCharacteristic(const EyesCharacteristic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.EyesCharacteristic)
}

void EyesCharacteristic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  left_eye_ = NULL;
  right_eye_ = NULL;
  entity_state_ = 0;
  exception_ = NULL;
}

EyesCharacteristic::~EyesCharacteristic() {
  // @@protoc_insertion_point(destructor:BioService.EyesCharacteristic)
  SharedDtor();
}

void EyesCharacteristic::SharedDtor() {
  if (this != default_instance_) {
    delete left_eye_;
    delete right_eye_;
    delete exception_;
  }
}

void EyesCharacteristic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EyesCharacteristic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EyesCharacteristic_descriptor_;
}

const EyesCharacteristic& EyesCharacteristic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

EyesCharacteristic* EyesCharacteristic::default_instance_ = NULL;

EyesCharacteristic* EyesCharacteristic::New(::google::protobuf::Arena* arena) const {
  EyesCharacteristic* n = new EyesCharacteristic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EyesCharacteristic::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.EyesCharacteristic)
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && left_eye_ != NULL) delete left_eye_;
  left_eye_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_eye_ != NULL) delete right_eye_;
  right_eye_ = NULL;
  entity_state_ = 0;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}

bool EyesCharacteristic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.EyesCharacteristic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_left_eye;
        break;
      }

      // optional .BioService.DetailedEyeCharacteristic left_eye = 2;
      case 2: {
        if (tag == 18) {
         parse_left_eye:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_eye()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_right_eye;
        break;
      }

      // optional .BioService.DetailedEyeCharacteristic right_eye = 3;
      case 3: {
        if (tag == 26) {
         parse_right_eye:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_eye()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 4;
      case 4: {
        if (tag == 32) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 5;
      case 5: {
        if (tag == 42) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.EyesCharacteristic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.EyesCharacteristic)
  return false;
#undef DO_
}

void EyesCharacteristic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.EyesCharacteristic)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .BioService.DetailedEyeCharacteristic left_eye = 2;
  if (this->has_left_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->left_eye_, output);
  }

  // optional .BioService.DetailedEyeCharacteristic right_eye = 3;
  if (this->has_right_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->right_eye_, output);
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 5;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.EyesCharacteristic)
}

::google::protobuf::uint8* EyesCharacteristic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.EyesCharacteristic)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .BioService.DetailedEyeCharacteristic left_eye = 2;
  if (this->has_left_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->left_eye_, target);
  }

  // optional .BioService.DetailedEyeCharacteristic right_eye = 3;
  if (this->has_right_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->right_eye_, target);
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 5;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.EyesCharacteristic)
  return target;
}

int EyesCharacteristic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.EyesCharacteristic)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .BioService.DetailedEyeCharacteristic left_eye = 2;
  if (this->has_left_eye()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_eye_);
  }

  // optional .BioService.DetailedEyeCharacteristic right_eye = 3;
  if (this->has_right_eye()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_eye_);
  }

  // optional .BioService.EntityState entity_state = 4;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 5;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EyesCharacteristic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.EyesCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EyesCharacteristic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EyesCharacteristic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.EyesCharacteristic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.EyesCharacteristic)
    MergeFrom(*source);
  }
}

void EyesCharacteristic::MergeFrom(const EyesCharacteristic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.EyesCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_left_eye()) {
    mutable_left_eye()->::BioService::DetailedEyeCharacteristic::MergeFrom(from.left_eye());
  }
  if (from.has_right_eye()) {
    mutable_right_eye()->::BioService::DetailedEyeCharacteristic::MergeFrom(from.right_eye());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void EyesCharacteristic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.EyesCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EyesCharacteristic::CopyFrom(const EyesCharacteristic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.EyesCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EyesCharacteristic::IsInitialized() const {

  return true;
}

void EyesCharacteristic::Swap(EyesCharacteristic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EyesCharacteristic::InternalSwap(EyesCharacteristic* other) {
  std::swap(id_, other->id_);
  std::swap(left_eye_, other->left_eye_);
  std::swap(right_eye_, other->right_eye_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EyesCharacteristic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EyesCharacteristic_descriptor_;
  metadata.reflection = EyesCharacteristic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EyesCharacteristic

// optional int64 id = 1;
void EyesCharacteristic::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 EyesCharacteristic::id() const {
  // @@protoc_insertion_point(field_get:BioService.EyesCharacteristic.id)
  return id_;
}
 void EyesCharacteristic::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.EyesCharacteristic.id)
}

// optional .BioService.DetailedEyeCharacteristic left_eye = 2;
bool EyesCharacteristic::has_left_eye() const {
  return !_is_default_instance_ && left_eye_ != NULL;
}
void EyesCharacteristic::clear_left_eye() {
  if (GetArenaNoVirtual() == NULL && left_eye_ != NULL) delete left_eye_;
  left_eye_ = NULL;
}
const ::BioService::DetailedEyeCharacteristic& EyesCharacteristic::left_eye() const {
  // @@protoc_insertion_point(field_get:BioService.EyesCharacteristic.left_eye)
  return left_eye_ != NULL ? *left_eye_ : *default_instance_->left_eye_;
}
::BioService::DetailedEyeCharacteristic* EyesCharacteristic::mutable_left_eye() {
  
  if (left_eye_ == NULL) {
    left_eye_ = new ::BioService::DetailedEyeCharacteristic;
  }
  // @@protoc_insertion_point(field_mutable:BioService.EyesCharacteristic.left_eye)
  return left_eye_;
}
::BioService::DetailedEyeCharacteristic* EyesCharacteristic::release_left_eye() {
  // @@protoc_insertion_point(field_release:BioService.EyesCharacteristic.left_eye)
  
  ::BioService::DetailedEyeCharacteristic* temp = left_eye_;
  left_eye_ = NULL;
  return temp;
}
void EyesCharacteristic::set_allocated_left_eye(::BioService::DetailedEyeCharacteristic* left_eye) {
  delete left_eye_;
  left_eye_ = left_eye;
  if (left_eye) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.EyesCharacteristic.left_eye)
}

// optional .BioService.DetailedEyeCharacteristic right_eye = 3;
bool EyesCharacteristic::has_right_eye() const {
  return !_is_default_instance_ && right_eye_ != NULL;
}
void EyesCharacteristic::clear_right_eye() {
  if (GetArenaNoVirtual() == NULL && right_eye_ != NULL) delete right_eye_;
  right_eye_ = NULL;
}
const ::BioService::DetailedEyeCharacteristic& EyesCharacteristic::right_eye() const {
  // @@protoc_insertion_point(field_get:BioService.EyesCharacteristic.right_eye)
  return right_eye_ != NULL ? *right_eye_ : *default_instance_->right_eye_;
}
::BioService::DetailedEyeCharacteristic* EyesCharacteristic::mutable_right_eye() {
  
  if (right_eye_ == NULL) {
    right_eye_ = new ::BioService::DetailedEyeCharacteristic;
  }
  // @@protoc_insertion_point(field_mutable:BioService.EyesCharacteristic.right_eye)
  return right_eye_;
}
::BioService::DetailedEyeCharacteristic* EyesCharacteristic::release_right_eye() {
  // @@protoc_insertion_point(field_release:BioService.EyesCharacteristic.right_eye)
  
  ::BioService::DetailedEyeCharacteristic* temp = right_eye_;
  right_eye_ = NULL;
  return temp;
}
void EyesCharacteristic::set_allocated_right_eye(::BioService::DetailedEyeCharacteristic* right_eye) {
  delete right_eye_;
  right_eye_ = right_eye;
  if (right_eye) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.EyesCharacteristic.right_eye)
}

// optional .BioService.EntityState entity_state = 4;
void EyesCharacteristic::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState EyesCharacteristic::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.EyesCharacteristic.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void EyesCharacteristic::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.EyesCharacteristic.entity_state)
}

// optional .BioService.ServiceException exception = 5;
bool EyesCharacteristic::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void EyesCharacteristic::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& EyesCharacteristic::exception() const {
  // @@protoc_insertion_point(field_get:BioService.EyesCharacteristic.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* EyesCharacteristic::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.EyesCharacteristic.exception)
  return exception_;
}
::BioService::ServiceException* EyesCharacteristic::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.EyesCharacteristic.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void EyesCharacteristic::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.EyesCharacteristic.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PortraitCharacteristic::kFacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PortraitCharacteristic::PortraitCharacteristic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.PortraitCharacteristic)
}

void PortraitCharacteristic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PortraitCharacteristic::PortraitCharacteristic(const PortraitCharacteristic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.PortraitCharacteristic)
}

void PortraitCharacteristic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PortraitCharacteristic::~PortraitCharacteristic() {
  // @@protoc_insertion_point(destructor:BioService.PortraitCharacteristic)
  SharedDtor();
}

void PortraitCharacteristic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PortraitCharacteristic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortraitCharacteristic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortraitCharacteristic_descriptor_;
}

const PortraitCharacteristic& PortraitCharacteristic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

PortraitCharacteristic* PortraitCharacteristic::default_instance_ = NULL;

PortraitCharacteristic* PortraitCharacteristic::New(::google::protobuf::Arena* arena) const {
  PortraitCharacteristic* n = new PortraitCharacteristic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PortraitCharacteristic::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.PortraitCharacteristic)
  faces_.Clear();
}

bool PortraitCharacteristic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.PortraitCharacteristic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.FaceCharacteristic faces = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_faces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.PortraitCharacteristic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.PortraitCharacteristic)
  return false;
#undef DO_
}

void PortraitCharacteristic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.PortraitCharacteristic)
  // repeated .BioService.FaceCharacteristic faces = 1;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->faces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.PortraitCharacteristic)
}

::google::protobuf::uint8* PortraitCharacteristic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.PortraitCharacteristic)
  // repeated .BioService.FaceCharacteristic faces = 1;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->faces(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.PortraitCharacteristic)
  return target;
}

int PortraitCharacteristic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.PortraitCharacteristic)
  int total_size = 0;

  // repeated .BioService.FaceCharacteristic faces = 1;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortraitCharacteristic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.PortraitCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PortraitCharacteristic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PortraitCharacteristic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.PortraitCharacteristic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.PortraitCharacteristic)
    MergeFrom(*source);
  }
}

void PortraitCharacteristic::MergeFrom(const PortraitCharacteristic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.PortraitCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  faces_.MergeFrom(from.faces_);
}

void PortraitCharacteristic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.PortraitCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortraitCharacteristic::CopyFrom(const PortraitCharacteristic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.PortraitCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortraitCharacteristic::IsInitialized() const {

  return true;
}

void PortraitCharacteristic::Swap(PortraitCharacteristic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PortraitCharacteristic::InternalSwap(PortraitCharacteristic* other) {
  faces_.UnsafeArenaSwap(&other->faces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PortraitCharacteristic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortraitCharacteristic_descriptor_;
  metadata.reflection = PortraitCharacteristic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PortraitCharacteristic

// repeated .BioService.FaceCharacteristic faces = 1;
int PortraitCharacteristic::faces_size() const {
  return faces_.size();
}
void PortraitCharacteristic::clear_faces() {
  faces_.Clear();
}
const ::BioService::FaceCharacteristic& PortraitCharacteristic::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PortraitCharacteristic.faces)
  return faces_.Get(index);
}
::BioService::FaceCharacteristic* PortraitCharacteristic::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PortraitCharacteristic.faces)
  return faces_.Mutable(index);
}
::BioService::FaceCharacteristic* PortraitCharacteristic::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.PortraitCharacteristic.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
PortraitCharacteristic::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PortraitCharacteristic.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
PortraitCharacteristic::faces() const {
  // @@protoc_insertion_point(field_list:BioService.PortraitCharacteristic.faces)
  return faces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceCharacteristic::kIdFieldNumber;
const int FaceCharacteristic::kBoxFieldNumber;
const int FaceCharacteristic::kEyeDistanceFieldNumber;
const int FaceCharacteristic::kFaceCenterFieldNumber;
const int FaceCharacteristic::kGlassesFieldNumber;
const int FaceCharacteristic::kNaturalSkinColorFieldNumber;
const int FaceCharacteristic::kHeadWidthFieldNumber;
const int FaceCharacteristic::kHeadLengthFieldNumber;
const int FaceCharacteristic::kPoseAngleRollFieldNumber;
const int FaceCharacteristic::kChinFieldNumber;
const int FaceCharacteristic::kCrownFieldNumber;
const int FaceCharacteristic::kLeftEarFieldNumber;
const int FaceCharacteristic::kRigthEarFieldNumber;
const int FaceCharacteristic::kConfidenceFieldNumber;
const int FaceCharacteristic::kMouthClosedFieldNumber;
const int FaceCharacteristic::kEthnithityFieldNumber;
const int FaceCharacteristic::kAgeFieldNumber;
const int FaceCharacteristic::kGenderFieldNumber;
const int FaceCharacteristic::kEyesFieldNumber;
const int FaceCharacteristic::kComplianceIsoFieldNumber;
const int FaceCharacteristic::kGoodFieldNumber;
const int FaceCharacteristic::kBestPracticesFieldNumber;
const int FaceCharacteristic::kPersonidFieldNumber;
const int FaceCharacteristic::kPhotoidFieldNumber;
const int FaceCharacteristic::kEntityStateFieldNumber;
const int FaceCharacteristic::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceCharacteristic::FaceCharacteristic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.FaceCharacteristic)
}

void FaceCharacteristic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  box_ = const_cast< ::BioService::SurroundingBox*>(&::BioService::SurroundingBox::default_instance());
  face_center_ = const_cast< ::BioService::Position*>(&::BioService::Position::default_instance());
  eyes_ = const_cast< ::BioService::EyesCharacteristic*>(&::BioService::EyesCharacteristic::default_instance());
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

FaceCharacteristic::FaceCharacteristic(const FaceCharacteristic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.FaceCharacteristic)
}

void FaceCharacteristic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  box_ = NULL;
  eye_distance_ = 0;
  face_center_ = NULL;
  glasses_ = 0;
  natural_skin_color_ = 0;
  head_width_ = 0;
  head_length_ = 0;
  pose_angle_roll_ = 0;
  chin_ = 0;
  crown_ = 0;
  left_ear_ = 0;
  rigth_ear_ = 0;
  confidence_ = 0;
  mouth_closed_ = 0;
  ethnithity_ = 0;
  age_ = 0;
  gender_ = 0;
  eyes_ = NULL;
  compliance_iso_ = 0;
  good_ = false;
  best_practices_ = false;
  personid_ = GOOGLE_LONGLONG(0);
  photoid_ = GOOGLE_LONGLONG(0);
  entity_state_ = 0;
  exception_ = NULL;
}

FaceCharacteristic::~FaceCharacteristic() {
  // @@protoc_insertion_point(destructor:BioService.FaceCharacteristic)
  SharedDtor();
}

void FaceCharacteristic::SharedDtor() {
  if (this != default_instance_) {
    delete box_;
    delete face_center_;
    delete eyes_;
    delete exception_;
  }
}

void FaceCharacteristic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceCharacteristic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceCharacteristic_descriptor_;
}

const FaceCharacteristic& FaceCharacteristic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

FaceCharacteristic* FaceCharacteristic::default_instance_ = NULL;

FaceCharacteristic* FaceCharacteristic::New(::google::protobuf::Arena* arena) const {
  FaceCharacteristic* n = new FaceCharacteristic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceCharacteristic::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.FaceCharacteristic)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FaceCharacteristic, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FaceCharacteristic*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(eye_distance_, head_length_);
  id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
  if (GetArenaNoVirtual() == NULL && face_center_ != NULL) delete face_center_;
  face_center_ = NULL;
  ZR_(pose_angle_roll_, ethnithity_);
  ZR_(gender_, best_practices_);
  ZR_(personid_, photoid_);
  age_ = 0;
  if (GetArenaNoVirtual() == NULL && eyes_ != NULL) delete eyes_;
  eyes_ = NULL;
  entity_state_ = 0;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool FaceCharacteristic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.FaceCharacteristic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_box;
        break;
      }

      // optional .BioService.SurroundingBox box = 2;
      case 2: {
        if (tag == 18) {
         parse_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_eye_distance;
        break;
      }

      // optional float eye_distance = 3;
      case 3: {
        if (tag == 29) {
         parse_eye_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eye_distance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_face_center;
        break;
      }

      // optional .BioService.Position face_center = 4;
      case 4: {
        if (tag == 34) {
         parse_face_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_face_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_glasses;
        break;
      }

      // optional float glasses = 5;
      case 5: {
        if (tag == 45) {
         parse_glasses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &glasses_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_natural_skin_color;
        break;
      }

      // optional float natural_skin_color = 6;
      case 6: {
        if (tag == 53) {
         parse_natural_skin_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &natural_skin_color_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_head_width;
        break;
      }

      // optional float head_width = 7;
      case 7: {
        if (tag == 61) {
         parse_head_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &head_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_head_length;
        break;
      }

      // optional float head_length = 8;
      case 8: {
        if (tag == 69) {
         parse_head_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &head_length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_pose_angle_roll;
        break;
      }

      // optional float pose_angle_roll = 9;
      case 9: {
        if (tag == 77) {
         parse_pose_angle_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pose_angle_roll_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_chin;
        break;
      }

      // optional float chin = 10;
      case 10: {
        if (tag == 85) {
         parse_chin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_crown;
        break;
      }

      // optional float crown = 11;
      case 11: {
        if (tag == 93) {
         parse_crown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &crown_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_left_ear;
        break;
      }

      // optional float left_ear = 12;
      case 12: {
        if (tag == 101) {
         parse_left_ear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_ear_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_rigth_ear;
        break;
      }

      // optional float rigth_ear = 13;
      case 13: {
        if (tag == 109) {
         parse_rigth_ear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rigth_ear_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_confidence;
        break;
      }

      // optional float confidence = 14;
      case 14: {
        if (tag == 117) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_mouth_closed;
        break;
      }

      // optional float mouth_closed = 15;
      case 15: {
        if (tag == 125) {
         parse_mouth_closed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mouth_closed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ethnithity;
        break;
      }

      // optional .BioService.Ethnicity ethnithity = 16;
      case 16: {
        if (tag == 128) {
         parse_ethnithity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ethnithity(static_cast< ::BioService::Ethnicity >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_age;
        break;
      }

      // optional sfixed32 age = 17;
      case 17: {
        if (tag == 141) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &age_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_gender;
        break;
      }

      // optional .BioService.Gender gender = 18;
      case 18: {
        if (tag == 144) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gender(static_cast< ::BioService::Gender >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_eyes;
        break;
      }

      // optional .BioService.EyesCharacteristic eyes = 19;
      case 19: {
        if (tag == 154) {
         parse_eyes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eyes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_compliance_iso;
        break;
      }

      // optional int32 compliance_iso = 20;
      case 20: {
        if (tag == 160) {
         parse_compliance_iso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compliance_iso_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_good;
        break;
      }

      // optional bool good = 21;
      case 21: {
        if (tag == 168) {
         parse_good:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &good_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_best_practices;
        break;
      }

      // optional bool best_practices = 22;
      case 22: {
        if (tag == 176) {
         parse_best_practices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &best_practices_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_personid;
        break;
      }

      // optional int64 personid = 23;
      case 23: {
        if (tag == 184) {
         parse_personid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &personid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_photoid;
        break;
      }

      // optional int64 photoid = 24;
      case 24: {
        if (tag == 192) {
         parse_photoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &photoid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 25;
      case 25: {
        if (tag == 200) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 26;
      case 26: {
        if (tag == 210) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.FaceCharacteristic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.FaceCharacteristic)
  return false;
#undef DO_
}

void FaceCharacteristic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.FaceCharacteristic)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .BioService.SurroundingBox box = 2;
  if (this->has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->box_, output);
  }

  // optional float eye_distance = 3;
  if (this->eye_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eye_distance(), output);
  }

  // optional .BioService.Position face_center = 4;
  if (this->has_face_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->face_center_, output);
  }

  // optional float glasses = 5;
  if (this->glasses() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->glasses(), output);
  }

  // optional float natural_skin_color = 6;
  if (this->natural_skin_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->natural_skin_color(), output);
  }

  // optional float head_width = 7;
  if (this->head_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->head_width(), output);
  }

  // optional float head_length = 8;
  if (this->head_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->head_length(), output);
  }

  // optional float pose_angle_roll = 9;
  if (this->pose_angle_roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pose_angle_roll(), output);
  }

  // optional float chin = 10;
  if (this->chin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->chin(), output);
  }

  // optional float crown = 11;
  if (this->crown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->crown(), output);
  }

  // optional float left_ear = 12;
  if (this->left_ear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->left_ear(), output);
  }

  // optional float rigth_ear = 13;
  if (this->rigth_ear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->rigth_ear(), output);
  }

  // optional float confidence = 14;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->confidence(), output);
  }

  // optional float mouth_closed = 15;
  if (this->mouth_closed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->mouth_closed(), output);
  }

  // optional .BioService.Ethnicity ethnithity = 16;
  if (this->ethnithity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->ethnithity(), output);
  }

  // optional sfixed32 age = 17;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(17, this->age(), output);
  }

  // optional .BioService.Gender gender = 18;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->gender(), output);
  }

  // optional .BioService.EyesCharacteristic eyes = 19;
  if (this->has_eyes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->eyes_, output);
  }

  // optional int32 compliance_iso = 20;
  if (this->compliance_iso() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->compliance_iso(), output);
  }

  // optional bool good = 21;
  if (this->good() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->good(), output);
  }

  // optional bool best_practices = 22;
  if (this->best_practices() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->best_practices(), output);
  }

  // optional int64 personid = 23;
  if (this->personid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->personid(), output);
  }

  // optional int64 photoid = 24;
  if (this->photoid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->photoid(), output);
  }

  // optional .BioService.EntityState entity_state = 25;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 26;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.FaceCharacteristic)
}

::google::protobuf::uint8* FaceCharacteristic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.FaceCharacteristic)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .BioService.SurroundingBox box = 2;
  if (this->has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->box_, target);
  }

  // optional float eye_distance = 3;
  if (this->eye_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eye_distance(), target);
  }

  // optional .BioService.Position face_center = 4;
  if (this->has_face_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->face_center_, target);
  }

  // optional float glasses = 5;
  if (this->glasses() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->glasses(), target);
  }

  // optional float natural_skin_color = 6;
  if (this->natural_skin_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->natural_skin_color(), target);
  }

  // optional float head_width = 7;
  if (this->head_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->head_width(), target);
  }

  // optional float head_length = 8;
  if (this->head_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->head_length(), target);
  }

  // optional float pose_angle_roll = 9;
  if (this->pose_angle_roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pose_angle_roll(), target);
  }

  // optional float chin = 10;
  if (this->chin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->chin(), target);
  }

  // optional float crown = 11;
  if (this->crown() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->crown(), target);
  }

  // optional float left_ear = 12;
  if (this->left_ear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->left_ear(), target);
  }

  // optional float rigth_ear = 13;
  if (this->rigth_ear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->rigth_ear(), target);
  }

  // optional float confidence = 14;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->confidence(), target);
  }

  // optional float mouth_closed = 15;
  if (this->mouth_closed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->mouth_closed(), target);
  }

  // optional .BioService.Ethnicity ethnithity = 16;
  if (this->ethnithity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->ethnithity(), target);
  }

  // optional sfixed32 age = 17;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(17, this->age(), target);
  }

  // optional .BioService.Gender gender = 18;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->gender(), target);
  }

  // optional .BioService.EyesCharacteristic eyes = 19;
  if (this->has_eyes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, *this->eyes_, target);
  }

  // optional int32 compliance_iso = 20;
  if (this->compliance_iso() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->compliance_iso(), target);
  }

  // optional bool good = 21;
  if (this->good() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->good(), target);
  }

  // optional bool best_practices = 22;
  if (this->best_practices() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->best_practices(), target);
  }

  // optional int64 personid = 23;
  if (this->personid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->personid(), target);
  }

  // optional int64 photoid = 24;
  if (this->photoid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->photoid(), target);
  }

  // optional .BioService.EntityState entity_state = 25;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 26;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.FaceCharacteristic)
  return target;
}

int FaceCharacteristic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.FaceCharacteristic)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .BioService.SurroundingBox box = 2;
  if (this->has_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->box_);
  }

  // optional float eye_distance = 3;
  if (this->eye_distance() != 0) {
    total_size += 1 + 4;
  }

  // optional .BioService.Position face_center = 4;
  if (this->has_face_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->face_center_);
  }

  // optional float glasses = 5;
  if (this->glasses() != 0) {
    total_size += 1 + 4;
  }

  // optional float natural_skin_color = 6;
  if (this->natural_skin_color() != 0) {
    total_size += 1 + 4;
  }

  // optional float head_width = 7;
  if (this->head_width() != 0) {
    total_size += 1 + 4;
  }

  // optional float head_length = 8;
  if (this->head_length() != 0) {
    total_size += 1 + 4;
  }

  // optional float pose_angle_roll = 9;
  if (this->pose_angle_roll() != 0) {
    total_size += 1 + 4;
  }

  // optional float chin = 10;
  if (this->chin() != 0) {
    total_size += 1 + 4;
  }

  // optional float crown = 11;
  if (this->crown() != 0) {
    total_size += 1 + 4;
  }

  // optional float left_ear = 12;
  if (this->left_ear() != 0) {
    total_size += 1 + 4;
  }

  // optional float rigth_ear = 13;
  if (this->rigth_ear() != 0) {
    total_size += 1 + 4;
  }

  // optional float confidence = 14;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional float mouth_closed = 15;
  if (this->mouth_closed() != 0) {
    total_size += 1 + 4;
  }

  // optional .BioService.Ethnicity ethnithity = 16;
  if (this->ethnithity() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ethnithity());
  }

  // optional sfixed32 age = 17;
  if (this->age() != 0) {
    total_size += 2 + 4;
  }

  // optional .BioService.Gender gender = 18;
  if (this->gender() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
  }

  // optional .BioService.EyesCharacteristic eyes = 19;
  if (this->has_eyes()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->eyes_);
  }

  // optional int32 compliance_iso = 20;
  if (this->compliance_iso() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->compliance_iso());
  }

  // optional bool good = 21;
  if (this->good() != 0) {
    total_size += 2 + 1;
  }

  // optional bool best_practices = 22;
  if (this->best_practices() != 0) {
    total_size += 2 + 1;
  }

  // optional int64 personid = 23;
  if (this->personid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->personid());
  }

  // optional int64 photoid = 24;
  if (this->photoid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->photoid());
  }

  // optional .BioService.EntityState entity_state = 25;
  if (this->entity_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 26;
  if (this->has_exception()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceCharacteristic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.FaceCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FaceCharacteristic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceCharacteristic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.FaceCharacteristic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.FaceCharacteristic)
    MergeFrom(*source);
  }
}

void FaceCharacteristic::MergeFrom(const FaceCharacteristic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.FaceCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_box()) {
    mutable_box()->::BioService::SurroundingBox::MergeFrom(from.box());
  }
  if (from.eye_distance() != 0) {
    set_eye_distance(from.eye_distance());
  }
  if (from.has_face_center()) {
    mutable_face_center()->::BioService::Position::MergeFrom(from.face_center());
  }
  if (from.glasses() != 0) {
    set_glasses(from.glasses());
  }
  if (from.natural_skin_color() != 0) {
    set_natural_skin_color(from.natural_skin_color());
  }
  if (from.head_width() != 0) {
    set_head_width(from.head_width());
  }
  if (from.head_length() != 0) {
    set_head_length(from.head_length());
  }
  if (from.pose_angle_roll() != 0) {
    set_pose_angle_roll(from.pose_angle_roll());
  }
  if (from.chin() != 0) {
    set_chin(from.chin());
  }
  if (from.crown() != 0) {
    set_crown(from.crown());
  }
  if (from.left_ear() != 0) {
    set_left_ear(from.left_ear());
  }
  if (from.rigth_ear() != 0) {
    set_rigth_ear(from.rigth_ear());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.mouth_closed() != 0) {
    set_mouth_closed(from.mouth_closed());
  }
  if (from.ethnithity() != 0) {
    set_ethnithity(from.ethnithity());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.has_eyes()) {
    mutable_eyes()->::BioService::EyesCharacteristic::MergeFrom(from.eyes());
  }
  if (from.compliance_iso() != 0) {
    set_compliance_iso(from.compliance_iso());
  }
  if (from.good() != 0) {
    set_good(from.good());
  }
  if (from.best_practices() != 0) {
    set_best_practices(from.best_practices());
  }
  if (from.personid() != 0) {
    set_personid(from.personid());
  }
  if (from.photoid() != 0) {
    set_photoid(from.photoid());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void FaceCharacteristic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.FaceCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceCharacteristic::CopyFrom(const FaceCharacteristic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.FaceCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceCharacteristic::IsInitialized() const {

  return true;
}

void FaceCharacteristic::Swap(FaceCharacteristic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceCharacteristic::InternalSwap(FaceCharacteristic* other) {
  std::swap(id_, other->id_);
  std::swap(box_, other->box_);
  std::swap(eye_distance_, other->eye_distance_);
  std::swap(face_center_, other->face_center_);
  std::swap(glasses_, other->glasses_);
  std::swap(natural_skin_color_, other->natural_skin_color_);
  std::swap(head_width_, other->head_width_);
  std::swap(head_length_, other->head_length_);
  std::swap(pose_angle_roll_, other->pose_angle_roll_);
  std::swap(chin_, other->chin_);
  std::swap(crown_, other->crown_);
  std::swap(left_ear_, other->left_ear_);
  std::swap(rigth_ear_, other->rigth_ear_);
  std::swap(confidence_, other->confidence_);
  std::swap(mouth_closed_, other->mouth_closed_);
  std::swap(ethnithity_, other->ethnithity_);
  std::swap(age_, other->age_);
  std::swap(gender_, other->gender_);
  std::swap(eyes_, other->eyes_);
  std::swap(compliance_iso_, other->compliance_iso_);
  std::swap(good_, other->good_);
  std::swap(best_practices_, other->best_practices_);
  std::swap(personid_, other->personid_);
  std::swap(photoid_, other->photoid_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceCharacteristic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceCharacteristic_descriptor_;
  metadata.reflection = FaceCharacteristic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceCharacteristic

// optional int64 id = 1;
void FaceCharacteristic::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FaceCharacteristic::id() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.id)
  return id_;
}
 void FaceCharacteristic::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.id)
}

// optional .BioService.SurroundingBox box = 2;
bool FaceCharacteristic::has_box() const {
  return !_is_default_instance_ && box_ != NULL;
}
void FaceCharacteristic::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
const ::BioService::SurroundingBox& FaceCharacteristic::box() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
::BioService::SurroundingBox* FaceCharacteristic::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::BioService::SurroundingBox;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FaceCharacteristic.box)
  return box_;
}
::BioService::SurroundingBox* FaceCharacteristic::release_box() {
  // @@protoc_insertion_point(field_release:BioService.FaceCharacteristic.box)
  
  ::BioService::SurroundingBox* temp = box_;
  box_ = NULL;
  return temp;
}
void FaceCharacteristic::set_allocated_box(::BioService::SurroundingBox* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceCharacteristic.box)
}

// optional float eye_distance = 3;
void FaceCharacteristic::clear_eye_distance() {
  eye_distance_ = 0;
}
 float FaceCharacteristic::eye_distance() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.eye_distance)
  return eye_distance_;
}
 void FaceCharacteristic::set_eye_distance(float value) {
  
  eye_distance_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.eye_distance)
}

// optional .BioService.Position face_center = 4;
bool FaceCharacteristic::has_face_center() const {
  return !_is_default_instance_ && face_center_ != NULL;
}
void FaceCharacteristic::clear_face_center() {
  if (GetArenaNoVirtual() == NULL && face_center_ != NULL) delete face_center_;
  face_center_ = NULL;
}
const ::BioService::Position& FaceCharacteristic::face_center() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.face_center)
  return face_center_ != NULL ? *face_center_ : *default_instance_->face_center_;
}
::BioService::Position* FaceCharacteristic::mutable_face_center() {
  
  if (face_center_ == NULL) {
    face_center_ = new ::BioService::Position;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FaceCharacteristic.face_center)
  return face_center_;
}
::BioService::Position* FaceCharacteristic::release_face_center() {
  // @@protoc_insertion_point(field_release:BioService.FaceCharacteristic.face_center)
  
  ::BioService::Position* temp = face_center_;
  face_center_ = NULL;
  return temp;
}
void FaceCharacteristic::set_allocated_face_center(::BioService::Position* face_center) {
  delete face_center_;
  face_center_ = face_center;
  if (face_center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceCharacteristic.face_center)
}

// optional float glasses = 5;
void FaceCharacteristic::clear_glasses() {
  glasses_ = 0;
}
 float FaceCharacteristic::glasses() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.glasses)
  return glasses_;
}
 void FaceCharacteristic::set_glasses(float value) {
  
  glasses_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.glasses)
}

// optional float natural_skin_color = 6;
void FaceCharacteristic::clear_natural_skin_color() {
  natural_skin_color_ = 0;
}
 float FaceCharacteristic::natural_skin_color() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.natural_skin_color)
  return natural_skin_color_;
}
 void FaceCharacteristic::set_natural_skin_color(float value) {
  
  natural_skin_color_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.natural_skin_color)
}

// optional float head_width = 7;
void FaceCharacteristic::clear_head_width() {
  head_width_ = 0;
}
 float FaceCharacteristic::head_width() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.head_width)
  return head_width_;
}
 void FaceCharacteristic::set_head_width(float value) {
  
  head_width_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.head_width)
}

// optional float head_length = 8;
void FaceCharacteristic::clear_head_length() {
  head_length_ = 0;
}
 float FaceCharacteristic::head_length() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.head_length)
  return head_length_;
}
 void FaceCharacteristic::set_head_length(float value) {
  
  head_length_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.head_length)
}

// optional float pose_angle_roll = 9;
void FaceCharacteristic::clear_pose_angle_roll() {
  pose_angle_roll_ = 0;
}
 float FaceCharacteristic::pose_angle_roll() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.pose_angle_roll)
  return pose_angle_roll_;
}
 void FaceCharacteristic::set_pose_angle_roll(float value) {
  
  pose_angle_roll_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.pose_angle_roll)
}

// optional float chin = 10;
void FaceCharacteristic::clear_chin() {
  chin_ = 0;
}
 float FaceCharacteristic::chin() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.chin)
  return chin_;
}
 void FaceCharacteristic::set_chin(float value) {
  
  chin_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.chin)
}

// optional float crown = 11;
void FaceCharacteristic::clear_crown() {
  crown_ = 0;
}
 float FaceCharacteristic::crown() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.crown)
  return crown_;
}
 void FaceCharacteristic::set_crown(float value) {
  
  crown_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.crown)
}

// optional float left_ear = 12;
void FaceCharacteristic::clear_left_ear() {
  left_ear_ = 0;
}
 float FaceCharacteristic::left_ear() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.left_ear)
  return left_ear_;
}
 void FaceCharacteristic::set_left_ear(float value) {
  
  left_ear_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.left_ear)
}

// optional float rigth_ear = 13;
void FaceCharacteristic::clear_rigth_ear() {
  rigth_ear_ = 0;
}
 float FaceCharacteristic::rigth_ear() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.rigth_ear)
  return rigth_ear_;
}
 void FaceCharacteristic::set_rigth_ear(float value) {
  
  rigth_ear_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.rigth_ear)
}

// optional float confidence = 14;
void FaceCharacteristic::clear_confidence() {
  confidence_ = 0;
}
 float FaceCharacteristic::confidence() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.confidence)
  return confidence_;
}
 void FaceCharacteristic::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.confidence)
}

// optional float mouth_closed = 15;
void FaceCharacteristic::clear_mouth_closed() {
  mouth_closed_ = 0;
}
 float FaceCharacteristic::mouth_closed() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.mouth_closed)
  return mouth_closed_;
}
 void FaceCharacteristic::set_mouth_closed(float value) {
  
  mouth_closed_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.mouth_closed)
}

// optional .BioService.Ethnicity ethnithity = 16;
void FaceCharacteristic::clear_ethnithity() {
  ethnithity_ = 0;
}
 ::BioService::Ethnicity FaceCharacteristic::ethnithity() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.ethnithity)
  return static_cast< ::BioService::Ethnicity >(ethnithity_);
}
 void FaceCharacteristic::set_ethnithity(::BioService::Ethnicity value) {
  
  ethnithity_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.ethnithity)
}

// optional sfixed32 age = 17;
void FaceCharacteristic::clear_age() {
  age_ = 0;
}
 ::google::protobuf::int32 FaceCharacteristic::age() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.age)
  return age_;
}
 void FaceCharacteristic::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.age)
}

// optional .BioService.Gender gender = 18;
void FaceCharacteristic::clear_gender() {
  gender_ = 0;
}
 ::BioService::Gender FaceCharacteristic::gender() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.gender)
  return static_cast< ::BioService::Gender >(gender_);
}
 void FaceCharacteristic::set_gender(::BioService::Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.gender)
}

// optional .BioService.EyesCharacteristic eyes = 19;
bool FaceCharacteristic::has_eyes() const {
  return !_is_default_instance_ && eyes_ != NULL;
}
void FaceCharacteristic::clear_eyes() {
  if (GetArenaNoVirtual() == NULL && eyes_ != NULL) delete eyes_;
  eyes_ = NULL;
}
const ::BioService::EyesCharacteristic& FaceCharacteristic::eyes() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.eyes)
  return eyes_ != NULL ? *eyes_ : *default_instance_->eyes_;
}
::BioService::EyesCharacteristic* FaceCharacteristic::mutable_eyes() {
  
  if (eyes_ == NULL) {
    eyes_ = new ::BioService::EyesCharacteristic;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FaceCharacteristic.eyes)
  return eyes_;
}
::BioService::EyesCharacteristic* FaceCharacteristic::release_eyes() {
  // @@protoc_insertion_point(field_release:BioService.FaceCharacteristic.eyes)
  
  ::BioService::EyesCharacteristic* temp = eyes_;
  eyes_ = NULL;
  return temp;
}
void FaceCharacteristic::set_allocated_eyes(::BioService::EyesCharacteristic* eyes) {
  delete eyes_;
  eyes_ = eyes;
  if (eyes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceCharacteristic.eyes)
}

// optional int32 compliance_iso = 20;
void FaceCharacteristic::clear_compliance_iso() {
  compliance_iso_ = 0;
}
 ::google::protobuf::int32 FaceCharacteristic::compliance_iso() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.compliance_iso)
  return compliance_iso_;
}
 void FaceCharacteristic::set_compliance_iso(::google::protobuf::int32 value) {
  
  compliance_iso_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.compliance_iso)
}

// optional bool good = 21;
void FaceCharacteristic::clear_good() {
  good_ = false;
}
 bool FaceCharacteristic::good() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.good)
  return good_;
}
 void FaceCharacteristic::set_good(bool value) {
  
  good_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.good)
}

// optional bool best_practices = 22;
void FaceCharacteristic::clear_best_practices() {
  best_practices_ = false;
}
 bool FaceCharacteristic::best_practices() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.best_practices)
  return best_practices_;
}
 void FaceCharacteristic::set_best_practices(bool value) {
  
  best_practices_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.best_practices)
}

// optional int64 personid = 23;
void FaceCharacteristic::clear_personid() {
  personid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FaceCharacteristic::personid() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.personid)
  return personid_;
}
 void FaceCharacteristic::set_personid(::google::protobuf::int64 value) {
  
  personid_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.personid)
}

// optional int64 photoid = 24;
void FaceCharacteristic::clear_photoid() {
  photoid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FaceCharacteristic::photoid() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.photoid)
  return photoid_;
}
 void FaceCharacteristic::set_photoid(::google::protobuf::int64 value) {
  
  photoid_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.photoid)
}

// optional .BioService.EntityState entity_state = 25;
void FaceCharacteristic::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState FaceCharacteristic::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void FaceCharacteristic::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.FaceCharacteristic.entity_state)
}

// optional .BioService.ServiceException exception = 26;
bool FaceCharacteristic::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void FaceCharacteristic::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& FaceCharacteristic::exception() const {
  // @@protoc_insertion_point(field_get:BioService.FaceCharacteristic.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* FaceCharacteristic::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FaceCharacteristic.exception)
  return exception_;
}
::BioService::ServiceException* FaceCharacteristic::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.FaceCharacteristic.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void FaceCharacteristic::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceCharacteristic.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Position)
}

void Position::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Position::Position(const Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Position)
}

void Position::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:BioService.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Position)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Position, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Position*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Position)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Position)
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Position)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Position)
  return target;
}

int Position::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Position)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Position* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {

  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// optional float x = 1;
void Position::clear_x() {
  x_ = 0;
}
 float Position::x() const {
  // @@protoc_insertion_point(field_get:BioService.Position.x)
  return x_;
}
 void Position::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:BioService.Position.x)
}

// optional float y = 2;
void Position::clear_y() {
  y_ = 0;
}
 float Position::y() const {
  // @@protoc_insertion_point(field_get:BioService.Position.y)
  return y_;
}
 void Position::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:BioService.Position.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SurroundingBox::kBeginFieldNumber;
const int SurroundingBox::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SurroundingBox::SurroundingBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.SurroundingBox)
}

void SurroundingBox::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  begin_ = const_cast< ::BioService::Position*>(&::BioService::Position::default_instance());
  end_ = const_cast< ::BioService::Position*>(&::BioService::Position::default_instance());
}

SurroundingBox::SurroundingBox(const SurroundingBox& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.SurroundingBox)
}

void SurroundingBox::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  begin_ = NULL;
  end_ = NULL;
}

SurroundingBox::~SurroundingBox() {
  // @@protoc_insertion_point(destructor:BioService.SurroundingBox)
  SharedDtor();
}

void SurroundingBox::SharedDtor() {
  if (this != default_instance_) {
    delete begin_;
    delete end_;
  }
}

void SurroundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SurroundingBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SurroundingBox_descriptor_;
}

const SurroundingBox& SurroundingBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

SurroundingBox* SurroundingBox::default_instance_ = NULL;

SurroundingBox* SurroundingBox::New(::google::protobuf::Arena* arena) const {
  SurroundingBox* n = new SurroundingBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SurroundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.SurroundingBox)
  if (GetArenaNoVirtual() == NULL && begin_ != NULL) delete begin_;
  begin_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
}

bool SurroundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.SurroundingBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.Position begin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }

      // optional .BioService.Position end = 2;
      case 2: {
        if (tag == 18) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.SurroundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.SurroundingBox)
  return false;
#undef DO_
}

void SurroundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.SurroundingBox)
  // optional .BioService.Position begin = 1;
  if (this->has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->begin_, output);
  }

  // optional .BioService.Position end = 2;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->end_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.SurroundingBox)
}

::google::protobuf::uint8* SurroundingBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.SurroundingBox)
  // optional .BioService.Position begin = 1;
  if (this->has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->begin_, target);
  }

  // optional .BioService.Position end = 2;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->end_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.SurroundingBox)
  return target;
}

int SurroundingBox::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.SurroundingBox)
  int total_size = 0;

  // optional .BioService.Position begin = 1;
  if (this->has_begin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->begin_);
  }

  // optional .BioService.Position end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurroundingBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.SurroundingBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SurroundingBox* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SurroundingBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.SurroundingBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.SurroundingBox)
    MergeFrom(*source);
  }
}

void SurroundingBox::MergeFrom(const SurroundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.SurroundingBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_begin()) {
    mutable_begin()->::BioService::Position::MergeFrom(from.begin());
  }
  if (from.has_end()) {
    mutable_end()->::BioService::Position::MergeFrom(from.end());
  }
}

void SurroundingBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.SurroundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurroundingBox::CopyFrom(const SurroundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.SurroundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurroundingBox::IsInitialized() const {

  return true;
}

void SurroundingBox::Swap(SurroundingBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SurroundingBox::InternalSwap(SurroundingBox* other) {
  std::swap(begin_, other->begin_);
  std::swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SurroundingBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SurroundingBox_descriptor_;
  metadata.reflection = SurroundingBox_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SurroundingBox

// optional .BioService.Position begin = 1;
bool SurroundingBox::has_begin() const {
  return !_is_default_instance_ && begin_ != NULL;
}
void SurroundingBox::clear_begin() {
  if (GetArenaNoVirtual() == NULL && begin_ != NULL) delete begin_;
  begin_ = NULL;
}
const ::BioService::Position& SurroundingBox::begin() const {
  // @@protoc_insertion_point(field_get:BioService.SurroundingBox.begin)
  return begin_ != NULL ? *begin_ : *default_instance_->begin_;
}
::BioService::Position* SurroundingBox::mutable_begin() {
  
  if (begin_ == NULL) {
    begin_ = new ::BioService::Position;
  }
  // @@protoc_insertion_point(field_mutable:BioService.SurroundingBox.begin)
  return begin_;
}
::BioService::Position* SurroundingBox::release_begin() {
  // @@protoc_insertion_point(field_release:BioService.SurroundingBox.begin)
  
  ::BioService::Position* temp = begin_;
  begin_ = NULL;
  return temp;
}
void SurroundingBox::set_allocated_begin(::BioService::Position* begin) {
  delete begin_;
  begin_ = begin;
  if (begin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.SurroundingBox.begin)
}

// optional .BioService.Position end = 2;
bool SurroundingBox::has_end() const {
  return !_is_default_instance_ && end_ != NULL;
}
void SurroundingBox::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
}
const ::BioService::Position& SurroundingBox::end() const {
  // @@protoc_insertion_point(field_get:BioService.SurroundingBox.end)
  return end_ != NULL ? *end_ : *default_instance_->end_;
}
::BioService::Position* SurroundingBox::mutable_end() {
  
  if (end_ == NULL) {
    end_ = new ::BioService::Position;
  }
  // @@protoc_insertion_point(field_mutable:BioService.SurroundingBox.end)
  return end_;
}
::BioService::Position* SurroundingBox::release_end() {
  // @@protoc_insertion_point(field_release:BioService.SurroundingBox.end)
  
  ::BioService::Position* temp = end_;
  end_ = NULL;
  return temp;
}
void SurroundingBox::set_allocated_end(::BioService::Position* end) {
  delete end_;
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.SurroundingBox.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetailedEyeCharacteristic::kPositionFieldNumber;
const int DetailedEyeCharacteristic::kIsOpenFieldNumber;
const int DetailedEyeCharacteristic::kIsGazeFrontalFieldNumber;
const int DetailedEyeCharacteristic::kIsRedFieldNumber;
const int DetailedEyeCharacteristic::kIsTinedFieldNumber;
const int DetailedEyeCharacteristic::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetailedEyeCharacteristic::DetailedEyeCharacteristic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.DetailedEyeCharacteristic)
}

void DetailedEyeCharacteristic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::BioService::Position*>(&::BioService::Position::default_instance());
}

DetailedEyeCharacteristic::DetailedEyeCharacteristic(const DetailedEyeCharacteristic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.DetailedEyeCharacteristic)
}

void DetailedEyeCharacteristic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  position_ = NULL;
  is_open_ = false;
  is_gaze_frontal_ = 0;
  is_red_ = false;
  is_tined_ = false;
  confidence_ = 0;
}

DetailedEyeCharacteristic::~DetailedEyeCharacteristic() {
  // @@protoc_insertion_point(destructor:BioService.DetailedEyeCharacteristic)
  SharedDtor();
}

void DetailedEyeCharacteristic::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void DetailedEyeCharacteristic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetailedEyeCharacteristic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetailedEyeCharacteristic_descriptor_;
}

const DetailedEyeCharacteristic& DetailedEyeCharacteristic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

DetailedEyeCharacteristic* DetailedEyeCharacteristic::default_instance_ = NULL;

DetailedEyeCharacteristic* DetailedEyeCharacteristic::New(::google::protobuf::Arena* arena) const {
  DetailedEyeCharacteristic* n = new DetailedEyeCharacteristic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetailedEyeCharacteristic::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.DetailedEyeCharacteristic)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DetailedEyeCharacteristic, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DetailedEyeCharacteristic*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_gaze_frontal_, confidence_);
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool DetailedEyeCharacteristic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.DetailedEyeCharacteristic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.Position position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_open;
        break;
      }

      // optional bool is_open = 2;
      case 2: {
        if (tag == 16) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_is_gaze_frontal;
        break;
      }

      // optional float is_gaze_frontal = 3;
      case 3: {
        if (tag == 29) {
         parse_is_gaze_frontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &is_gaze_frontal_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_red;
        break;
      }

      // optional bool is_red = 4;
      case 4: {
        if (tag == 32) {
         parse_is_red:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_red_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_tined;
        break;
      }

      // optional bool is_tined = 5;
      case 5: {
        if (tag == 40) {
         parse_is_tined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tined_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_confidence;
        break;
      }

      // optional float confidence = 6;
      case 6: {
        if (tag == 53) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.DetailedEyeCharacteristic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.DetailedEyeCharacteristic)
  return false;
#undef DO_
}

void DetailedEyeCharacteristic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.DetailedEyeCharacteristic)
  // optional .BioService.Position position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional bool is_open = 2;
  if (this->is_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_open(), output);
  }

  // optional float is_gaze_frontal = 3;
  if (this->is_gaze_frontal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->is_gaze_frontal(), output);
  }

  // optional bool is_red = 4;
  if (this->is_red() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_red(), output);
  }

  // optional bool is_tined = 5;
  if (this->is_tined() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_tined(), output);
  }

  // optional float confidence = 6;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.DetailedEyeCharacteristic)
}

::google::protobuf::uint8* DetailedEyeCharacteristic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.DetailedEyeCharacteristic)
  // optional .BioService.Position position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->position_, target);
  }

  // optional bool is_open = 2;
  if (this->is_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_open(), target);
  }

  // optional float is_gaze_frontal = 3;
  if (this->is_gaze_frontal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->is_gaze_frontal(), target);
  }

  // optional bool is_red = 4;
  if (this->is_red() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_red(), target);
  }

  // optional bool is_tined = 5;
  if (this->is_tined() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_tined(), target);
  }

  // optional float confidence = 6;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.DetailedEyeCharacteristic)
  return target;
}

int DetailedEyeCharacteristic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.DetailedEyeCharacteristic)
  int total_size = 0;

  // optional .BioService.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional bool is_open = 2;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  // optional float is_gaze_frontal = 3;
  if (this->is_gaze_frontal() != 0) {
    total_size += 1 + 4;
  }

  // optional bool is_red = 4;
  if (this->is_red() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_tined = 5;
  if (this->is_tined() != 0) {
    total_size += 1 + 1;
  }

  // optional float confidence = 6;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetailedEyeCharacteristic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.DetailedEyeCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DetailedEyeCharacteristic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetailedEyeCharacteristic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.DetailedEyeCharacteristic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.DetailedEyeCharacteristic)
    MergeFrom(*source);
  }
}

void DetailedEyeCharacteristic::MergeFrom(const DetailedEyeCharacteristic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.DetailedEyeCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_position()) {
    mutable_position()->::BioService::Position::MergeFrom(from.position());
  }
  if (from.is_open() != 0) {
    set_is_open(from.is_open());
  }
  if (from.is_gaze_frontal() != 0) {
    set_is_gaze_frontal(from.is_gaze_frontal());
  }
  if (from.is_red() != 0) {
    set_is_red(from.is_red());
  }
  if (from.is_tined() != 0) {
    set_is_tined(from.is_tined());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void DetailedEyeCharacteristic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.DetailedEyeCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedEyeCharacteristic::CopyFrom(const DetailedEyeCharacteristic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.DetailedEyeCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedEyeCharacteristic::IsInitialized() const {

  return true;
}

void DetailedEyeCharacteristic::Swap(DetailedEyeCharacteristic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetailedEyeCharacteristic::InternalSwap(DetailedEyeCharacteristic* other) {
  std::swap(position_, other->position_);
  std::swap(is_open_, other->is_open_);
  std::swap(is_gaze_frontal_, other->is_gaze_frontal_);
  std::swap(is_red_, other->is_red_);
  std::swap(is_tined_, other->is_tined_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetailedEyeCharacteristic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetailedEyeCharacteristic_descriptor_;
  metadata.reflection = DetailedEyeCharacteristic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetailedEyeCharacteristic

// optional .BioService.Position position = 1;
bool DetailedEyeCharacteristic::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void DetailedEyeCharacteristic::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::BioService::Position& DetailedEyeCharacteristic::position() const {
  // @@protoc_insertion_point(field_get:BioService.DetailedEyeCharacteristic.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::BioService::Position* DetailedEyeCharacteristic::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::BioService::Position;
  }
  // @@protoc_insertion_point(field_mutable:BioService.DetailedEyeCharacteristic.position)
  return position_;
}
::BioService::Position* DetailedEyeCharacteristic::release_position() {
  // @@protoc_insertion_point(field_release:BioService.DetailedEyeCharacteristic.position)
  
  ::BioService::Position* temp = position_;
  position_ = NULL;
  return temp;
}
void DetailedEyeCharacteristic::set_allocated_position(::BioService::Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.DetailedEyeCharacteristic.position)
}

// optional bool is_open = 2;
void DetailedEyeCharacteristic::clear_is_open() {
  is_open_ = false;
}
 bool DetailedEyeCharacteristic::is_open() const {
  // @@protoc_insertion_point(field_get:BioService.DetailedEyeCharacteristic.is_open)
  return is_open_;
}
 void DetailedEyeCharacteristic::set_is_open(bool value) {
  
  is_open_ = value;
  // @@protoc_insertion_point(field_set:BioService.DetailedEyeCharacteristic.is_open)
}

// optional float is_gaze_frontal = 3;
void DetailedEyeCharacteristic::clear_is_gaze_frontal() {
  is_gaze_frontal_ = 0;
}
 float DetailedEyeCharacteristic::is_gaze_frontal() const {
  // @@protoc_insertion_point(field_get:BioService.DetailedEyeCharacteristic.is_gaze_frontal)
  return is_gaze_frontal_;
}
 void DetailedEyeCharacteristic::set_is_gaze_frontal(float value) {
  
  is_gaze_frontal_ = value;
  // @@protoc_insertion_point(field_set:BioService.DetailedEyeCharacteristic.is_gaze_frontal)
}

// optional bool is_red = 4;
void DetailedEyeCharacteristic::clear_is_red() {
  is_red_ = false;
}
 bool DetailedEyeCharacteristic::is_red() const {
  // @@protoc_insertion_point(field_get:BioService.DetailedEyeCharacteristic.is_red)
  return is_red_;
}
 void DetailedEyeCharacteristic::set_is_red(bool value) {
  
  is_red_ = value;
  // @@protoc_insertion_point(field_set:BioService.DetailedEyeCharacteristic.is_red)
}

// optional bool is_tined = 5;
void DetailedEyeCharacteristic::clear_is_tined() {
  is_tined_ = false;
}
 bool DetailedEyeCharacteristic::is_tined() const {
  // @@protoc_insertion_point(field_get:BioService.DetailedEyeCharacteristic.is_tined)
  return is_tined_;
}
 void DetailedEyeCharacteristic::set_is_tined(bool value) {
  
  is_tined_ = value;
  // @@protoc_insertion_point(field_set:BioService.DetailedEyeCharacteristic.is_tined)
}

// optional float confidence = 6;
void DetailedEyeCharacteristic::clear_confidence() {
  confidence_ = 0;
}
 float DetailedEyeCharacteristic::confidence() const {
  // @@protoc_insertion_point(field_get:BioService.DetailedEyeCharacteristic.confidence)
  return confidence_;
}
 void DetailedEyeCharacteristic::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:BioService.DetailedEyeCharacteristic.confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FingerprintCharacteristic::kIdFieldNumber;
const int FingerprintCharacteristic::kPositionFieldNumber;
const int FingerprintCharacteristic::kMinutiaesCountFieldNumber;
const int FingerprintCharacteristic::kPersonidFieldNumber;
const int FingerprintCharacteristic::kPhotoidFieldNumber;
const int FingerprintCharacteristic::kOriginFieldNumber;
const int FingerprintCharacteristic::kEntityStateFieldNumber;
const int FingerprintCharacteristic::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FingerprintCharacteristic::FingerprintCharacteristic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.FingerprintCharacteristic)
}

void FingerprintCharacteristic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

FingerprintCharacteristic::FingerprintCharacteristic(const FingerprintCharacteristic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.FingerprintCharacteristic)
}

void FingerprintCharacteristic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  minutiaes_count_ = 0;
  personid_ = GOOGLE_LONGLONG(0);
  photoid_ = GOOGLE_LONGLONG(0);
  origin_ = 0;
  entity_state_ = 0;
  exception_ = NULL;
}

FingerprintCharacteristic::~FingerprintCharacteristic() {
  // @@protoc_insertion_point(destructor:BioService.FingerprintCharacteristic)
  SharedDtor();
}

void FingerprintCharacteristic::SharedDtor() {
  if (this != default_instance_) {
    delete exception_;
  }
}

void FingerprintCharacteristic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FingerprintCharacteristic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FingerprintCharacteristic_descriptor_;
}

const FingerprintCharacteristic& FingerprintCharacteristic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

FingerprintCharacteristic* FingerprintCharacteristic::default_instance_ = NULL;

FingerprintCharacteristic* FingerprintCharacteristic::New(::google::protobuf::Arena* arena) const {
  FingerprintCharacteristic* n = new FingerprintCharacteristic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FingerprintCharacteristic::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.FingerprintCharacteristic)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FingerprintCharacteristic, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FingerprintCharacteristic*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, entity_state_);
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool FingerprintCharacteristic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.FingerprintCharacteristic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional .BioService.Finger position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position(static_cast< ::BioService::Finger >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_minutiaes_count;
        break;
      }

      // optional sfixed32 minutiaes_count = 3;
      case 3: {
        if (tag == 29) {
         parse_minutiaes_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &minutiaes_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_personid;
        break;
      }

      // optional int64 personid = 4;
      case 4: {
        if (tag == 32) {
         parse_personid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &personid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_photoid;
        break;
      }

      // optional int64 photoid = 5;
      case 5: {
        if (tag == 40) {
         parse_photoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &photoid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_origin;
        break;
      }

      // optional .BioService.PhotoOriginType origin = 6;
      case 6: {
        if (tag == 48) {
         parse_origin:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_origin(static_cast< ::BioService::PhotoOriginType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 7;
      case 7: {
        if (tag == 56) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 8;
      case 8: {
        if (tag == 66) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.FingerprintCharacteristic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.FingerprintCharacteristic)
  return false;
#undef DO_
}

void FingerprintCharacteristic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.FingerprintCharacteristic)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .BioService.Finger position = 2;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->position(), output);
  }

  // optional sfixed32 minutiaes_count = 3;
  if (this->minutiaes_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->minutiaes_count(), output);
  }

  // optional int64 personid = 4;
  if (this->personid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->personid(), output);
  }

  // optional int64 photoid = 5;
  if (this->photoid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->photoid(), output);
  }

  // optional .BioService.PhotoOriginType origin = 6;
  if (this->origin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->origin(), output);
  }

  // optional .BioService.EntityState entity_state = 7;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 8;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.FingerprintCharacteristic)
}

::google::protobuf::uint8* FingerprintCharacteristic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.FingerprintCharacteristic)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .BioService.Finger position = 2;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->position(), target);
  }

  // optional sfixed32 minutiaes_count = 3;
  if (this->minutiaes_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->minutiaes_count(), target);
  }

  // optional int64 personid = 4;
  if (this->personid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->personid(), target);
  }

  // optional int64 photoid = 5;
  if (this->photoid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->photoid(), target);
  }

  // optional .BioService.PhotoOriginType origin = 6;
  if (this->origin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->origin(), target);
  }

  // optional .BioService.EntityState entity_state = 7;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 8;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.FingerprintCharacteristic)
  return target;
}

int FingerprintCharacteristic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.FingerprintCharacteristic)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional .BioService.Finger position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
  }

  // optional sfixed32 minutiaes_count = 3;
  if (this->minutiaes_count() != 0) {
    total_size += 1 + 4;
  }

  // optional int64 personid = 4;
  if (this->personid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->personid());
  }

  // optional int64 photoid = 5;
  if (this->photoid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->photoid());
  }

  // optional .BioService.PhotoOriginType origin = 6;
  if (this->origin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->origin());
  }

  // optional .BioService.EntityState entity_state = 7;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 8;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FingerprintCharacteristic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.FingerprintCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FingerprintCharacteristic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FingerprintCharacteristic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.FingerprintCharacteristic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.FingerprintCharacteristic)
    MergeFrom(*source);
  }
}

void FingerprintCharacteristic::MergeFrom(const FingerprintCharacteristic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.FingerprintCharacteristic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.minutiaes_count() != 0) {
    set_minutiaes_count(from.minutiaes_count());
  }
  if (from.personid() != 0) {
    set_personid(from.personid());
  }
  if (from.photoid() != 0) {
    set_photoid(from.photoid());
  }
  if (from.origin() != 0) {
    set_origin(from.origin());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void FingerprintCharacteristic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.FingerprintCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerprintCharacteristic::CopyFrom(const FingerprintCharacteristic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.FingerprintCharacteristic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerprintCharacteristic::IsInitialized() const {

  return true;
}

void FingerprintCharacteristic::Swap(FingerprintCharacteristic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FingerprintCharacteristic::InternalSwap(FingerprintCharacteristic* other) {
  std::swap(id_, other->id_);
  std::swap(position_, other->position_);
  std::swap(minutiaes_count_, other->minutiaes_count_);
  std::swap(personid_, other->personid_);
  std::swap(photoid_, other->photoid_);
  std::swap(origin_, other->origin_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FingerprintCharacteristic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FingerprintCharacteristic_descriptor_;
  metadata.reflection = FingerprintCharacteristic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FingerprintCharacteristic

// optional int64 id = 1;
void FingerprintCharacteristic::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FingerprintCharacteristic::id() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.id)
  return id_;
}
 void FingerprintCharacteristic::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.id)
}

// optional .BioService.Finger position = 2;
void FingerprintCharacteristic::clear_position() {
  position_ = 0;
}
 ::BioService::Finger FingerprintCharacteristic::position() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.position)
  return static_cast< ::BioService::Finger >(position_);
}
 void FingerprintCharacteristic::set_position(::BioService::Finger value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.position)
}

// optional sfixed32 minutiaes_count = 3;
void FingerprintCharacteristic::clear_minutiaes_count() {
  minutiaes_count_ = 0;
}
 ::google::protobuf::int32 FingerprintCharacteristic::minutiaes_count() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.minutiaes_count)
  return minutiaes_count_;
}
 void FingerprintCharacteristic::set_minutiaes_count(::google::protobuf::int32 value) {
  
  minutiaes_count_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.minutiaes_count)
}

// optional int64 personid = 4;
void FingerprintCharacteristic::clear_personid() {
  personid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FingerprintCharacteristic::personid() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.personid)
  return personid_;
}
 void FingerprintCharacteristic::set_personid(::google::protobuf::int64 value) {
  
  personid_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.personid)
}

// optional int64 photoid = 5;
void FingerprintCharacteristic::clear_photoid() {
  photoid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FingerprintCharacteristic::photoid() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.photoid)
  return photoid_;
}
 void FingerprintCharacteristic::set_photoid(::google::protobuf::int64 value) {
  
  photoid_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.photoid)
}

// optional .BioService.PhotoOriginType origin = 6;
void FingerprintCharacteristic::clear_origin() {
  origin_ = 0;
}
 ::BioService::PhotoOriginType FingerprintCharacteristic::origin() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.origin)
  return static_cast< ::BioService::PhotoOriginType >(origin_);
}
 void FingerprintCharacteristic::set_origin(::BioService::PhotoOriginType value) {
  
  origin_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.origin)
}

// optional .BioService.EntityState entity_state = 7;
void FingerprintCharacteristic::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState FingerprintCharacteristic::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void FingerprintCharacteristic::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintCharacteristic.entity_state)
}

// optional .BioService.ServiceException exception = 8;
bool FingerprintCharacteristic::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void FingerprintCharacteristic::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& FingerprintCharacteristic::exception() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintCharacteristic.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* FingerprintCharacteristic::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintCharacteristic.exception)
  return exception_;
}
::BioService::ServiceException* FingerprintCharacteristic::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.FingerprintCharacteristic.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void FingerprintCharacteristic::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintCharacteristic.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BioIdentificationRecord::kBirUrlFieldNumber;
const int BioIdentificationRecord::kBirBytestringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BioIdentificationRecord::BioIdentificationRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.BioIdentificationRecord)
}

void BioIdentificationRecord::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BioIdentificationRecord::BioIdentificationRecord(const BioIdentificationRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.BioIdentificationRecord)
}

void BioIdentificationRecord::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bir_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bir_bytestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BioIdentificationRecord::~BioIdentificationRecord() {
  // @@protoc_insertion_point(destructor:BioService.BioIdentificationRecord)
  SharedDtor();
}

void BioIdentificationRecord::SharedDtor() {
  bir_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bir_bytestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BioIdentificationRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BioIdentificationRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BioIdentificationRecord_descriptor_;
}

const BioIdentificationRecord& BioIdentificationRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

BioIdentificationRecord* BioIdentificationRecord::default_instance_ = NULL;

BioIdentificationRecord* BioIdentificationRecord::New(::google::protobuf::Arena* arena) const {
  BioIdentificationRecord* n = new BioIdentificationRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BioIdentificationRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.BioIdentificationRecord)
  bir_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bir_bytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BioIdentificationRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.BioIdentificationRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bir_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bir_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bir_url().data(), this->bir_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.BioIdentificationRecord.bir_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bir_bytestring;
        break;
      }

      // optional bytes bir_bytestring = 2;
      case 2: {
        if (tag == 18) {
         parse_bir_bytestring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bir_bytestring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.BioIdentificationRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.BioIdentificationRecord)
  return false;
#undef DO_
}

void BioIdentificationRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.BioIdentificationRecord)
  // optional string bir_url = 1;
  if (this->bir_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bir_url().data(), this->bir_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.BioIdentificationRecord.bir_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bir_url(), output);
  }

  // optional bytes bir_bytestring = 2;
  if (this->bir_bytestring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bir_bytestring(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.BioIdentificationRecord)
}

::google::protobuf::uint8* BioIdentificationRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.BioIdentificationRecord)
  // optional string bir_url = 1;
  if (this->bir_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bir_url().data(), this->bir_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.BioIdentificationRecord.bir_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bir_url(), target);
  }

  // optional bytes bir_bytestring = 2;
  if (this->bir_bytestring().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bir_bytestring(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.BioIdentificationRecord)
  return target;
}

int BioIdentificationRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.BioIdentificationRecord)
  int total_size = 0;

  // optional string bir_url = 1;
  if (this->bir_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bir_url());
  }

  // optional bytes bir_bytestring = 2;
  if (this->bir_bytestring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bir_bytestring());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BioIdentificationRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.BioIdentificationRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BioIdentificationRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BioIdentificationRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.BioIdentificationRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.BioIdentificationRecord)
    MergeFrom(*source);
  }
}

void BioIdentificationRecord::MergeFrom(const BioIdentificationRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.BioIdentificationRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.bir_url().size() > 0) {

    bir_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bir_url_);
  }
  if (from.bir_bytestring().size() > 0) {

    bir_bytestring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bir_bytestring_);
  }
}

void BioIdentificationRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.BioIdentificationRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BioIdentificationRecord::CopyFrom(const BioIdentificationRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.BioIdentificationRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BioIdentificationRecord::IsInitialized() const {

  return true;
}

void BioIdentificationRecord::Swap(BioIdentificationRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BioIdentificationRecord::InternalSwap(BioIdentificationRecord* other) {
  bir_url_.Swap(&other->bir_url_);
  bir_bytestring_.Swap(&other->bir_bytestring_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BioIdentificationRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BioIdentificationRecord_descriptor_;
  metadata.reflection = BioIdentificationRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BioIdentificationRecord

// optional string bir_url = 1;
void BioIdentificationRecord::clear_bir_url() {
  bir_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BioIdentificationRecord::bir_url() const {
  // @@protoc_insertion_point(field_get:BioService.BioIdentificationRecord.bir_url)
  return bir_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BioIdentificationRecord::set_bir_url(const ::std::string& value) {
  
  bir_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.BioIdentificationRecord.bir_url)
}
 void BioIdentificationRecord::set_bir_url(const char* value) {
  
  bir_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.BioIdentificationRecord.bir_url)
}
 void BioIdentificationRecord::set_bir_url(const char* value, size_t size) {
  
  bir_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.BioIdentificationRecord.bir_url)
}
 ::std::string* BioIdentificationRecord::mutable_bir_url() {
  
  // @@protoc_insertion_point(field_mutable:BioService.BioIdentificationRecord.bir_url)
  return bir_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BioIdentificationRecord::release_bir_url() {
  // @@protoc_insertion_point(field_release:BioService.BioIdentificationRecord.bir_url)
  
  return bir_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BioIdentificationRecord::set_allocated_bir_url(::std::string* bir_url) {
  if (bir_url != NULL) {
    
  } else {
    
  }
  bir_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bir_url);
  // @@protoc_insertion_point(field_set_allocated:BioService.BioIdentificationRecord.bir_url)
}

// optional bytes bir_bytestring = 2;
void BioIdentificationRecord::clear_bir_bytestring() {
  bir_bytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BioIdentificationRecord::bir_bytestring() const {
  // @@protoc_insertion_point(field_get:BioService.BioIdentificationRecord.bir_bytestring)
  return bir_bytestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BioIdentificationRecord::set_bir_bytestring(const ::std::string& value) {
  
  bir_bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.BioIdentificationRecord.bir_bytestring)
}
 void BioIdentificationRecord::set_bir_bytestring(const char* value) {
  
  bir_bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.BioIdentificationRecord.bir_bytestring)
}
 void BioIdentificationRecord::set_bir_bytestring(const void* value, size_t size) {
  
  bir_bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.BioIdentificationRecord.bir_bytestring)
}
 ::std::string* BioIdentificationRecord::mutable_bir_bytestring() {
  
  // @@protoc_insertion_point(field_mutable:BioService.BioIdentificationRecord.bir_bytestring)
  return bir_bytestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BioIdentificationRecord::release_bir_bytestring() {
  // @@protoc_insertion_point(field_release:BioService.BioIdentificationRecord.bir_bytestring)
  
  return bir_bytestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BioIdentificationRecord::set_allocated_bir_bytestring(::std::string* bir_bytestring) {
  if (bir_bytestring != NULL) {
    
  } else {
    
  }
  bir_bytestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bir_bytestring);
  // @@protoc_insertion_point(field_set_allocated:BioService.BioIdentificationRecord.bir_bytestring)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BioFingerprintData::kCharacteristicsFieldNumber;
const int BioFingerprintData::kBiometricRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BioFingerprintData::BioFingerprintData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.BioFingerprintData)
}

void BioFingerprintData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  characteristics_ = const_cast< ::BioService::FingerprintCharacteristic*>(&::BioService::FingerprintCharacteristic::default_instance());
  biometric_record_ = const_cast< ::BioService::BioIdentificationRecord*>(&::BioService::BioIdentificationRecord::default_instance());
}

BioFingerprintData::BioFingerprintData(const BioFingerprintData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.BioFingerprintData)
}

void BioFingerprintData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  characteristics_ = NULL;
  biometric_record_ = NULL;
}

BioFingerprintData::~BioFingerprintData() {
  // @@protoc_insertion_point(destructor:BioService.BioFingerprintData)
  SharedDtor();
}

void BioFingerprintData::SharedDtor() {
  if (this != default_instance_) {
    delete characteristics_;
    delete biometric_record_;
  }
}

void BioFingerprintData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BioFingerprintData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BioFingerprintData_descriptor_;
}

const BioFingerprintData& BioFingerprintData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

BioFingerprintData* BioFingerprintData::default_instance_ = NULL;

BioFingerprintData* BioFingerprintData::New(::google::protobuf::Arena* arena) const {
  BioFingerprintData* n = new BioFingerprintData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BioFingerprintData::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.BioFingerprintData)
  if (GetArenaNoVirtual() == NULL && characteristics_ != NULL) delete characteristics_;
  characteristics_ = NULL;
  if (GetArenaNoVirtual() == NULL && biometric_record_ != NULL) delete biometric_record_;
  biometric_record_ = NULL;
}

bool BioFingerprintData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.BioFingerprintData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.FingerprintCharacteristic characteristics = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_characteristics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_biometric_record;
        break;
      }

      // optional .BioService.BioIdentificationRecord biometric_record = 2;
      case 2: {
        if (tag == 18) {
         parse_biometric_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_biometric_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.BioFingerprintData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.BioFingerprintData)
  return false;
#undef DO_
}

void BioFingerprintData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.BioFingerprintData)
  // optional .BioService.FingerprintCharacteristic characteristics = 1;
  if (this->has_characteristics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->characteristics_, output);
  }

  // optional .BioService.BioIdentificationRecord biometric_record = 2;
  if (this->has_biometric_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->biometric_record_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.BioFingerprintData)
}

::google::protobuf::uint8* BioFingerprintData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.BioFingerprintData)
  // optional .BioService.FingerprintCharacteristic characteristics = 1;
  if (this->has_characteristics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->characteristics_, target);
  }

  // optional .BioService.BioIdentificationRecord biometric_record = 2;
  if (this->has_biometric_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->biometric_record_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.BioFingerprintData)
  return target;
}

int BioFingerprintData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.BioFingerprintData)
  int total_size = 0;

  // optional .BioService.FingerprintCharacteristic characteristics = 1;
  if (this->has_characteristics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->characteristics_);
  }

  // optional .BioService.BioIdentificationRecord biometric_record = 2;
  if (this->has_biometric_record()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->biometric_record_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BioFingerprintData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.BioFingerprintData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BioFingerprintData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BioFingerprintData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.BioFingerprintData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.BioFingerprintData)
    MergeFrom(*source);
  }
}

void BioFingerprintData::MergeFrom(const BioFingerprintData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.BioFingerprintData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_characteristics()) {
    mutable_characteristics()->::BioService::FingerprintCharacteristic::MergeFrom(from.characteristics());
  }
  if (from.has_biometric_record()) {
    mutable_biometric_record()->::BioService::BioIdentificationRecord::MergeFrom(from.biometric_record());
  }
}

void BioFingerprintData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.BioFingerprintData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BioFingerprintData::CopyFrom(const BioFingerprintData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.BioFingerprintData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BioFingerprintData::IsInitialized() const {

  return true;
}

void BioFingerprintData::Swap(BioFingerprintData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BioFingerprintData::InternalSwap(BioFingerprintData* other) {
  std::swap(characteristics_, other->characteristics_);
  std::swap(biometric_record_, other->biometric_record_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BioFingerprintData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BioFingerprintData_descriptor_;
  metadata.reflection = BioFingerprintData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BioFingerprintData

// optional .BioService.FingerprintCharacteristic characteristics = 1;
bool BioFingerprintData::has_characteristics() const {
  return !_is_default_instance_ && characteristics_ != NULL;
}
void BioFingerprintData::clear_characteristics() {
  if (GetArenaNoVirtual() == NULL && characteristics_ != NULL) delete characteristics_;
  characteristics_ = NULL;
}
const ::BioService::FingerprintCharacteristic& BioFingerprintData::characteristics() const {
  // @@protoc_insertion_point(field_get:BioService.BioFingerprintData.characteristics)
  return characteristics_ != NULL ? *characteristics_ : *default_instance_->characteristics_;
}
::BioService::FingerprintCharacteristic* BioFingerprintData::mutable_characteristics() {
  
  if (characteristics_ == NULL) {
    characteristics_ = new ::BioService::FingerprintCharacteristic;
  }
  // @@protoc_insertion_point(field_mutable:BioService.BioFingerprintData.characteristics)
  return characteristics_;
}
::BioService::FingerprintCharacteristic* BioFingerprintData::release_characteristics() {
  // @@protoc_insertion_point(field_release:BioService.BioFingerprintData.characteristics)
  
  ::BioService::FingerprintCharacteristic* temp = characteristics_;
  characteristics_ = NULL;
  return temp;
}
void BioFingerprintData::set_allocated_characteristics(::BioService::FingerprintCharacteristic* characteristics) {
  delete characteristics_;
  characteristics_ = characteristics;
  if (characteristics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.BioFingerprintData.characteristics)
}

// optional .BioService.BioIdentificationRecord biometric_record = 2;
bool BioFingerprintData::has_biometric_record() const {
  return !_is_default_instance_ && biometric_record_ != NULL;
}
void BioFingerprintData::clear_biometric_record() {
  if (GetArenaNoVirtual() == NULL && biometric_record_ != NULL) delete biometric_record_;
  biometric_record_ = NULL;
}
const ::BioService::BioIdentificationRecord& BioFingerprintData::biometric_record() const {
  // @@protoc_insertion_point(field_get:BioService.BioFingerprintData.biometric_record)
  return biometric_record_ != NULL ? *biometric_record_ : *default_instance_->biometric_record_;
}
::BioService::BioIdentificationRecord* BioFingerprintData::mutable_biometric_record() {
  
  if (biometric_record_ == NULL) {
    biometric_record_ = new ::BioService::BioIdentificationRecord;
  }
  // @@protoc_insertion_point(field_mutable:BioService.BioFingerprintData.biometric_record)
  return biometric_record_;
}
::BioService::BioIdentificationRecord* BioFingerprintData::release_biometric_record() {
  // @@protoc_insertion_point(field_release:BioService.BioFingerprintData.biometric_record)
  
  ::BioService::BioIdentificationRecord* temp = biometric_record_;
  biometric_record_ = NULL;
  return temp;
}
void BioFingerprintData::set_allocated_biometric_record(::BioService::BioIdentificationRecord* biometric_record) {
  delete biometric_record_;
  biometric_record_ = biometric_record;
  if (biometric_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.BioFingerprintData.biometric_record)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BioPersonData::kPersonIdFieldNumber;
const int BioPersonData::kFacesFieldNumber;
const int BioPersonData::kFingerprintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BioPersonData::BioPersonData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.BioPersonData)
}

void BioPersonData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BioPersonData::BioPersonData(const BioPersonData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.BioPersonData)
}

void BioPersonData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  person_id_ = GOOGLE_LONGLONG(0);
}

BioPersonData::~BioPersonData() {
  // @@protoc_insertion_point(destructor:BioService.BioPersonData)
  SharedDtor();
}

void BioPersonData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BioPersonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BioPersonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BioPersonData_descriptor_;
}

const BioPersonData& BioPersonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

BioPersonData* BioPersonData::default_instance_ = NULL;

BioPersonData* BioPersonData::New(::google::protobuf::Arena* arena) const {
  BioPersonData* n = new BioPersonData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BioPersonData::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.BioPersonData)
  person_id_ = GOOGLE_LONGLONG(0);
  faces_.Clear();
  fingerprints_.Clear();
}

bool BioPersonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.BioPersonData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 person_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &person_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_faces;
        break;
      }

      // repeated .BioService.BioIdentificationRecord faces = 2;
      case 2: {
        if (tag == 18) {
         parse_faces:
          DO_(input->IncrementRecursionDepth());
         parse_loop_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_faces;
        if (input->ExpectTag(26)) goto parse_loop_fingerprints;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .BioService.BioIdentificationRecord fingerprints = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_fingerprints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fingerprints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_fingerprints;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.BioPersonData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.BioPersonData)
  return false;
#undef DO_
}

void BioPersonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.BioPersonData)
  // optional int64 person_id = 1;
  if (this->person_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->person_id(), output);
  }

  // repeated .BioService.BioIdentificationRecord faces = 2;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->faces(i), output);
  }

  // repeated .BioService.BioIdentificationRecord fingerprints = 3;
  for (unsigned int i = 0, n = this->fingerprints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fingerprints(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.BioPersonData)
}

::google::protobuf::uint8* BioPersonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.BioPersonData)
  // optional int64 person_id = 1;
  if (this->person_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->person_id(), target);
  }

  // repeated .BioService.BioIdentificationRecord faces = 2;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->faces(i), target);
  }

  // repeated .BioService.BioIdentificationRecord fingerprints = 3;
  for (unsigned int i = 0, n = this->fingerprints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fingerprints(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.BioPersonData)
  return target;
}

int BioPersonData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.BioPersonData)
  int total_size = 0;

  // optional int64 person_id = 1;
  if (this->person_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->person_id());
  }

  // repeated .BioService.BioIdentificationRecord faces = 2;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  // repeated .BioService.BioIdentificationRecord fingerprints = 3;
  total_size += 1 * this->fingerprints_size();
  for (int i = 0; i < this->fingerprints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fingerprints(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BioPersonData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.BioPersonData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BioPersonData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BioPersonData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.BioPersonData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.BioPersonData)
    MergeFrom(*source);
  }
}

void BioPersonData::MergeFrom(const BioPersonData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.BioPersonData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  faces_.MergeFrom(from.faces_);
  fingerprints_.MergeFrom(from.fingerprints_);
  if (from.person_id() != 0) {
    set_person_id(from.person_id());
  }
}

void BioPersonData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.BioPersonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BioPersonData::CopyFrom(const BioPersonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.BioPersonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BioPersonData::IsInitialized() const {

  return true;
}

void BioPersonData::Swap(BioPersonData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BioPersonData::InternalSwap(BioPersonData* other) {
  std::swap(person_id_, other->person_id_);
  faces_.UnsafeArenaSwap(&other->faces_);
  fingerprints_.UnsafeArenaSwap(&other->fingerprints_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BioPersonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BioPersonData_descriptor_;
  metadata.reflection = BioPersonData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BioPersonData

// optional int64 person_id = 1;
void BioPersonData::clear_person_id() {
  person_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BioPersonData::person_id() const {
  // @@protoc_insertion_point(field_get:BioService.BioPersonData.person_id)
  return person_id_;
}
 void BioPersonData::set_person_id(::google::protobuf::int64 value) {
  
  person_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.BioPersonData.person_id)
}

// repeated .BioService.BioIdentificationRecord faces = 2;
int BioPersonData::faces_size() const {
  return faces_.size();
}
void BioPersonData::clear_faces() {
  faces_.Clear();
}
const ::BioService::BioIdentificationRecord& BioPersonData::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.BioPersonData.faces)
  return faces_.Get(index);
}
::BioService::BioIdentificationRecord* BioPersonData::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.BioPersonData.faces)
  return faces_.Mutable(index);
}
::BioService::BioIdentificationRecord* BioPersonData::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.BioPersonData.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord >*
BioPersonData::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.BioPersonData.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord >&
BioPersonData::faces() const {
  // @@protoc_insertion_point(field_list:BioService.BioPersonData.faces)
  return faces_;
}

// repeated .BioService.BioIdentificationRecord fingerprints = 3;
int BioPersonData::fingerprints_size() const {
  return fingerprints_.size();
}
void BioPersonData::clear_fingerprints() {
  fingerprints_.Clear();
}
const ::BioService::BioIdentificationRecord& BioPersonData::fingerprints(int index) const {
  // @@protoc_insertion_point(field_get:BioService.BioPersonData.fingerprints)
  return fingerprints_.Get(index);
}
::BioService::BioIdentificationRecord* BioPersonData::mutable_fingerprints(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.BioPersonData.fingerprints)
  return fingerprints_.Mutable(index);
}
::BioService::BioIdentificationRecord* BioPersonData::add_fingerprints() {
  // @@protoc_insertion_point(field_add:BioService.BioPersonData.fingerprints)
  return fingerprints_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord >*
BioPersonData::mutable_fingerprints() {
  // @@protoc_insertion_point(field_mutable_list:BioService.BioPersonData.fingerprints)
  return &fingerprints_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::BioIdentificationRecord >&
BioPersonData::fingerprints() const {
  // @@protoc_insertion_point(field_list:BioService.BioPersonData.fingerprints)
  return fingerprints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BiometricData::kIdFieldNumber;
const int BiometricData::kFacesFieldNumber;
const int BiometricData::kFingerprintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BiometricData::BiometricData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.BiometricData)
}

void BiometricData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BiometricData::BiometricData(const BiometricData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.BiometricData)
}

void BiometricData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
}

BiometricData::~BiometricData() {
  // @@protoc_insertion_point(destructor:BioService.BiometricData)
  SharedDtor();
}

void BiometricData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BiometricData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiometricData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiometricData_descriptor_;
}

const BiometricData& BiometricData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

BiometricData* BiometricData::default_instance_ = NULL;

BiometricData* BiometricData::New(::google::protobuf::Arena* arena) const {
  BiometricData* n = new BiometricData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BiometricData::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.BiometricData)
  id_ = GOOGLE_LONGLONG(0);
  faces_.Clear();
  fingerprints_.Clear();
}

bool BiometricData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.BiometricData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_faces;
        break;
      }

      // repeated .BioService.FaceCharacteristic faces = 2;
      case 2: {
        if (tag == 18) {
         parse_faces:
          DO_(input->IncrementRecursionDepth());
         parse_loop_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_faces;
        if (input->ExpectTag(26)) goto parse_loop_fingerprints;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .BioService.FingerprintCharacteristic fingerprints = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_fingerprints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fingerprints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_fingerprints;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.BiometricData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.BiometricData)
  return false;
#undef DO_
}

void BiometricData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.BiometricData)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated .BioService.FaceCharacteristic faces = 2;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->faces(i), output);
  }

  // repeated .BioService.FingerprintCharacteristic fingerprints = 3;
  for (unsigned int i = 0, n = this->fingerprints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fingerprints(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.BiometricData)
}

::google::protobuf::uint8* BiometricData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.BiometricData)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated .BioService.FaceCharacteristic faces = 2;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->faces(i), target);
  }

  // repeated .BioService.FingerprintCharacteristic fingerprints = 3;
  for (unsigned int i = 0, n = this->fingerprints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fingerprints(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.BiometricData)
  return target;
}

int BiometricData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.BiometricData)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // repeated .BioService.FaceCharacteristic faces = 2;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  // repeated .BioService.FingerprintCharacteristic fingerprints = 3;
  total_size += 1 * this->fingerprints_size();
  for (int i = 0; i < this->fingerprints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fingerprints(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiometricData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.BiometricData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BiometricData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BiometricData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.BiometricData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.BiometricData)
    MergeFrom(*source);
  }
}

void BiometricData::MergeFrom(const BiometricData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.BiometricData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  faces_.MergeFrom(from.faces_);
  fingerprints_.MergeFrom(from.fingerprints_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void BiometricData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.BiometricData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiometricData::CopyFrom(const BiometricData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.BiometricData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiometricData::IsInitialized() const {

  return true;
}

void BiometricData::Swap(BiometricData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BiometricData::InternalSwap(BiometricData* other) {
  std::swap(id_, other->id_);
  faces_.UnsafeArenaSwap(&other->faces_);
  fingerprints_.UnsafeArenaSwap(&other->fingerprints_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BiometricData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiometricData_descriptor_;
  metadata.reflection = BiometricData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BiometricData

// optional int64 id = 1;
void BiometricData::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BiometricData::id() const {
  // @@protoc_insertion_point(field_get:BioService.BiometricData.id)
  return id_;
}
 void BiometricData::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.BiometricData.id)
}

// repeated .BioService.FaceCharacteristic faces = 2;
int BiometricData::faces_size() const {
  return faces_.size();
}
void BiometricData::clear_faces() {
  faces_.Clear();
}
const ::BioService::FaceCharacteristic& BiometricData::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.BiometricData.faces)
  return faces_.Get(index);
}
::BioService::FaceCharacteristic* BiometricData::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.BiometricData.faces)
  return faces_.Mutable(index);
}
::BioService::FaceCharacteristic* BiometricData::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.BiometricData.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
BiometricData::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.BiometricData.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
BiometricData::faces() const {
  // @@protoc_insertion_point(field_list:BioService.BiometricData.faces)
  return faces_;
}

// repeated .BioService.FingerprintCharacteristic fingerprints = 3;
int BiometricData::fingerprints_size() const {
  return fingerprints_.size();
}
void BiometricData::clear_fingerprints() {
  fingerprints_.Clear();
}
const ::BioService::FingerprintCharacteristic& BiometricData::fingerprints(int index) const {
  // @@protoc_insertion_point(field_get:BioService.BiometricData.fingerprints)
  return fingerprints_.Get(index);
}
::BioService::FingerprintCharacteristic* BiometricData::mutable_fingerprints(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.BiometricData.fingerprints)
  return fingerprints_.Mutable(index);
}
::BioService::FingerprintCharacteristic* BiometricData::add_fingerprints() {
  // @@protoc_insertion_point(field_add:BioService.BiometricData.fingerprints)
  return fingerprints_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::FingerprintCharacteristic >*
BiometricData::mutable_fingerprints() {
  // @@protoc_insertion_point(field_mutable_list:BioService.BiometricData.fingerprints)
  return &fingerprints_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::FingerprintCharacteristic >&
BiometricData::fingerprints() const {
  // @@protoc_insertion_point(field_list:BioService.BiometricData.fingerprints)
  return fingerprints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FacialImage::kOwnerIdFieldNumber;
const int FacialImage::kImageFieldNumber;
const int FacialImage::kTemplateFieldNumber;
const int FacialImage::kFacesFieldNumber;
const int FacialImage::kEntityStateFieldNumber;
const int FacialImage::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FacialImage::FacialImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.FacialImage)
}

void FacialImage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  image_ = const_cast< ::BioService::Photo*>(&::BioService::Photo::default_instance());
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

FacialImage::FacialImage(const FacialImage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.FacialImage)
}

void FacialImage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  owner_id_ = GOOGLE_LONGLONG(0);
  image_ = NULL;
  template__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_state_ = 0;
  exception_ = NULL;
}

FacialImage::~FacialImage() {
  // @@protoc_insertion_point(destructor:BioService.FacialImage)
  SharedDtor();
}

void FacialImage::SharedDtor() {
  template__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete image_;
    delete exception_;
  }
}

void FacialImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacialImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacialImage_descriptor_;
}

const FacialImage& FacialImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

FacialImage* FacialImage::default_instance_ = NULL;

FacialImage* FacialImage::New(::google::protobuf::Arena* arena) const {
  FacialImage* n = new FacialImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FacialImage::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.FacialImage)
  owner_id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
  template__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_state_ = 0;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
  faces_.Clear();
}

bool FacialImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.FacialImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 owner_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // optional .BioService.Photo image = 2;
      case 2: {
        if (tag == 18) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_template;
        break;
      }

      // optional bytes template = 3;
      case 3: {
        if (tag == 26) {
         parse_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_template_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_faces;
        break;
      }

      // repeated .BioService.FaceCharacteristic faces = 4;
      case 4: {
        if (tag == 34) {
         parse_faces:
          DO_(input->IncrementRecursionDepth());
         parse_loop_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_faces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 5;
      case 5: {
        if (tag == 40) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 6;
      case 6: {
        if (tag == 50) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.FacialImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.FacialImage)
  return false;
#undef DO_
}

void FacialImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.FacialImage)
  // optional int64 owner_id = 1;
  if (this->owner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->owner_id(), output);
  }

  // optional .BioService.Photo image = 2;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_, output);
  }

  // optional bytes template = 3;
  if (this->template_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->template_(), output);
  }

  // repeated .BioService.FaceCharacteristic faces = 4;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->faces(i), output);
  }

  // optional .BioService.EntityState entity_state = 5;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 6;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.FacialImage)
}

::google::protobuf::uint8* FacialImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.FacialImage)
  // optional int64 owner_id = 1;
  if (this->owner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->owner_id(), target);
  }

  // optional .BioService.Photo image = 2;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->image_, target);
  }

  // optional bytes template = 3;
  if (this->template_().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->template_(), target);
  }

  // repeated .BioService.FaceCharacteristic faces = 4;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->faces(i), target);
  }

  // optional .BioService.EntityState entity_state = 5;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 6;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.FacialImage)
  return target;
}

int FacialImage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.FacialImage)
  int total_size = 0;

  // optional int64 owner_id = 1;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->owner_id());
  }

  // optional .BioService.Photo image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // optional bytes template = 3;
  if (this->template_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->template_());
  }

  // optional .BioService.EntityState entity_state = 5;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 6;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // repeated .BioService.FaceCharacteristic faces = 4;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacialImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.FacialImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FacialImage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FacialImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.FacialImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.FacialImage)
    MergeFrom(*source);
  }
}

void FacialImage::MergeFrom(const FacialImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.FacialImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  faces_.MergeFrom(from.faces_);
  if (from.owner_id() != 0) {
    set_owner_id(from.owner_id());
  }
  if (from.has_image()) {
    mutable_image()->::BioService::Photo::MergeFrom(from.image());
  }
  if (from.template_().size() > 0) {

    template__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template__);
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void FacialImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.FacialImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacialImage::CopyFrom(const FacialImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.FacialImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacialImage::IsInitialized() const {

  return true;
}

void FacialImage::Swap(FacialImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FacialImage::InternalSwap(FacialImage* other) {
  std::swap(owner_id_, other->owner_id_);
  std::swap(image_, other->image_);
  template__.Swap(&other->template__);
  faces_.UnsafeArenaSwap(&other->faces_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FacialImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacialImage_descriptor_;
  metadata.reflection = FacialImage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FacialImage

// optional int64 owner_id = 1;
void FacialImage::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FacialImage::owner_id() const {
  // @@protoc_insertion_point(field_get:BioService.FacialImage.owner_id)
  return owner_id_;
}
 void FacialImage::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FacialImage.owner_id)
}

// optional .BioService.Photo image = 2;
bool FacialImage::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
void FacialImage::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::BioService::Photo& FacialImage::image() const {
  // @@protoc_insertion_point(field_get:BioService.FacialImage.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::BioService::Photo* FacialImage::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FacialImage.image)
  return image_;
}
::BioService::Photo* FacialImage::release_image() {
  // @@protoc_insertion_point(field_release:BioService.FacialImage.image)
  
  ::BioService::Photo* temp = image_;
  image_ = NULL;
  return temp;
}
void FacialImage::set_allocated_image(::BioService::Photo* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FacialImage.image)
}

// optional bytes template = 3;
void FacialImage::clear_template_() {
  template__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FacialImage::template_() const {
  // @@protoc_insertion_point(field_get:BioService.FacialImage.template)
  return template__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FacialImage::set_template_(const ::std::string& value) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.FacialImage.template)
}
 void FacialImage::set_template_(const char* value) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.FacialImage.template)
}
 void FacialImage::set_template_(const void* value, size_t size) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.FacialImage.template)
}
 ::std::string* FacialImage::mutable_template_() {
  
  // @@protoc_insertion_point(field_mutable:BioService.FacialImage.template)
  return template__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FacialImage::release_template_() {
  // @@protoc_insertion_point(field_release:BioService.FacialImage.template)
  
  return template__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FacialImage::set_allocated_template_(::std::string* template_) {
  if (template_ != NULL) {
    
  } else {
    
  }
  template__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), template_);
  // @@protoc_insertion_point(field_set_allocated:BioService.FacialImage.template)
}

// repeated .BioService.FaceCharacteristic faces = 4;
int FacialImage::faces_size() const {
  return faces_.size();
}
void FacialImage::clear_faces() {
  faces_.Clear();
}
const ::BioService::FaceCharacteristic& FacialImage::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.FacialImage.faces)
  return faces_.Get(index);
}
::BioService::FaceCharacteristic* FacialImage::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.FacialImage.faces)
  return faces_.Mutable(index);
}
::BioService::FaceCharacteristic* FacialImage::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.FacialImage.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
FacialImage::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.FacialImage.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
FacialImage::faces() const {
  // @@protoc_insertion_point(field_list:BioService.FacialImage.faces)
  return faces_;
}

// optional .BioService.EntityState entity_state = 5;
void FacialImage::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState FacialImage::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.FacialImage.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void FacialImage::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.FacialImage.entity_state)
}

// optional .BioService.ServiceException exception = 6;
bool FacialImage::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void FacialImage::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& FacialImage::exception() const {
  // @@protoc_insertion_point(field_get:BioService.FacialImage.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* FacialImage::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FacialImage.exception)
  return exception_;
}
::BioService::ServiceException* FacialImage::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.FacialImage.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void FacialImage::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FacialImage.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatabaseFacialImageResponse::kFacesFieldNumber;
const int DatabaseFacialImageResponse::kImageFieldNumber;
const int DatabaseFacialImageResponse::kEntityStateFieldNumber;
const int DatabaseFacialImageResponse::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatabaseFacialImageResponse::DatabaseFacialImageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.DatabaseFacialImageResponse)
}

void DatabaseFacialImageResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  image_ = const_cast< ::BioService::Photo*>(&::BioService::Photo::default_instance());
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

DatabaseFacialImageResponse::DatabaseFacialImageResponse(const DatabaseFacialImageResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.DatabaseFacialImageResponse)
}

void DatabaseFacialImageResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  image_ = NULL;
  entity_state_ = 0;
  exception_ = NULL;
}

DatabaseFacialImageResponse::~DatabaseFacialImageResponse() {
  // @@protoc_insertion_point(destructor:BioService.DatabaseFacialImageResponse)
  SharedDtor();
}

void DatabaseFacialImageResponse::SharedDtor() {
  if (this != default_instance_) {
    delete image_;
    delete exception_;
  }
}

void DatabaseFacialImageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseFacialImageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseFacialImageResponse_descriptor_;
}

const DatabaseFacialImageResponse& DatabaseFacialImageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

DatabaseFacialImageResponse* DatabaseFacialImageResponse::default_instance_ = NULL;

DatabaseFacialImageResponse* DatabaseFacialImageResponse::New(::google::protobuf::Arena* arena) const {
  DatabaseFacialImageResponse* n = new DatabaseFacialImageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatabaseFacialImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.DatabaseFacialImageResponse)
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
  entity_state_ = 0;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
  faces_.Clear();
}

bool DatabaseFacialImageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.DatabaseFacialImageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.FaceCharacteristic faces = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_faces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // optional .BioService.Photo image = 2;
      case 2: {
        if (tag == 18) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 3;
      case 3: {
        if (tag == 24) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 4;
      case 4: {
        if (tag == 34) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.DatabaseFacialImageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.DatabaseFacialImageResponse)
  return false;
#undef DO_
}

void DatabaseFacialImageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.DatabaseFacialImageResponse)
  // repeated .BioService.FaceCharacteristic faces = 1;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->faces(i), output);
  }

  // optional .BioService.Photo image = 2;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_, output);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.DatabaseFacialImageResponse)
}

::google::protobuf::uint8* DatabaseFacialImageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.DatabaseFacialImageResponse)
  // repeated .BioService.FaceCharacteristic faces = 1;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->faces(i), target);
  }

  // optional .BioService.Photo image = 2;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->image_, target);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.DatabaseFacialImageResponse)
  return target;
}

int DatabaseFacialImageResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.DatabaseFacialImageResponse)
  int total_size = 0;

  // optional .BioService.Photo image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // repeated .BioService.FaceCharacteristic faces = 1;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseFacialImageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.DatabaseFacialImageResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DatabaseFacialImageResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DatabaseFacialImageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.DatabaseFacialImageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.DatabaseFacialImageResponse)
    MergeFrom(*source);
  }
}

void DatabaseFacialImageResponse::MergeFrom(const DatabaseFacialImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.DatabaseFacialImageResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  faces_.MergeFrom(from.faces_);
  if (from.has_image()) {
    mutable_image()->::BioService::Photo::MergeFrom(from.image());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void DatabaseFacialImageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.DatabaseFacialImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseFacialImageResponse::CopyFrom(const DatabaseFacialImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.DatabaseFacialImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseFacialImageResponse::IsInitialized() const {

  return true;
}

void DatabaseFacialImageResponse::Swap(DatabaseFacialImageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatabaseFacialImageResponse::InternalSwap(DatabaseFacialImageResponse* other) {
  faces_.UnsafeArenaSwap(&other->faces_);
  std::swap(image_, other->image_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatabaseFacialImageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatabaseFacialImageResponse_descriptor_;
  metadata.reflection = DatabaseFacialImageResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatabaseFacialImageResponse

// repeated .BioService.FaceCharacteristic faces = 1;
int DatabaseFacialImageResponse::faces_size() const {
  return faces_.size();
}
void DatabaseFacialImageResponse::clear_faces() {
  faces_.Clear();
}
const ::BioService::FaceCharacteristic& DatabaseFacialImageResponse::faces(int index) const {
  // @@protoc_insertion_point(field_get:BioService.DatabaseFacialImageResponse.faces)
  return faces_.Get(index);
}
::BioService::FaceCharacteristic* DatabaseFacialImageResponse::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.DatabaseFacialImageResponse.faces)
  return faces_.Mutable(index);
}
::BioService::FaceCharacteristic* DatabaseFacialImageResponse::add_faces() {
  // @@protoc_insertion_point(field_add:BioService.DatabaseFacialImageResponse.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >*
DatabaseFacialImageResponse::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:BioService.DatabaseFacialImageResponse.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::FaceCharacteristic >&
DatabaseFacialImageResponse::faces() const {
  // @@protoc_insertion_point(field_list:BioService.DatabaseFacialImageResponse.faces)
  return faces_;
}

// optional .BioService.Photo image = 2;
bool DatabaseFacialImageResponse::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
void DatabaseFacialImageResponse::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::BioService::Photo& DatabaseFacialImageResponse::image() const {
  // @@protoc_insertion_point(field_get:BioService.DatabaseFacialImageResponse.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::BioService::Photo* DatabaseFacialImageResponse::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.DatabaseFacialImageResponse.image)
  return image_;
}
::BioService::Photo* DatabaseFacialImageResponse::release_image() {
  // @@protoc_insertion_point(field_release:BioService.DatabaseFacialImageResponse.image)
  
  ::BioService::Photo* temp = image_;
  image_ = NULL;
  return temp;
}
void DatabaseFacialImageResponse::set_allocated_image(::BioService::Photo* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.DatabaseFacialImageResponse.image)
}

// optional .BioService.EntityState entity_state = 3;
void DatabaseFacialImageResponse::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState DatabaseFacialImageResponse::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.DatabaseFacialImageResponse.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void DatabaseFacialImageResponse::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.DatabaseFacialImageResponse.entity_state)
}

// optional .BioService.ServiceException exception = 4;
bool DatabaseFacialImageResponse::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void DatabaseFacialImageResponse::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& DatabaseFacialImageResponse::exception() const {
  // @@protoc_insertion_point(field_get:BioService.DatabaseFacialImageResponse.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* DatabaseFacialImageResponse::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.DatabaseFacialImageResponse.exception)
  return exception_;
}
::BioService::ServiceException* DatabaseFacialImageResponse::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.DatabaseFacialImageResponse.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void DatabaseFacialImageResponse::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.DatabaseFacialImageResponse.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FingerprintImage::kOwnerIdFieldNumber;
const int FingerprintImage::kImageFieldNumber;
const int FingerprintImage::kTemplateFieldNumber;
const int FingerprintImage::kFingerprintFieldNumber;
const int FingerprintImage::kEntityStateFieldNumber;
const int FingerprintImage::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FingerprintImage::FingerprintImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.FingerprintImage)
}

void FingerprintImage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  image_ = const_cast< ::BioService::Photo*>(&::BioService::Photo::default_instance());
  fingerprint_ = const_cast< ::BioService::FingerprintCharacteristic*>(&::BioService::FingerprintCharacteristic::default_instance());
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

FingerprintImage::FingerprintImage(const FingerprintImage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.FingerprintImage)
}

void FingerprintImage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  owner_id_ = GOOGLE_LONGLONG(0);
  image_ = NULL;
  template__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fingerprint_ = NULL;
  entity_state_ = 0;
  exception_ = NULL;
}

FingerprintImage::~FingerprintImage() {
  // @@protoc_insertion_point(destructor:BioService.FingerprintImage)
  SharedDtor();
}

void FingerprintImage::SharedDtor() {
  template__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete image_;
    delete fingerprint_;
    delete exception_;
  }
}

void FingerprintImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FingerprintImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FingerprintImage_descriptor_;
}

const FingerprintImage& FingerprintImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

FingerprintImage* FingerprintImage::default_instance_ = NULL;

FingerprintImage* FingerprintImage::New(::google::protobuf::Arena* arena) const {
  FingerprintImage* n = new FingerprintImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FingerprintImage::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.FingerprintImage)
  owner_id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
  template__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && fingerprint_ != NULL) delete fingerprint_;
  fingerprint_ = NULL;
  entity_state_ = 0;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}

bool FingerprintImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.FingerprintImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 owner_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // optional .BioService.Photo image = 2;
      case 2: {
        if (tag == 18) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_template;
        break;
      }

      // optional bytes template = 3;
      case 3: {
        if (tag == 26) {
         parse_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_template_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fingerprint;
        break;
      }

      // optional .BioService.FingerprintCharacteristic fingerprint = 4;
      case 4: {
        if (tag == 34) {
         parse_fingerprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fingerprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 5;
      case 5: {
        if (tag == 40) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 6;
      case 6: {
        if (tag == 50) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.FingerprintImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.FingerprintImage)
  return false;
#undef DO_
}

void FingerprintImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.FingerprintImage)
  // optional int64 owner_id = 1;
  if (this->owner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->owner_id(), output);
  }

  // optional .BioService.Photo image = 2;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_, output);
  }

  // optional bytes template = 3;
  if (this->template_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->template_(), output);
  }

  // optional .BioService.FingerprintCharacteristic fingerprint = 4;
  if (this->has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->fingerprint_, output);
  }

  // optional .BioService.EntityState entity_state = 5;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 6;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.FingerprintImage)
}

::google::protobuf::uint8* FingerprintImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.FingerprintImage)
  // optional int64 owner_id = 1;
  if (this->owner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->owner_id(), target);
  }

  // optional .BioService.Photo image = 2;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->image_, target);
  }

  // optional bytes template = 3;
  if (this->template_().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->template_(), target);
  }

  // optional .BioService.FingerprintCharacteristic fingerprint = 4;
  if (this->has_fingerprint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->fingerprint_, target);
  }

  // optional .BioService.EntityState entity_state = 5;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 6;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.FingerprintImage)
  return target;
}

int FingerprintImage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.FingerprintImage)
  int total_size = 0;

  // optional int64 owner_id = 1;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->owner_id());
  }

  // optional .BioService.Photo image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // optional bytes template = 3;
  if (this->template_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->template_());
  }

  // optional .BioService.FingerprintCharacteristic fingerprint = 4;
  if (this->has_fingerprint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fingerprint_);
  }

  // optional .BioService.EntityState entity_state = 5;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 6;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FingerprintImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.FingerprintImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FingerprintImage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FingerprintImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.FingerprintImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.FingerprintImage)
    MergeFrom(*source);
  }
}

void FingerprintImage::MergeFrom(const FingerprintImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.FingerprintImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.owner_id() != 0) {
    set_owner_id(from.owner_id());
  }
  if (from.has_image()) {
    mutable_image()->::BioService::Photo::MergeFrom(from.image());
  }
  if (from.template_().size() > 0) {

    template__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template__);
  }
  if (from.has_fingerprint()) {
    mutable_fingerprint()->::BioService::FingerprintCharacteristic::MergeFrom(from.fingerprint());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void FingerprintImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.FingerprintImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerprintImage::CopyFrom(const FingerprintImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.FingerprintImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerprintImage::IsInitialized() const {

  return true;
}

void FingerprintImage::Swap(FingerprintImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FingerprintImage::InternalSwap(FingerprintImage* other) {
  std::swap(owner_id_, other->owner_id_);
  std::swap(image_, other->image_);
  template__.Swap(&other->template__);
  std::swap(fingerprint_, other->fingerprint_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FingerprintImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FingerprintImage_descriptor_;
  metadata.reflection = FingerprintImage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FingerprintImage

// optional int64 owner_id = 1;
void FingerprintImage::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FingerprintImage::owner_id() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintImage.owner_id)
  return owner_id_;
}
 void FingerprintImage::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintImage.owner_id)
}

// optional .BioService.Photo image = 2;
bool FingerprintImage::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
void FingerprintImage::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::BioService::Photo& FingerprintImage::image() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintImage.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::BioService::Photo* FingerprintImage::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintImage.image)
  return image_;
}
::BioService::Photo* FingerprintImage::release_image() {
  // @@protoc_insertion_point(field_release:BioService.FingerprintImage.image)
  
  ::BioService::Photo* temp = image_;
  image_ = NULL;
  return temp;
}
void FingerprintImage::set_allocated_image(::BioService::Photo* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintImage.image)
}

// optional bytes template = 3;
void FingerprintImage::clear_template_() {
  template__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FingerprintImage::template_() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintImage.template)
  return template__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FingerprintImage::set_template_(const ::std::string& value) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.FingerprintImage.template)
}
 void FingerprintImage::set_template_(const char* value) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.FingerprintImage.template)
}
 void FingerprintImage::set_template_(const void* value, size_t size) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.FingerprintImage.template)
}
 ::std::string* FingerprintImage::mutable_template_() {
  
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintImage.template)
  return template__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FingerprintImage::release_template_() {
  // @@protoc_insertion_point(field_release:BioService.FingerprintImage.template)
  
  return template__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FingerprintImage::set_allocated_template_(::std::string* template_) {
  if (template_ != NULL) {
    
  } else {
    
  }
  template__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), template_);
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintImage.template)
}

// optional .BioService.FingerprintCharacteristic fingerprint = 4;
bool FingerprintImage::has_fingerprint() const {
  return !_is_default_instance_ && fingerprint_ != NULL;
}
void FingerprintImage::clear_fingerprint() {
  if (GetArenaNoVirtual() == NULL && fingerprint_ != NULL) delete fingerprint_;
  fingerprint_ = NULL;
}
const ::BioService::FingerprintCharacteristic& FingerprintImage::fingerprint() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintImage.fingerprint)
  return fingerprint_ != NULL ? *fingerprint_ : *default_instance_->fingerprint_;
}
::BioService::FingerprintCharacteristic* FingerprintImage::mutable_fingerprint() {
  
  if (fingerprint_ == NULL) {
    fingerprint_ = new ::BioService::FingerprintCharacteristic;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintImage.fingerprint)
  return fingerprint_;
}
::BioService::FingerprintCharacteristic* FingerprintImage::release_fingerprint() {
  // @@protoc_insertion_point(field_release:BioService.FingerprintImage.fingerprint)
  
  ::BioService::FingerprintCharacteristic* temp = fingerprint_;
  fingerprint_ = NULL;
  return temp;
}
void FingerprintImage::set_allocated_fingerprint(::BioService::FingerprintCharacteristic* fingerprint) {
  delete fingerprint_;
  fingerprint_ = fingerprint;
  if (fingerprint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintImage.fingerprint)
}

// optional .BioService.EntityState entity_state = 5;
void FingerprintImage::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState FingerprintImage::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintImage.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void FingerprintImage::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintImage.entity_state)
}

// optional .BioService.ServiceException exception = 6;
bool FingerprintImage::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void FingerprintImage::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& FingerprintImage::exception() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintImage.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* FingerprintImage::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintImage.exception)
  return exception_;
}
::BioService::ServiceException* FingerprintImage::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.FingerprintImage.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void FingerprintImage::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintImage.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatabaseFingerprintImageResponse::kFingerprintFieldNumber;
const int DatabaseFingerprintImageResponse::kImageFieldNumber;
const int DatabaseFingerprintImageResponse::kEntityStateFieldNumber;
const int DatabaseFingerprintImageResponse::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatabaseFingerprintImageResponse::DatabaseFingerprintImageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.DatabaseFingerprintImageResponse)
}

void DatabaseFingerprintImageResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  fingerprint_ = const_cast< ::BioService::FingerprintCharacteristic*>(&::BioService::FingerprintCharacteristic::default_instance());
  image_ = const_cast< ::BioService::Photo*>(&::BioService::Photo::default_instance());
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

DatabaseFingerprintImageResponse::DatabaseFingerprintImageResponse(const DatabaseFingerprintImageResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.DatabaseFingerprintImageResponse)
}

void DatabaseFingerprintImageResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  fingerprint_ = NULL;
  image_ = NULL;
  entity_state_ = 0;
  exception_ = NULL;
}

DatabaseFingerprintImageResponse::~DatabaseFingerprintImageResponse() {
  // @@protoc_insertion_point(destructor:BioService.DatabaseFingerprintImageResponse)
  SharedDtor();
}

void DatabaseFingerprintImageResponse::SharedDtor() {
  if (this != default_instance_) {
    delete fingerprint_;
    delete image_;
    delete exception_;
  }
}

void DatabaseFingerprintImageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseFingerprintImageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseFingerprintImageResponse_descriptor_;
}

const DatabaseFingerprintImageResponse& DatabaseFingerprintImageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

DatabaseFingerprintImageResponse* DatabaseFingerprintImageResponse::default_instance_ = NULL;

DatabaseFingerprintImageResponse* DatabaseFingerprintImageResponse::New(::google::protobuf::Arena* arena) const {
  DatabaseFingerprintImageResponse* n = new DatabaseFingerprintImageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatabaseFingerprintImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.DatabaseFingerprintImageResponse)
  if (GetArenaNoVirtual() == NULL && fingerprint_ != NULL) delete fingerprint_;
  fingerprint_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
  entity_state_ = 0;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}

bool DatabaseFingerprintImageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.DatabaseFingerprintImageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.FingerprintCharacteristic fingerprint = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fingerprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // optional .BioService.Photo image = 2;
      case 2: {
        if (tag == 18) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 3;
      case 3: {
        if (tag == 24) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 4;
      case 4: {
        if (tag == 34) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.DatabaseFingerprintImageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.DatabaseFingerprintImageResponse)
  return false;
#undef DO_
}

void DatabaseFingerprintImageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.DatabaseFingerprintImageResponse)
  // optional .BioService.FingerprintCharacteristic fingerprint = 1;
  if (this->has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->fingerprint_, output);
  }

  // optional .BioService.Photo image = 2;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_, output);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.DatabaseFingerprintImageResponse)
}

::google::protobuf::uint8* DatabaseFingerprintImageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.DatabaseFingerprintImageResponse)
  // optional .BioService.FingerprintCharacteristic fingerprint = 1;
  if (this->has_fingerprint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->fingerprint_, target);
  }

  // optional .BioService.Photo image = 2;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->image_, target);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.DatabaseFingerprintImageResponse)
  return target;
}

int DatabaseFingerprintImageResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.DatabaseFingerprintImageResponse)
  int total_size = 0;

  // optional .BioService.FingerprintCharacteristic fingerprint = 1;
  if (this->has_fingerprint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fingerprint_);
  }

  // optional .BioService.Photo image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // optional .BioService.EntityState entity_state = 3;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseFingerprintImageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.DatabaseFingerprintImageResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DatabaseFingerprintImageResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DatabaseFingerprintImageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.DatabaseFingerprintImageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.DatabaseFingerprintImageResponse)
    MergeFrom(*source);
  }
}

void DatabaseFingerprintImageResponse::MergeFrom(const DatabaseFingerprintImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.DatabaseFingerprintImageResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_fingerprint()) {
    mutable_fingerprint()->::BioService::FingerprintCharacteristic::MergeFrom(from.fingerprint());
  }
  if (from.has_image()) {
    mutable_image()->::BioService::Photo::MergeFrom(from.image());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void DatabaseFingerprintImageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.DatabaseFingerprintImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseFingerprintImageResponse::CopyFrom(const DatabaseFingerprintImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.DatabaseFingerprintImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseFingerprintImageResponse::IsInitialized() const {

  return true;
}

void DatabaseFingerprintImageResponse::Swap(DatabaseFingerprintImageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatabaseFingerprintImageResponse::InternalSwap(DatabaseFingerprintImageResponse* other) {
  std::swap(fingerprint_, other->fingerprint_);
  std::swap(image_, other->image_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatabaseFingerprintImageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatabaseFingerprintImageResponse_descriptor_;
  metadata.reflection = DatabaseFingerprintImageResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatabaseFingerprintImageResponse

// optional .BioService.FingerprintCharacteristic fingerprint = 1;
bool DatabaseFingerprintImageResponse::has_fingerprint() const {
  return !_is_default_instance_ && fingerprint_ != NULL;
}
void DatabaseFingerprintImageResponse::clear_fingerprint() {
  if (GetArenaNoVirtual() == NULL && fingerprint_ != NULL) delete fingerprint_;
  fingerprint_ = NULL;
}
const ::BioService::FingerprintCharacteristic& DatabaseFingerprintImageResponse::fingerprint() const {
  // @@protoc_insertion_point(field_get:BioService.DatabaseFingerprintImageResponse.fingerprint)
  return fingerprint_ != NULL ? *fingerprint_ : *default_instance_->fingerprint_;
}
::BioService::FingerprintCharacteristic* DatabaseFingerprintImageResponse::mutable_fingerprint() {
  
  if (fingerprint_ == NULL) {
    fingerprint_ = new ::BioService::FingerprintCharacteristic;
  }
  // @@protoc_insertion_point(field_mutable:BioService.DatabaseFingerprintImageResponse.fingerprint)
  return fingerprint_;
}
::BioService::FingerprintCharacteristic* DatabaseFingerprintImageResponse::release_fingerprint() {
  // @@protoc_insertion_point(field_release:BioService.DatabaseFingerprintImageResponse.fingerprint)
  
  ::BioService::FingerprintCharacteristic* temp = fingerprint_;
  fingerprint_ = NULL;
  return temp;
}
void DatabaseFingerprintImageResponse::set_allocated_fingerprint(::BioService::FingerprintCharacteristic* fingerprint) {
  delete fingerprint_;
  fingerprint_ = fingerprint;
  if (fingerprint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.DatabaseFingerprintImageResponse.fingerprint)
}

// optional .BioService.Photo image = 2;
bool DatabaseFingerprintImageResponse::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
void DatabaseFingerprintImageResponse::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::BioService::Photo& DatabaseFingerprintImageResponse::image() const {
  // @@protoc_insertion_point(field_get:BioService.DatabaseFingerprintImageResponse.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::BioService::Photo* DatabaseFingerprintImageResponse::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.DatabaseFingerprintImageResponse.image)
  return image_;
}
::BioService::Photo* DatabaseFingerprintImageResponse::release_image() {
  // @@protoc_insertion_point(field_release:BioService.DatabaseFingerprintImageResponse.image)
  
  ::BioService::Photo* temp = image_;
  image_ = NULL;
  return temp;
}
void DatabaseFingerprintImageResponse::set_allocated_image(::BioService::Photo* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.DatabaseFingerprintImageResponse.image)
}

// optional .BioService.EntityState entity_state = 3;
void DatabaseFingerprintImageResponse::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState DatabaseFingerprintImageResponse::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.DatabaseFingerprintImageResponse.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void DatabaseFingerprintImageResponse::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.DatabaseFingerprintImageResponse.entity_state)
}

// optional .BioService.ServiceException exception = 4;
bool DatabaseFingerprintImageResponse::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void DatabaseFingerprintImageResponse::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& DatabaseFingerprintImageResponse::exception() const {
  // @@protoc_insertion_point(field_get:BioService.DatabaseFingerprintImageResponse.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* DatabaseFingerprintImageResponse::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.DatabaseFingerprintImageResponse.exception)
  return exception_;
}
::BioService::ServiceException* DatabaseFingerprintImageResponse::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.DatabaseFingerprintImageResponse.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void DatabaseFingerprintImageResponse::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.DatabaseFingerprintImageResponse.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Photo::kIdFieldNumber;
const int Photo::kDatetimeFieldNumber;
const int Photo::kPhotoUrlFieldNumber;
const int Photo::kBytestringFieldNumber;
const int Photo::kWidthFieldNumber;
const int Photo::kHeightFieldNumber;
const int Photo::kOriginTypeFieldNumber;
const int Photo::kOwnerIdFieldNumber;
const int Photo::kEntityStateFieldNumber;
const int Photo::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Photo::Photo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Photo)
}

void Photo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

Photo::Photo(const Photo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Photo)
}

void Photo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  datetime_ = GOOGLE_LONGLONG(0);
  photo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = GOOGLE_LONGLONG(0);
  height_ = GOOGLE_LONGLONG(0);
  origin_type_ = 0;
  owner_id_ = GOOGLE_LONGLONG(0);
  entity_state_ = 0;
  exception_ = NULL;
}

Photo::~Photo() {
  // @@protoc_insertion_point(destructor:BioService.Photo)
  SharedDtor();
}

void Photo::SharedDtor() {
  photo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete exception_;
  }
}

void Photo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Photo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Photo_descriptor_;
}

const Photo& Photo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Photo* Photo::default_instance_ = NULL;

Photo* Photo::New(::google::protobuf::Arena* arena) const {
  Photo* n = new Photo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Photo::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Photo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Photo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Photo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, datetime_);
  ZR_(width_, origin_type_);
  photo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_state_ = 0;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Photo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Photo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_datetime;
        break;
      }

      // optional int64 datetime = 3;
      case 3: {
        if (tag == 24) {
         parse_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datetime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_photo_url;
        break;
      }

      // optional string photo_url = 4;
      case 4: {
        if (tag == 34) {
         parse_photo_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_photo_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->photo_url().data(), this->photo_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Photo.photo_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bytestring;
        break;
      }

      // optional bytes bytestring = 5;
      case 5: {
        if (tag == 42) {
         parse_bytestring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytestring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_width;
        break;
      }

      // optional int64 width = 6;
      case 6: {
        if (tag == 48) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_height;
        break;
      }

      // optional int64 height = 7;
      case 7: {
        if (tag == 56) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_origin_type;
        break;
      }

      // optional .BioService.PhotoOriginType origin_type = 8;
      case 8: {
        if (tag == 64) {
         parse_origin_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_origin_type(static_cast< ::BioService::PhotoOriginType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_owner_id;
        break;
      }

      // optional int64 owner_id = 9;
      case 9: {
        if (tag == 72) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 10;
      case 10: {
        if (tag == 80) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 11;
      case 11: {
        if (tag == 90) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Photo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Photo)
  return false;
#undef DO_
}

void Photo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Photo)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 datetime = 3;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->datetime(), output);
  }

  // optional string photo_url = 4;
  if (this->photo_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_url().data(), this->photo_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Photo.photo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->photo_url(), output);
  }

  // optional bytes bytestring = 5;
  if (this->bytestring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->bytestring(), output);
  }

  // optional int64 width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->width(), output);
  }

  // optional int64 height = 7;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->height(), output);
  }

  // optional .BioService.PhotoOriginType origin_type = 8;
  if (this->origin_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->origin_type(), output);
  }

  // optional int64 owner_id = 9;
  if (this->owner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->owner_id(), output);
  }

  // optional .BioService.EntityState entity_state = 10;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 11;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Photo)
}

::google::protobuf::uint8* Photo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Photo)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 datetime = 3;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->datetime(), target);
  }

  // optional string photo_url = 4;
  if (this->photo_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_url().data(), this->photo_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Photo.photo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->photo_url(), target);
  }

  // optional bytes bytestring = 5;
  if (this->bytestring().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->bytestring(), target);
  }

  // optional int64 width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->width(), target);
  }

  // optional int64 height = 7;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->height(), target);
  }

  // optional .BioService.PhotoOriginType origin_type = 8;
  if (this->origin_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->origin_type(), target);
  }

  // optional int64 owner_id = 9;
  if (this->owner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->owner_id(), target);
  }

  // optional .BioService.EntityState entity_state = 10;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 11;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Photo)
  return target;
}

int Photo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Photo)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional int64 datetime = 3;
  if (this->datetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->datetime());
  }

  // optional string photo_url = 4;
  if (this->photo_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->photo_url());
  }

  // optional bytes bytestring = 5;
  if (this->bytestring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bytestring());
  }

  // optional int64 width = 6;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->width());
  }

  // optional int64 height = 7;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // optional .BioService.PhotoOriginType origin_type = 8;
  if (this->origin_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->origin_type());
  }

  // optional int64 owner_id = 9;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->owner_id());
  }

  // optional .BioService.EntityState entity_state = 10;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 11;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Photo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Photo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Photo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Photo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Photo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Photo)
    MergeFrom(*source);
  }
}

void Photo::MergeFrom(const Photo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Photo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
  if (from.photo_url().size() > 0) {

    photo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photo_url_);
  }
  if (from.bytestring().size() > 0) {

    bytestring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bytestring_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.origin_type() != 0) {
    set_origin_type(from.origin_type());
  }
  if (from.owner_id() != 0) {
    set_owner_id(from.owner_id());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void Photo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Photo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Photo::CopyFrom(const Photo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Photo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Photo::IsInitialized() const {

  return true;
}

void Photo::Swap(Photo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Photo::InternalSwap(Photo* other) {
  std::swap(id_, other->id_);
  std::swap(datetime_, other->datetime_);
  photo_url_.Swap(&other->photo_url_);
  bytestring_.Swap(&other->bytestring_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(origin_type_, other->origin_type_);
  std::swap(owner_id_, other->owner_id_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Photo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Photo_descriptor_;
  metadata.reflection = Photo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Photo

// optional int64 id = 1;
void Photo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Photo::id() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.id)
  return id_;
}
 void Photo::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.id)
}

// optional int64 datetime = 3;
void Photo::clear_datetime() {
  datetime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Photo::datetime() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.datetime)
  return datetime_;
}
 void Photo::set_datetime(::google::protobuf::int64 value) {
  
  datetime_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.datetime)
}

// optional string photo_url = 4;
void Photo::clear_photo_url() {
  photo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Photo::photo_url() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.photo_url)
  return photo_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Photo::set_photo_url(const ::std::string& value) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Photo.photo_url)
}
 void Photo::set_photo_url(const char* value) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Photo.photo_url)
}
 void Photo::set_photo_url(const char* value, size_t size) {
  
  photo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Photo.photo_url)
}
 ::std::string* Photo::mutable_photo_url() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Photo.photo_url)
  return photo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Photo::release_photo_url() {
  // @@protoc_insertion_point(field_release:BioService.Photo.photo_url)
  
  return photo_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Photo::set_allocated_photo_url(::std::string* photo_url) {
  if (photo_url != NULL) {
    
  } else {
    
  }
  photo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_url);
  // @@protoc_insertion_point(field_set_allocated:BioService.Photo.photo_url)
}

// optional bytes bytestring = 5;
void Photo::clear_bytestring() {
  bytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Photo::bytestring() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.bytestring)
  return bytestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Photo::set_bytestring(const ::std::string& value) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Photo.bytestring)
}
 void Photo::set_bytestring(const char* value) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Photo.bytestring)
}
 void Photo::set_bytestring(const void* value, size_t size) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Photo.bytestring)
}
 ::std::string* Photo::mutable_bytestring() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Photo.bytestring)
  return bytestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Photo::release_bytestring() {
  // @@protoc_insertion_point(field_release:BioService.Photo.bytestring)
  
  return bytestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Photo::set_allocated_bytestring(::std::string* bytestring) {
  if (bytestring != NULL) {
    
  } else {
    
  }
  bytestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytestring);
  // @@protoc_insertion_point(field_set_allocated:BioService.Photo.bytestring)
}

// optional int64 width = 6;
void Photo::clear_width() {
  width_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Photo::width() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.width)
  return width_;
}
 void Photo::set_width(::google::protobuf::int64 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.width)
}

// optional int64 height = 7;
void Photo::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Photo::height() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.height)
  return height_;
}
 void Photo::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.height)
}

// optional .BioService.PhotoOriginType origin_type = 8;
void Photo::clear_origin_type() {
  origin_type_ = 0;
}
 ::BioService::PhotoOriginType Photo::origin_type() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.origin_type)
  return static_cast< ::BioService::PhotoOriginType >(origin_type_);
}
 void Photo::set_origin_type(::BioService::PhotoOriginType value) {
  
  origin_type_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.origin_type)
}

// optional int64 owner_id = 9;
void Photo::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Photo::owner_id() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.owner_id)
  return owner_id_;
}
 void Photo::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.owner_id)
}

// optional .BioService.EntityState entity_state = 10;
void Photo::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState Photo::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void Photo::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.Photo.entity_state)
}

// optional .BioService.ServiceException exception = 11;
bool Photo::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void Photo::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& Photo::exception() const {
  // @@protoc_insertion_point(field_get:BioService.Photo.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* Photo::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Photo.exception)
  return exception_;
}
::BioService::ServiceException* Photo::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.Photo.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void Photo::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Photo.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Visitor::kIdFieldNumber;
const int Visitor::kPersonidFieldNumber;
const int Visitor::kLocationidFieldNumber;
const int Visitor::kTimeFieldNumber;
const int Visitor::kCardNumberFieldNumber;
const int Visitor::kStatusFieldNumber;
const int Visitor::kBiometricDataFieldNumber;
const int Visitor::kEntityStateFieldNumber;
const int Visitor::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Visitor::Visitor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Visitor)
}

void Visitor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  biometricdata_ = const_cast< ::BioService::BiometricData*>(&::BioService::BiometricData::default_instance());
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

Visitor::Visitor(const Visitor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Visitor)
}

void Visitor::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  personid_ = GOOGLE_LONGLONG(0);
  locationid_ = GOOGLE_LONGLONG(0);
  time_ = GOOGLE_LONGLONG(0);
  card_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  biometricdata_ = NULL;
  entity_state_ = 0;
  exception_ = NULL;
}

Visitor::~Visitor() {
  // @@protoc_insertion_point(destructor:BioService.Visitor)
  SharedDtor();
}

void Visitor::SharedDtor() {
  card_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete biometricdata_;
    delete exception_;
  }
}

void Visitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Visitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Visitor_descriptor_;
}

const Visitor& Visitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Visitor* Visitor::default_instance_ = NULL;

Visitor* Visitor::New(::google::protobuf::Arena* arena) const {
  Visitor* n = new Visitor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Visitor::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Visitor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Visitor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Visitor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, time_);
  ZR_(status_, entity_state_);
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && biometricdata_ != NULL) delete biometricdata_;
  biometricdata_ = NULL;
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Visitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Visitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_personid;
        break;
      }

      // optional int64 personid = 2;
      case 2: {
        if (tag == 16) {
         parse_personid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &personid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_locationid;
        break;
      }

      // optional int64 locationid = 3;
      case 3: {
        if (tag == 24) {
         parse_locationid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &locationid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_card_number;
        break;
      }

      // optional string card_number = 5;
      case 5: {
        if (tag == 42) {
         parse_card_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->card_number().data(), this->card_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.Visitor.card_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional .BioService.AccessState status = 6;
      case 6: {
        if (tag == 48) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::BioService::AccessState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_biometricData;
        break;
      }

      // optional .BioService.BiometricData biometricData = 7;
      case 7: {
        if (tag == 58) {
         parse_biometricData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_biometricdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_entity_state;
        break;
      }

      // optional .BioService.EntityState entity_state = 8;
      case 8: {
        if (tag == 64) {
         parse_entity_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entity_state(static_cast< ::BioService::EntityState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 9;
      case 9: {
        if (tag == 74) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Visitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Visitor)
  return false;
#undef DO_
}

void Visitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Visitor)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 personid = 2;
  if (this->personid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->personid(), output);
  }

  // optional int64 locationid = 3;
  if (this->locationid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->locationid(), output);
  }

  // optional int64 time = 4;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  // optional string card_number = 5;
  if (this->card_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->card_number().data(), this->card_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Visitor.card_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->card_number(), output);
  }

  // optional .BioService.AccessState status = 6;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // optional .BioService.BiometricData biometricData = 7;
  if (this->has_biometricdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->biometricdata_, output);
  }

  // optional .BioService.EntityState entity_state = 8;
  if (this->entity_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->entity_state(), output);
  }

  // optional .BioService.ServiceException exception = 9;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Visitor)
}

::google::protobuf::uint8* Visitor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Visitor)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 personid = 2;
  if (this->personid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->personid(), target);
  }

  // optional int64 locationid = 3;
  if (this->locationid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->locationid(), target);
  }

  // optional int64 time = 4;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  // optional string card_number = 5;
  if (this->card_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->card_number().data(), this->card_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.Visitor.card_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->card_number(), target);
  }

  // optional .BioService.AccessState status = 6;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  // optional .BioService.BiometricData biometricData = 7;
  if (this->has_biometricdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->biometricdata_, target);
  }

  // optional .BioService.EntityState entity_state = 8;
  if (this->entity_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->entity_state(), target);
  }

  // optional .BioService.ServiceException exception = 9;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Visitor)
  return target;
}

int Visitor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Visitor)
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional int64 personid = 2;
  if (this->personid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->personid());
  }

  // optional int64 locationid = 3;
  if (this->locationid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->locationid());
  }

  // optional int64 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional string card_number = 5;
  if (this->card_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_number());
  }

  // optional .BioService.AccessState status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional .BioService.BiometricData biometricData = 7;
  if (this->has_biometricdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->biometricdata_);
  }

  // optional .BioService.EntityState entity_state = 8;
  if (this->entity_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entity_state());
  }

  // optional .BioService.ServiceException exception = 9;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Visitor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Visitor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Visitor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Visitor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Visitor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Visitor)
    MergeFrom(*source);
  }
}

void Visitor::MergeFrom(const Visitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Visitor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.personid() != 0) {
    set_personid(from.personid());
  }
  if (from.locationid() != 0) {
    set_locationid(from.locationid());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.card_number().size() > 0) {

    card_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_number_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.has_biometricdata()) {
    mutable_biometricdata()->::BioService::BiometricData::MergeFrom(from.biometricdata());
  }
  if (from.entity_state() != 0) {
    set_entity_state(from.entity_state());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void Visitor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Visitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visitor::CopyFrom(const Visitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Visitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visitor::IsInitialized() const {

  return true;
}

void Visitor::Swap(Visitor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Visitor::InternalSwap(Visitor* other) {
  std::swap(id_, other->id_);
  std::swap(personid_, other->personid_);
  std::swap(locationid_, other->locationid_);
  std::swap(time_, other->time_);
  card_number_.Swap(&other->card_number_);
  std::swap(status_, other->status_);
  std::swap(biometricdata_, other->biometricdata_);
  std::swap(entity_state_, other->entity_state_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Visitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Visitor_descriptor_;
  metadata.reflection = Visitor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Visitor

// optional int64 id = 1;
void Visitor::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Visitor::id() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.id)
  return id_;
}
 void Visitor::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.id)
}

// optional int64 personid = 2;
void Visitor::clear_personid() {
  personid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Visitor::personid() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.personid)
  return personid_;
}
 void Visitor::set_personid(::google::protobuf::int64 value) {
  
  personid_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.personid)
}

// optional int64 locationid = 3;
void Visitor::clear_locationid() {
  locationid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Visitor::locationid() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.locationid)
  return locationid_;
}
 void Visitor::set_locationid(::google::protobuf::int64 value) {
  
  locationid_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.locationid)
}

// optional int64 time = 4;
void Visitor::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Visitor::time() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.time)
  return time_;
}
 void Visitor::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.time)
}

// optional string card_number = 5;
void Visitor::clear_card_number() {
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Visitor::card_number() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.card_number)
  return card_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Visitor::set_card_number(const ::std::string& value) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.Visitor.card_number)
}
 void Visitor::set_card_number(const char* value) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.Visitor.card_number)
}
 void Visitor::set_card_number(const char* value, size_t size) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.Visitor.card_number)
}
 ::std::string* Visitor::mutable_card_number() {
  
  // @@protoc_insertion_point(field_mutable:BioService.Visitor.card_number)
  return card_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Visitor::release_card_number() {
  // @@protoc_insertion_point(field_release:BioService.Visitor.card_number)
  
  return card_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Visitor::set_allocated_card_number(::std::string* card_number) {
  if (card_number != NULL) {
    
  } else {
    
  }
  card_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_number);
  // @@protoc_insertion_point(field_set_allocated:BioService.Visitor.card_number)
}

// optional .BioService.AccessState status = 6;
void Visitor::clear_status() {
  status_ = 0;
}
 ::BioService::AccessState Visitor::status() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.status)
  return static_cast< ::BioService::AccessState >(status_);
}
 void Visitor::set_status(::BioService::AccessState value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.status)
}

// optional .BioService.BiometricData biometricData = 7;
bool Visitor::has_biometricdata() const {
  return !_is_default_instance_ && biometricdata_ != NULL;
}
void Visitor::clear_biometricdata() {
  if (GetArenaNoVirtual() == NULL && biometricdata_ != NULL) delete biometricdata_;
  biometricdata_ = NULL;
}
const ::BioService::BiometricData& Visitor::biometricdata() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.biometricData)
  return biometricdata_ != NULL ? *biometricdata_ : *default_instance_->biometricdata_;
}
::BioService::BiometricData* Visitor::mutable_biometricdata() {
  
  if (biometricdata_ == NULL) {
    biometricdata_ = new ::BioService::BiometricData;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Visitor.biometricData)
  return biometricdata_;
}
::BioService::BiometricData* Visitor::release_biometricdata() {
  // @@protoc_insertion_point(field_release:BioService.Visitor.biometricData)
  
  ::BioService::BiometricData* temp = biometricdata_;
  biometricdata_ = NULL;
  return temp;
}
void Visitor::set_allocated_biometricdata(::BioService::BiometricData* biometricdata) {
  delete biometricdata_;
  biometricdata_ = biometricdata;
  if (biometricdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Visitor.biometricData)
}

// optional .BioService.EntityState entity_state = 8;
void Visitor::clear_entity_state() {
  entity_state_ = 0;
}
 ::BioService::EntityState Visitor::entity_state() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.entity_state)
  return static_cast< ::BioService::EntityState >(entity_state_);
}
 void Visitor::set_entity_state(::BioService::EntityState value) {
  
  entity_state_ = value;
  // @@protoc_insertion_point(field_set:BioService.Visitor.entity_state)
}

// optional .BioService.ServiceException exception = 9;
bool Visitor::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void Visitor::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& Visitor::exception() const {
  // @@protoc_insertion_point(field_get:BioService.Visitor.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* Visitor::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.Visitor.exception)
  return exception_;
}
::BioService::ServiceException* Visitor::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.Visitor.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void Visitor::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.Visitor.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisitorList::kVisitorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisitorList::VisitorList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.VisitorList)
}

void VisitorList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VisitorList::VisitorList(const VisitorList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.VisitorList)
}

void VisitorList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

VisitorList::~VisitorList() {
  // @@protoc_insertion_point(destructor:BioService.VisitorList)
  SharedDtor();
}

void VisitorList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisitorList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisitorList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisitorList_descriptor_;
}

const VisitorList& VisitorList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

VisitorList* VisitorList::default_instance_ = NULL;

VisitorList* VisitorList::New(::google::protobuf::Arena* arena) const {
  VisitorList* n = new VisitorList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisitorList::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.VisitorList)
  visitors_.Clear();
}

bool VisitorList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.VisitorList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.Visitor visitors = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_visitors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_visitors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_visitors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.VisitorList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.VisitorList)
  return false;
#undef DO_
}

void VisitorList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.VisitorList)
  // repeated .BioService.Visitor visitors = 1;
  for (unsigned int i = 0, n = this->visitors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->visitors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.VisitorList)
}

::google::protobuf::uint8* VisitorList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.VisitorList)
  // repeated .BioService.Visitor visitors = 1;
  for (unsigned int i = 0, n = this->visitors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->visitors(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.VisitorList)
  return target;
}

int VisitorList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.VisitorList)
  int total_size = 0;

  // repeated .BioService.Visitor visitors = 1;
  total_size += 1 * this->visitors_size();
  for (int i = 0; i < this->visitors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visitors(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisitorList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.VisitorList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VisitorList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VisitorList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.VisitorList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.VisitorList)
    MergeFrom(*source);
  }
}

void VisitorList::MergeFrom(const VisitorList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.VisitorList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  visitors_.MergeFrom(from.visitors_);
}

void VisitorList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.VisitorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisitorList::CopyFrom(const VisitorList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.VisitorList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisitorList::IsInitialized() const {

  return true;
}

void VisitorList::Swap(VisitorList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisitorList::InternalSwap(VisitorList* other) {
  visitors_.UnsafeArenaSwap(&other->visitors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisitorList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisitorList_descriptor_;
  metadata.reflection = VisitorList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VisitorList

// repeated .BioService.Visitor visitors = 1;
int VisitorList::visitors_size() const {
  return visitors_.size();
}
void VisitorList::clear_visitors() {
  visitors_.Clear();
}
const ::BioService::Visitor& VisitorList::visitors(int index) const {
  // @@protoc_insertion_point(field_get:BioService.VisitorList.visitors)
  return visitors_.Get(index);
}
::BioService::Visitor* VisitorList::mutable_visitors(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.VisitorList.visitors)
  return visitors_.Mutable(index);
}
::BioService::Visitor* VisitorList::add_visitors() {
  // @@protoc_insertion_point(field_add:BioService.VisitorList.visitors)
  return visitors_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Visitor >*
VisitorList::mutable_visitors() {
  // @@protoc_insertion_point(field_mutable_list:BioService.VisitorList.visitors)
  return &visitors_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Visitor >&
VisitorList::visitors() const {
  // @@protoc_insertion_point(field_list:BioService.VisitorList.visitors)
  return visitors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationList::kLocationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationList::LocationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.LocationList)
}

void LocationList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LocationList::LocationList(const LocationList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.LocationList)
}

void LocationList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

LocationList::~LocationList() {
  // @@protoc_insertion_point(destructor:BioService.LocationList)
  SharedDtor();
}

void LocationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationList_descriptor_;
}

const LocationList& LocationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

LocationList* LocationList::default_instance_ = NULL;

LocationList* LocationList::New(::google::protobuf::Arena* arena) const {
  LocationList* n = new LocationList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocationList::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.LocationList)
  locations_.Clear();
}

bool LocationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.LocationList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.Location locations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_locations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_locations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.LocationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.LocationList)
  return false;
#undef DO_
}

void LocationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.LocationList)
  // repeated .BioService.Location locations = 1;
  for (unsigned int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->locations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.LocationList)
}

::google::protobuf::uint8* LocationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.LocationList)
  // repeated .BioService.Location locations = 1;
  for (unsigned int i = 0, n = this->locations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->locations(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.LocationList)
  return target;
}

int LocationList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.LocationList)
  int total_size = 0;

  // repeated .BioService.Location locations = 1;
  total_size += 1 * this->locations_size();
  for (int i = 0; i < this->locations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->locations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.LocationList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LocationList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.LocationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.LocationList)
    MergeFrom(*source);
  }
}

void LocationList::MergeFrom(const LocationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.LocationList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  locations_.MergeFrom(from.locations_);
}

void LocationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.LocationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationList::CopyFrom(const LocationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.LocationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationList::IsInitialized() const {

  return true;
}

void LocationList::Swap(LocationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationList::InternalSwap(LocationList* other) {
  locations_.UnsafeArenaSwap(&other->locations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationList_descriptor_;
  metadata.reflection = LocationList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocationList

// repeated .BioService.Location locations = 1;
int LocationList::locations_size() const {
  return locations_.size();
}
void LocationList::clear_locations() {
  locations_.Clear();
}
const ::BioService::Location& LocationList::locations(int index) const {
  // @@protoc_insertion_point(field_get:BioService.LocationList.locations)
  return locations_.Get(index);
}
::BioService::Location* LocationList::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.LocationList.locations)
  return locations_.Mutable(index);
}
::BioService::Location* LocationList::add_locations() {
  // @@protoc_insertion_point(field_add:BioService.LocationList.locations)
  return locations_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Location >*
LocationList::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:BioService.LocationList.locations)
  return &locations_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Location >&
LocationList::locations() const {
  // @@protoc_insertion_point(field_list:BioService.LocationList.locations)
  return locations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PersonList::kPersonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PersonList::PersonList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.PersonList)
}

void PersonList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PersonList::PersonList(const PersonList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.PersonList)
}

void PersonList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PersonList::~PersonList() {
  // @@protoc_insertion_point(destructor:BioService.PersonList)
  SharedDtor();
}

void PersonList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PersonList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonList_descriptor_;
}

const PersonList& PersonList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

PersonList* PersonList::default_instance_ = NULL;

PersonList* PersonList::New(::google::protobuf::Arena* arena) const {
  PersonList* n = new PersonList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PersonList::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.PersonList)
  persons_.Clear();
}

bool PersonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.PersonList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.Person persons = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_persons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_persons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_persons;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.PersonList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.PersonList)
  return false;
#undef DO_
}

void PersonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.PersonList)
  // repeated .BioService.Person persons = 1;
  for (unsigned int i = 0, n = this->persons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->persons(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.PersonList)
}

::google::protobuf::uint8* PersonList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.PersonList)
  // repeated .BioService.Person persons = 1;
  for (unsigned int i = 0, n = this->persons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->persons(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.PersonList)
  return target;
}

int PersonList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.PersonList)
  int total_size = 0;

  // repeated .BioService.Person persons = 1;
  total_size += 1 * this->persons_size();
  for (int i = 0; i < this->persons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->persons(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.PersonList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PersonList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PersonList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.PersonList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.PersonList)
    MergeFrom(*source);
  }
}

void PersonList::MergeFrom(const PersonList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.PersonList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  persons_.MergeFrom(from.persons_);
}

void PersonList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.PersonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonList::CopyFrom(const PersonList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.PersonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonList::IsInitialized() const {

  return true;
}

void PersonList::Swap(PersonList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PersonList::InternalSwap(PersonList* other) {
  persons_.UnsafeArenaSwap(&other->persons_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PersonList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonList_descriptor_;
  metadata.reflection = PersonList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PersonList

// repeated .BioService.Person persons = 1;
int PersonList::persons_size() const {
  return persons_.size();
}
void PersonList::clear_persons() {
  persons_.Clear();
}
const ::BioService::Person& PersonList::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PersonList.persons)
  return persons_.Get(index);
}
::BioService::Person* PersonList::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PersonList.persons)
  return persons_.Mutable(index);
}
::BioService::Person* PersonList::add_persons() {
  // @@protoc_insertion_point(field_add:BioService.PersonList.persons)
  return persons_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Person >*
PersonList::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PersonList.persons)
  return &persons_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Person >&
PersonList::persons() const {
  // @@protoc_insertion_point(field_list:BioService.PersonList.persons)
  return persons_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhotoList::kPhotosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhotoList::PhotoList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.PhotoList)
}

void PhotoList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PhotoList::PhotoList(const PhotoList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.PhotoList)
}

void PhotoList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PhotoList::~PhotoList() {
  // @@protoc_insertion_point(destructor:BioService.PhotoList)
  SharedDtor();
}

void PhotoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PhotoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoList_descriptor_;
}

const PhotoList& PhotoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

PhotoList* PhotoList::default_instance_ = NULL;

PhotoList* PhotoList::New(::google::protobuf::Arena* arena) const {
  PhotoList* n = new PhotoList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotoList::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.PhotoList)
  photos_.Clear();
}

bool PhotoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.PhotoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.Photo photos = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_photos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.PhotoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.PhotoList)
  return false;
#undef DO_
}

void PhotoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.PhotoList)
  // repeated .BioService.Photo photos = 1;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->photos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.PhotoList)
}

::google::protobuf::uint8* PhotoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.PhotoList)
  // repeated .BioService.Photo photos = 1;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->photos(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.PhotoList)
  return target;
}

int PhotoList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.PhotoList)
  int total_size = 0;

  // repeated .BioService.Photo photos = 1;
  total_size += 1 * this->photos_size();
  for (int i = 0; i < this->photos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->photos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.PhotoList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PhotoList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotoList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.PhotoList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.PhotoList)
    MergeFrom(*source);
  }
}

void PhotoList::MergeFrom(const PhotoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.PhotoList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  photos_.MergeFrom(from.photos_);
}

void PhotoList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.PhotoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoList::CopyFrom(const PhotoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.PhotoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoList::IsInitialized() const {

  return true;
}

void PhotoList::Swap(PhotoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotoList::InternalSwap(PhotoList* other) {
  photos_.UnsafeArenaSwap(&other->photos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoList_descriptor_;
  metadata.reflection = PhotoList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotoList

// repeated .BioService.Photo photos = 1;
int PhotoList::photos_size() const {
  return photos_.size();
}
void PhotoList::clear_photos() {
  photos_.Clear();
}
const ::BioService::Photo& PhotoList::photos(int index) const {
  // @@protoc_insertion_point(field_get:BioService.PhotoList.photos)
  return photos_.Get(index);
}
::BioService::Photo* PhotoList::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.PhotoList.photos)
  return photos_.Mutable(index);
}
::BioService::Photo* PhotoList::add_photos() {
  // @@protoc_insertion_point(field_add:BioService.PhotoList.photos)
  return photos_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Photo >*
PhotoList::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:BioService.PhotoList.photos)
  return &photos_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Photo >&
PhotoList::photos() const {
  // @@protoc_insertion_point(field_list:BioService.PhotoList.photos)
  return photos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardList::kCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardList::CardList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.CardList)
}

void CardList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CardList::CardList(const CardList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.CardList)
}

void CardList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CardList::~CardList() {
  // @@protoc_insertion_point(destructor:BioService.CardList)
  SharedDtor();
}

void CardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardList_descriptor_;
}

const CardList& CardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

CardList* CardList::default_instance_ = NULL;

CardList* CardList::New(::google::protobuf::Arena* arena) const {
  CardList* n = new CardList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardList::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.CardList)
  cards_.Clear();
}

bool CardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.CardList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.Card cards = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_cards;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.CardList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.CardList)
  return false;
#undef DO_
}

void CardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.CardList)
  // repeated .BioService.Card cards = 1;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cards(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.CardList)
}

::google::protobuf::uint8* CardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.CardList)
  // repeated .BioService.Card cards = 1;
  for (unsigned int i = 0, n = this->cards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cards(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.CardList)
  return target;
}

int CardList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.CardList)
  int total_size = 0;

  // repeated .BioService.Card cards = 1;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.CardList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CardList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CardList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.CardList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.CardList)
    MergeFrom(*source);
  }
}

void CardList::MergeFrom(const CardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.CardList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cards_.MergeFrom(from.cards_);
}

void CardList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.CardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardList::CopyFrom(const CardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.CardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardList::IsInitialized() const {

  return true;
}

void CardList::Swap(CardList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardList::InternalSwap(CardList* other) {
  cards_.UnsafeArenaSwap(&other->cards_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardList_descriptor_;
  metadata.reflection = CardList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardList

// repeated .BioService.Card cards = 1;
int CardList::cards_size() const {
  return cards_.size();
}
void CardList::clear_cards() {
  cards_.Clear();
}
const ::BioService::Card& CardList::cards(int index) const {
  // @@protoc_insertion_point(field_get:BioService.CardList.cards)
  return cards_.Get(index);
}
::BioService::Card* CardList::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.CardList.cards)
  return cards_.Mutable(index);
}
::BioService::Card* CardList::add_cards() {
  // @@protoc_insertion_point(field_add:BioService.CardList.cards)
  return cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Card >*
CardList::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:BioService.CardList.cards)
  return &cards_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Card >&
CardList::cards() const {
  // @@protoc_insertion_point(field_list:BioService.CardList.cards)
  return cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BiometricDataList::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BiometricDataList::BiometricDataList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.BiometricDataList)
}

void BiometricDataList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BiometricDataList::BiometricDataList(const BiometricDataList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.BiometricDataList)
}

void BiometricDataList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BiometricDataList::~BiometricDataList() {
  // @@protoc_insertion_point(destructor:BioService.BiometricDataList)
  SharedDtor();
}

void BiometricDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BiometricDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiometricDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiometricDataList_descriptor_;
}

const BiometricDataList& BiometricDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

BiometricDataList* BiometricDataList::default_instance_ = NULL;

BiometricDataList* BiometricDataList::New(::google::protobuf::Arena* arena) const {
  BiometricDataList* n = new BiometricDataList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BiometricDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.BiometricDataList)
  data_.Clear();
}

bool BiometricDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.BiometricDataList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.BiometricData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.BiometricDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.BiometricDataList)
  return false;
#undef DO_
}

void BiometricDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.BiometricDataList)
  // repeated .BioService.BiometricData data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.BiometricDataList)
}

::google::protobuf::uint8* BiometricDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.BiometricDataList)
  // repeated .BioService.BiometricData data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.BiometricDataList)
  return target;
}

int BiometricDataList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.BiometricDataList)
  int total_size = 0;

  // repeated .BioService.BiometricData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiometricDataList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.BiometricDataList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BiometricDataList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BiometricDataList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.BiometricDataList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.BiometricDataList)
    MergeFrom(*source);
  }
}

void BiometricDataList::MergeFrom(const BiometricDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.BiometricDataList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  data_.MergeFrom(from.data_);
}

void BiometricDataList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.BiometricDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiometricDataList::CopyFrom(const BiometricDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.BiometricDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiometricDataList::IsInitialized() const {

  return true;
}

void BiometricDataList::Swap(BiometricDataList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BiometricDataList::InternalSwap(BiometricDataList* other) {
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BiometricDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiometricDataList_descriptor_;
  metadata.reflection = BiometricDataList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BiometricDataList

// repeated .BioService.BiometricData data = 1;
int BiometricDataList::data_size() const {
  return data_.size();
}
void BiometricDataList::clear_data() {
  data_.Clear();
}
const ::BioService::BiometricData& BiometricDataList::data(int index) const {
  // @@protoc_insertion_point(field_get:BioService.BiometricDataList.data)
  return data_.Get(index);
}
::BioService::BiometricData* BiometricDataList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.BiometricDataList.data)
  return data_.Mutable(index);
}
::BioService::BiometricData* BiometricDataList::add_data() {
  // @@protoc_insertion_point(field_add:BioService.BiometricDataList.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::BiometricData >*
BiometricDataList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:BioService.BiometricDataList.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::BiometricData >&
BiometricDataList::data() const {
  // @@protoc_insertion_point(field_list:BioService.BiometricDataList.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kGoodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  good_ = false;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:BioService.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Response)
  good_ = false;
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool good = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &good_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Response)
  // optional bool good = 1;
  if (this->good() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->good(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Response)
  // optional bool good = 1;
  if (this->good() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->good(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Response)
  int total_size = 0;

  // optional bool good = 1;
  if (this->good() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.good() != 0) {
    set_good(from.good());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(good_, other->good_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional bool good = 1;
void Response::clear_good() {
  good_ = false;
}
 bool Response::good() const {
  // @@protoc_insertion_point(field_get:BioService.Response.good)
  return good_;
}
 void Response::set_good(bool value) {
  
  good_ = value;
  // @@protoc_insertion_point(field_set:BioService.Response.good)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerificationData::kTargetImageFieldNumber;
const int VerificationData::kComparisonImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerificationData::VerificationData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.VerificationData)
}

void VerificationData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  target_image_ = const_cast< ::BioService::Photo*>(&::BioService::Photo::default_instance());
  comparison_image_ = const_cast< ::BioService::Photo*>(&::BioService::Photo::default_instance());
}

VerificationData::VerificationData(const VerificationData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.VerificationData)
}

void VerificationData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  target_image_ = NULL;
  comparison_image_ = NULL;
}

VerificationData::~VerificationData() {
  // @@protoc_insertion_point(destructor:BioService.VerificationData)
  SharedDtor();
}

void VerificationData::SharedDtor() {
  if (this != default_instance_) {
    delete target_image_;
    delete comparison_image_;
  }
}

void VerificationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerificationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerificationData_descriptor_;
}

const VerificationData& VerificationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

VerificationData* VerificationData::default_instance_ = NULL;

VerificationData* VerificationData::New(::google::protobuf::Arena* arena) const {
  VerificationData* n = new VerificationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.VerificationData)
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
  if (GetArenaNoVirtual() == NULL && comparison_image_ != NULL) delete comparison_image_;
  comparison_image_ = NULL;
}

bool VerificationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.VerificationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.Photo target_image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_comparison_image;
        break;
      }

      // optional .BioService.Photo comparison_image = 2;
      case 2: {
        if (tag == 18) {
         parse_comparison_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comparison_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.VerificationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.VerificationData)
  return false;
#undef DO_
}

void VerificationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.VerificationData)
  // optional .BioService.Photo target_image = 1;
  if (this->has_target_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->target_image_, output);
  }

  // optional .BioService.Photo comparison_image = 2;
  if (this->has_comparison_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->comparison_image_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.VerificationData)
}

::google::protobuf::uint8* VerificationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.VerificationData)
  // optional .BioService.Photo target_image = 1;
  if (this->has_target_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->target_image_, target);
  }

  // optional .BioService.Photo comparison_image = 2;
  if (this->has_comparison_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->comparison_image_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.VerificationData)
  return target;
}

int VerificationData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.VerificationData)
  int total_size = 0;

  // optional .BioService.Photo target_image = 1;
  if (this->has_target_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_image_);
  }

  // optional .BioService.Photo comparison_image = 2;
  if (this->has_comparison_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comparison_image_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerificationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.VerificationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VerificationData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VerificationData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.VerificationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.VerificationData)
    MergeFrom(*source);
  }
}

void VerificationData::MergeFrom(const VerificationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.VerificationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_target_image()) {
    mutable_target_image()->::BioService::Photo::MergeFrom(from.target_image());
  }
  if (from.has_comparison_image()) {
    mutable_comparison_image()->::BioService::Photo::MergeFrom(from.comparison_image());
  }
}

void VerificationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.VerificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerificationData::CopyFrom(const VerificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.VerificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerificationData::IsInitialized() const {

  return true;
}

void VerificationData::Swap(VerificationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerificationData::InternalSwap(VerificationData* other) {
  std::swap(target_image_, other->target_image_);
  std::swap(comparison_image_, other->comparison_image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerificationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerificationData_descriptor_;
  metadata.reflection = VerificationData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerificationData

// optional .BioService.Photo target_image = 1;
bool VerificationData::has_target_image() const {
  return !_is_default_instance_ && target_image_ != NULL;
}
void VerificationData::clear_target_image() {
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
}
const ::BioService::Photo& VerificationData::target_image() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationData.target_image)
  return target_image_ != NULL ? *target_image_ : *default_instance_->target_image_;
}
::BioService::Photo* VerificationData::mutable_target_image() {
  
  if (target_image_ == NULL) {
    target_image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.VerificationData.target_image)
  return target_image_;
}
::BioService::Photo* VerificationData::release_target_image() {
  // @@protoc_insertion_point(field_release:BioService.VerificationData.target_image)
  
  ::BioService::Photo* temp = target_image_;
  target_image_ = NULL;
  return temp;
}
void VerificationData::set_allocated_target_image(::BioService::Photo* target_image) {
  delete target_image_;
  target_image_ = target_image;
  if (target_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.VerificationData.target_image)
}

// optional .BioService.Photo comparison_image = 2;
bool VerificationData::has_comparison_image() const {
  return !_is_default_instance_ && comparison_image_ != NULL;
}
void VerificationData::clear_comparison_image() {
  if (GetArenaNoVirtual() == NULL && comparison_image_ != NULL) delete comparison_image_;
  comparison_image_ = NULL;
}
const ::BioService::Photo& VerificationData::comparison_image() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationData.comparison_image)
  return comparison_image_ != NULL ? *comparison_image_ : *default_instance_->comparison_image_;
}
::BioService::Photo* VerificationData::mutable_comparison_image() {
  
  if (comparison_image_ == NULL) {
    comparison_image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.VerificationData.comparison_image)
  return comparison_image_;
}
::BioService::Photo* VerificationData::release_comparison_image() {
  // @@protoc_insertion_point(field_release:BioService.VerificationData.comparison_image)
  
  ::BioService::Photo* temp = comparison_image_;
  comparison_image_ = NULL;
  return temp;
}
void VerificationData::set_allocated_comparison_image(::BioService::Photo* comparison_image) {
  delete comparison_image_;
  comparison_image_ = comparison_image;
  if (comparison_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.VerificationData.comparison_image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdentificationData::kTargetImageFieldNumber;
const int IdentificationData::kPopulationIdFieldNumber;
const int IdentificationData::kComparisonImagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdentificationData::IdentificationData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.IdentificationData)
}

void IdentificationData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  target_image_ = const_cast< ::BioService::Photo*>(&::BioService::Photo::default_instance());
}

IdentificationData::IdentificationData(const IdentificationData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.IdentificationData)
}

void IdentificationData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  target_image_ = NULL;
  population_id_ = GOOGLE_LONGLONG(0);
}

IdentificationData::~IdentificationData() {
  // @@protoc_insertion_point(destructor:BioService.IdentificationData)
  SharedDtor();
}

void IdentificationData::SharedDtor() {
  if (this != default_instance_) {
    delete target_image_;
  }
}

void IdentificationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdentificationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdentificationData_descriptor_;
}

const IdentificationData& IdentificationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

IdentificationData* IdentificationData::default_instance_ = NULL;

IdentificationData* IdentificationData::New(::google::protobuf::Arena* arena) const {
  IdentificationData* n = new IdentificationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IdentificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.IdentificationData)
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
  population_id_ = GOOGLE_LONGLONG(0);
  comparison_images_.Clear();
}

bool IdentificationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.IdentificationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.Photo target_image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_population_id;
        break;
      }

      // optional int64 population_id = 2;
      case 2: {
        if (tag == 16) {
         parse_population_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &population_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_comparison_images;
        break;
      }

      // repeated .BioService.Photo comparison_images = 3;
      case 3: {
        if (tag == 26) {
         parse_comparison_images:
          DO_(input->IncrementRecursionDepth());
         parse_loop_comparison_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_comparison_images()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_comparison_images;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.IdentificationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.IdentificationData)
  return false;
#undef DO_
}

void IdentificationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.IdentificationData)
  // optional .BioService.Photo target_image = 1;
  if (this->has_target_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->target_image_, output);
  }

  // optional int64 population_id = 2;
  if (this->population_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->population_id(), output);
  }

  // repeated .BioService.Photo comparison_images = 3;
  for (unsigned int i = 0, n = this->comparison_images_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->comparison_images(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.IdentificationData)
}

::google::protobuf::uint8* IdentificationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.IdentificationData)
  // optional .BioService.Photo target_image = 1;
  if (this->has_target_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->target_image_, target);
  }

  // optional int64 population_id = 2;
  if (this->population_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->population_id(), target);
  }

  // repeated .BioService.Photo comparison_images = 3;
  for (unsigned int i = 0, n = this->comparison_images_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->comparison_images(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.IdentificationData)
  return target;
}

int IdentificationData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.IdentificationData)
  int total_size = 0;

  // optional .BioService.Photo target_image = 1;
  if (this->has_target_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_image_);
  }

  // optional int64 population_id = 2;
  if (this->population_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->population_id());
  }

  // repeated .BioService.Photo comparison_images = 3;
  total_size += 1 * this->comparison_images_size();
  for (int i = 0; i < this->comparison_images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comparison_images(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdentificationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.IdentificationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IdentificationData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IdentificationData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.IdentificationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.IdentificationData)
    MergeFrom(*source);
  }
}

void IdentificationData::MergeFrom(const IdentificationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.IdentificationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  comparison_images_.MergeFrom(from.comparison_images_);
  if (from.has_target_image()) {
    mutable_target_image()->::BioService::Photo::MergeFrom(from.target_image());
  }
  if (from.population_id() != 0) {
    set_population_id(from.population_id());
  }
}

void IdentificationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.IdentificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentificationData::CopyFrom(const IdentificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.IdentificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentificationData::IsInitialized() const {

  return true;
}

void IdentificationData::Swap(IdentificationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdentificationData::InternalSwap(IdentificationData* other) {
  std::swap(target_image_, other->target_image_);
  std::swap(population_id_, other->population_id_);
  comparison_images_.UnsafeArenaSwap(&other->comparison_images_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IdentificationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdentificationData_descriptor_;
  metadata.reflection = IdentificationData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IdentificationData

// optional .BioService.Photo target_image = 1;
bool IdentificationData::has_target_image() const {
  return !_is_default_instance_ && target_image_ != NULL;
}
void IdentificationData::clear_target_image() {
  if (GetArenaNoVirtual() == NULL && target_image_ != NULL) delete target_image_;
  target_image_ = NULL;
}
const ::BioService::Photo& IdentificationData::target_image() const {
  // @@protoc_insertion_point(field_get:BioService.IdentificationData.target_image)
  return target_image_ != NULL ? *target_image_ : *default_instance_->target_image_;
}
::BioService::Photo* IdentificationData::mutable_target_image() {
  
  if (target_image_ == NULL) {
    target_image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.IdentificationData.target_image)
  return target_image_;
}
::BioService::Photo* IdentificationData::release_target_image() {
  // @@protoc_insertion_point(field_release:BioService.IdentificationData.target_image)
  
  ::BioService::Photo* temp = target_image_;
  target_image_ = NULL;
  return temp;
}
void IdentificationData::set_allocated_target_image(::BioService::Photo* target_image) {
  delete target_image_;
  target_image_ = target_image;
  if (target_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.IdentificationData.target_image)
}

// optional int64 population_id = 2;
void IdentificationData::clear_population_id() {
  population_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 IdentificationData::population_id() const {
  // @@protoc_insertion_point(field_get:BioService.IdentificationData.population_id)
  return population_id_;
}
 void IdentificationData::set_population_id(::google::protobuf::int64 value) {
  
  population_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.IdentificationData.population_id)
}

// repeated .BioService.Photo comparison_images = 3;
int IdentificationData::comparison_images_size() const {
  return comparison_images_.size();
}
void IdentificationData::clear_comparison_images() {
  comparison_images_.Clear();
}
const ::BioService::Photo& IdentificationData::comparison_images(int index) const {
  // @@protoc_insertion_point(field_get:BioService.IdentificationData.comparison_images)
  return comparison_images_.Get(index);
}
::BioService::Photo* IdentificationData::mutable_comparison_images(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.IdentificationData.comparison_images)
  return comparison_images_.Mutable(index);
}
::BioService::Photo* IdentificationData::add_comparison_images() {
  // @@protoc_insertion_point(field_add:BioService.IdentificationData.comparison_images)
  return comparison_images_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Photo >*
IdentificationData::mutable_comparison_images() {
  // @@protoc_insertion_point(field_mutable_list:BioService.IdentificationData.comparison_images)
  return &comparison_images_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Photo >&
IdentificationData::comparison_images() const {
  // @@protoc_insertion_point(field_list:BioService.IdentificationData.comparison_images)
  return comparison_images_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Match::kFaceIdFieldNumber;
const int Match::kMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Match::Match()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Match)
}

void Match::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Match::Match(const Match& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Match)
}

void Match::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  face_id_ = GOOGLE_LONGLONG(0);
  match_ = 0;
}

Match::~Match() {
  // @@protoc_insertion_point(destructor:BioService.Match)
  SharedDtor();
}

void Match::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Match::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Match_descriptor_;
}

const Match& Match::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Match* Match::default_instance_ = NULL;

Match* Match::New(::google::protobuf::Arena* arena) const {
  Match* n = new Match;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Match::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Match)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Match, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Match*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(face_id_, match_);

#undef ZR_HELPER_
#undef ZR_

}

bool Match::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Match)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 face_id = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &face_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_match;
        break;
      }

      // optional float match = 3;
      case 3: {
        if (tag == 29) {
         parse_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &match_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Match)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Match)
  return false;
#undef DO_
}

void Match::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Match)
  // optional int64 face_id = 2;
  if (this->face_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->face_id(), output);
  }

  // optional float match = 3;
  if (this->match() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->match(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Match)
}

::google::protobuf::uint8* Match::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Match)
  // optional int64 face_id = 2;
  if (this->face_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->face_id(), target);
  }

  // optional float match = 3;
  if (this->match() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->match(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Match)
  return target;
}

int Match::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Match)
  int total_size = 0;

  // optional int64 face_id = 2;
  if (this->face_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->face_id());
  }

  // optional float match = 3;
  if (this->match() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Match)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Match* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Match>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Match)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Match)
    MergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Match)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.face_id() != 0) {
    set_face_id(from.face_id());
  }
  if (from.match() != 0) {
    set_match(from.match());
  }
}

void Match::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {

  return true;
}

void Match::Swap(Match* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Match::InternalSwap(Match* other) {
  std::swap(face_id_, other->face_id_);
  std::swap(match_, other->match_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Match::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Match_descriptor_;
  metadata.reflection = Match_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Match

// optional int64 face_id = 2;
void Match::clear_face_id() {
  face_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Match::face_id() const {
  // @@protoc_insertion_point(field_get:BioService.Match.face_id)
  return face_id_;
}
 void Match::set_face_id(::google::protobuf::int64 value) {
  
  face_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Match.face_id)
}

// optional float match = 3;
void Match::clear_match() {
  match_ = 0;
}
 float Match::match() const {
  // @@protoc_insertion_point(field_get:BioService.Match.match)
  return match_;
}
 void Match::set_match(float value) {
  
  match_ = value;
  // @@protoc_insertion_point(field_set:BioService.Match.match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Matches::kFaceIdFieldNumber;
const int Matches::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Matches::Matches()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.Matches)
}

void Matches::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Matches::Matches(const Matches& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.Matches)
}

void Matches::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  face_id_ = GOOGLE_LONGLONG(0);
}

Matches::~Matches() {
  // @@protoc_insertion_point(destructor:BioService.Matches)
  SharedDtor();
}

void Matches::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Matches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Matches_descriptor_;
}

const Matches& Matches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

Matches* Matches::default_instance_ = NULL;

Matches* Matches::New(::google::protobuf::Arena* arena) const {
  Matches* n = new Matches;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Matches::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.Matches)
  face_id_ = GOOGLE_LONGLONG(0);
  matches_.Clear();
}

bool Matches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.Matches)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 face_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &face_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_matches;
        break;
      }

      // repeated .BioService.Match matches = 2;
      case 2: {
        if (tag == 18) {
         parse_matches:
          DO_(input->IncrementRecursionDepth());
         parse_loop_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_matches;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.Matches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.Matches)
  return false;
#undef DO_
}

void Matches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.Matches)
  // optional int64 face_id = 1;
  if (this->face_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->face_id(), output);
  }

  // repeated .BioService.Match matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matches(i), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.Matches)
}

::google::protobuf::uint8* Matches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.Matches)
  // optional int64 face_id = 1;
  if (this->face_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->face_id(), target);
  }

  // repeated .BioService.Match matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matches(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.Matches)
  return target;
}

int Matches::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.Matches)
  int total_size = 0;

  // optional int64 face_id = 1;
  if (this->face_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->face_id());
  }

  // repeated .BioService.Match matches = 2;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matches::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.Matches)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Matches* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Matches>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.Matches)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.Matches)
    MergeFrom(*source);
  }
}

void Matches::MergeFrom(const Matches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.Matches)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  matches_.MergeFrom(from.matches_);
  if (from.face_id() != 0) {
    set_face_id(from.face_id());
  }
}

void Matches::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.Matches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matches::CopyFrom(const Matches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.Matches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matches::IsInitialized() const {

  return true;
}

void Matches::Swap(Matches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Matches::InternalSwap(Matches* other) {
  std::swap(face_id_, other->face_id_);
  matches_.UnsafeArenaSwap(&other->matches_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Matches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Matches_descriptor_;
  metadata.reflection = Matches_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Matches

// optional int64 face_id = 1;
void Matches::clear_face_id() {
  face_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Matches::face_id() const {
  // @@protoc_insertion_point(field_get:BioService.Matches.face_id)
  return face_id_;
}
 void Matches::set_face_id(::google::protobuf::int64 value) {
  
  face_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.Matches.face_id)
}

// repeated .BioService.Match matches = 2;
int Matches::matches_size() const {
  return matches_.size();
}
void Matches::clear_matches() {
  matches_.Clear();
}
const ::BioService::Match& Matches::matches(int index) const {
  // @@protoc_insertion_point(field_get:BioService.Matches.matches)
  return matches_.Get(index);
}
::BioService::Match* Matches::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.Matches.matches)
  return matches_.Mutable(index);
}
::BioService::Match* Matches::add_matches() {
  // @@protoc_insertion_point(field_add:BioService.Matches.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Match >*
Matches::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:BioService.Matches.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Match >&
Matches::matches() const {
  // @@protoc_insertion_point(field_list:BioService.Matches.matches)
  return matches_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceSearchResponse::kPortraitsFieldNumber;
const int FaceSearchResponse::kMatchesFieldNumber;
const int FaceSearchResponse::kMessageFieldNumber;
const int FaceSearchResponse::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceSearchResponse::FaceSearchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.FaceSearchResponse)
}

void FaceSearchResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

FaceSearchResponse::FaceSearchResponse(const FaceSearchResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.FaceSearchResponse)
}

void FaceSearchResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exception_ = NULL;
}

FaceSearchResponse::~FaceSearchResponse() {
  // @@protoc_insertion_point(destructor:BioService.FaceSearchResponse)
  SharedDtor();
}

void FaceSearchResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete exception_;
  }
}

void FaceSearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceSearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceSearchResponse_descriptor_;
}

const FaceSearchResponse& FaceSearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

FaceSearchResponse* FaceSearchResponse::default_instance_ = NULL;

FaceSearchResponse* FaceSearchResponse::New(::google::protobuf::Arena* arena) const {
  FaceSearchResponse* n = new FaceSearchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceSearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.FaceSearchResponse)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
  portraits_.Clear();
  matches_.Clear();
}

bool FaceSearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.FaceSearchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BioService.PortraitCharacteristic portraits = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_portraits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_portraits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_portraits;
        if (input->ExpectTag(18)) goto parse_loop_matches;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .BioService.Matches matches = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_matches;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.FaceSearchResponse.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exception;
        break;
      }

      // optional .BioService.ServiceException exception = 4;
      case 4: {
        if (tag == 34) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.FaceSearchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.FaceSearchResponse)
  return false;
#undef DO_
}

void FaceSearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.FaceSearchResponse)
  // repeated .BioService.PortraitCharacteristic portraits = 1;
  for (unsigned int i = 0, n = this->portraits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->portraits(i), output);
  }

  // repeated .BioService.Matches matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matches(i), output);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.FaceSearchResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->exception_, output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.FaceSearchResponse)
}

::google::protobuf::uint8* FaceSearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.FaceSearchResponse)
  // repeated .BioService.PortraitCharacteristic portraits = 1;
  for (unsigned int i = 0, n = this->portraits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->portraits(i), target);
  }

  // repeated .BioService.Matches matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matches(i), target);
  }

  // optional string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.FaceSearchResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->exception_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.FaceSearchResponse)
  return target;
}

int FaceSearchResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.FaceSearchResponse)
  int total_size = 0;

  // optional string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional .BioService.ServiceException exception = 4;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // repeated .BioService.PortraitCharacteristic portraits = 1;
  total_size += 1 * this->portraits_size();
  for (int i = 0; i < this->portraits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->portraits(i));
  }

  // repeated .BioService.Matches matches = 2;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceSearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.FaceSearchResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FaceSearchResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceSearchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.FaceSearchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.FaceSearchResponse)
    MergeFrom(*source);
  }
}

void FaceSearchResponse::MergeFrom(const FaceSearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.FaceSearchResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  portraits_.MergeFrom(from.portraits_);
  matches_.MergeFrom(from.matches_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
}

void FaceSearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.FaceSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceSearchResponse::CopyFrom(const FaceSearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.FaceSearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceSearchResponse::IsInitialized() const {

  return true;
}

void FaceSearchResponse::Swap(FaceSearchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceSearchResponse::InternalSwap(FaceSearchResponse* other) {
  portraits_.UnsafeArenaSwap(&other->portraits_);
  matches_.UnsafeArenaSwap(&other->matches_);
  message_.Swap(&other->message_);
  std::swap(exception_, other->exception_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceSearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceSearchResponse_descriptor_;
  metadata.reflection = FaceSearchResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceSearchResponse

// repeated .BioService.PortraitCharacteristic portraits = 1;
int FaceSearchResponse::portraits_size() const {
  return portraits_.size();
}
void FaceSearchResponse::clear_portraits() {
  portraits_.Clear();
}
const ::BioService::PortraitCharacteristic& FaceSearchResponse::portraits(int index) const {
  // @@protoc_insertion_point(field_get:BioService.FaceSearchResponse.portraits)
  return portraits_.Get(index);
}
::BioService::PortraitCharacteristic* FaceSearchResponse::mutable_portraits(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.FaceSearchResponse.portraits)
  return portraits_.Mutable(index);
}
::BioService::PortraitCharacteristic* FaceSearchResponse::add_portraits() {
  // @@protoc_insertion_point(field_add:BioService.FaceSearchResponse.portraits)
  return portraits_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >*
FaceSearchResponse::mutable_portraits() {
  // @@protoc_insertion_point(field_mutable_list:BioService.FaceSearchResponse.portraits)
  return &portraits_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::PortraitCharacteristic >&
FaceSearchResponse::portraits() const {
  // @@protoc_insertion_point(field_list:BioService.FaceSearchResponse.portraits)
  return portraits_;
}

// repeated .BioService.Matches matches = 2;
int FaceSearchResponse::matches_size() const {
  return matches_.size();
}
void FaceSearchResponse::clear_matches() {
  matches_.Clear();
}
const ::BioService::Matches& FaceSearchResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:BioService.FaceSearchResponse.matches)
  return matches_.Get(index);
}
::BioService::Matches* FaceSearchResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.FaceSearchResponse.matches)
  return matches_.Mutable(index);
}
::BioService::Matches* FaceSearchResponse::add_matches() {
  // @@protoc_insertion_point(field_add:BioService.FaceSearchResponse.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::BioService::Matches >*
FaceSearchResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:BioService.FaceSearchResponse.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::BioService::Matches >&
FaceSearchResponse::matches() const {
  // @@protoc_insertion_point(field_list:BioService.FaceSearchResponse.matches)
  return matches_;
}

// optional string message = 3;
void FaceSearchResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FaceSearchResponse::message() const {
  // @@protoc_insertion_point(field_get:BioService.FaceSearchResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceSearchResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.FaceSearchResponse.message)
}
 void FaceSearchResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.FaceSearchResponse.message)
}
 void FaceSearchResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.FaceSearchResponse.message)
}
 ::std::string* FaceSearchResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.FaceSearchResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaceSearchResponse::release_message() {
  // @@protoc_insertion_point(field_release:BioService.FaceSearchResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceSearchResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceSearchResponse.message)
}

// optional .BioService.ServiceException exception = 4;
bool FaceSearchResponse::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void FaceSearchResponse::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& FaceSearchResponse::exception() const {
  // @@protoc_insertion_point(field_get:BioService.FaceSearchResponse.exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* FaceSearchResponse::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FaceSearchResponse.exception)
  return exception_;
}
::BioService::ServiceException* FaceSearchResponse::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.FaceSearchResponse.exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void FaceSearchResponse::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FaceSearchResponse.exception)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcquiredData::kImageFieldNumber;
const int AcquiredData::kOwnerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcquiredData::AcquiredData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.AcquiredData)
}

void AcquiredData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  image_ = const_cast< ::BioService::Photo*>(&::BioService::Photo::default_instance());
}

AcquiredData::AcquiredData(const AcquiredData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.AcquiredData)
}

void AcquiredData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  image_ = NULL;
  owner_id_ = GOOGLE_LONGLONG(0);
}

AcquiredData::~AcquiredData() {
  // @@protoc_insertion_point(destructor:BioService.AcquiredData)
  SharedDtor();
}

void AcquiredData::SharedDtor() {
  if (this != default_instance_) {
    delete image_;
  }
}

void AcquiredData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcquiredData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcquiredData_descriptor_;
}

const AcquiredData& AcquiredData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

AcquiredData* AcquiredData::default_instance_ = NULL;

AcquiredData* AcquiredData::New(::google::protobuf::Arena* arena) const {
  AcquiredData* n = new AcquiredData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcquiredData::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.AcquiredData)
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
  owner_id_ = GOOGLE_LONGLONG(0);
}

bool AcquiredData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.AcquiredData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.Photo image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner_id;
        break;
      }

      // optional int64 owner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.AcquiredData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.AcquiredData)
  return false;
#undef DO_
}

void AcquiredData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.AcquiredData)
  // optional .BioService.Photo image = 1;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->image_, output);
  }

  // optional int64 owner_id = 2;
  if (this->owner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->owner_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.AcquiredData)
}

::google::protobuf::uint8* AcquiredData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.AcquiredData)
  // optional .BioService.Photo image = 1;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->image_, target);
  }

  // optional int64 owner_id = 2;
  if (this->owner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->owner_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.AcquiredData)
  return target;
}

int AcquiredData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.AcquiredData)
  int total_size = 0;

  // optional .BioService.Photo image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // optional int64 owner_id = 2;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->owner_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcquiredData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.AcquiredData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AcquiredData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AcquiredData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.AcquiredData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.AcquiredData)
    MergeFrom(*source);
  }
}

void AcquiredData::MergeFrom(const AcquiredData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.AcquiredData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_image()) {
    mutable_image()->::BioService::Photo::MergeFrom(from.image());
  }
  if (from.owner_id() != 0) {
    set_owner_id(from.owner_id());
  }
}

void AcquiredData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.AcquiredData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcquiredData::CopyFrom(const AcquiredData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.AcquiredData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcquiredData::IsInitialized() const {

  return true;
}

void AcquiredData::Swap(AcquiredData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcquiredData::InternalSwap(AcquiredData* other) {
  std::swap(image_, other->image_);
  std::swap(owner_id_, other->owner_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcquiredData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcquiredData_descriptor_;
  metadata.reflection = AcquiredData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcquiredData

// optional .BioService.Photo image = 1;
bool AcquiredData::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
void AcquiredData::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::BioService::Photo& AcquiredData::image() const {
  // @@protoc_insertion_point(field_get:BioService.AcquiredData.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::BioService::Photo* AcquiredData::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::BioService::Photo;
  }
  // @@protoc_insertion_point(field_mutable:BioService.AcquiredData.image)
  return image_;
}
::BioService::Photo* AcquiredData::release_image() {
  // @@protoc_insertion_point(field_release:BioService.AcquiredData.image)
  
  ::BioService::Photo* temp = image_;
  image_ = NULL;
  return temp;
}
void AcquiredData::set_allocated_image(::BioService::Photo* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.AcquiredData.image)
}

// optional int64 owner_id = 2;
void AcquiredData::clear_owner_id() {
  owner_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AcquiredData::owner_id() const {
  // @@protoc_insertion_point(field_get:BioService.AcquiredData.owner_id)
  return owner_id_;
}
 void AcquiredData::set_owner_id(::google::protobuf::int64 value) {
  
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.AcquiredData.owner_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FingerprintAcquiredData::kDataFieldNumber;
const int FingerprintAcquiredData::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FingerprintAcquiredData::FingerprintAcquiredData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.FingerprintAcquiredData)
}

void FingerprintAcquiredData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  data_ = const_cast< ::BioService::AcquiredData*>(&::BioService::AcquiredData::default_instance());
}

FingerprintAcquiredData::FingerprintAcquiredData(const FingerprintAcquiredData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.FingerprintAcquiredData)
}

void FingerprintAcquiredData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  data_ = NULL;
  position_ = 0;
}

FingerprintAcquiredData::~FingerprintAcquiredData() {
  // @@protoc_insertion_point(destructor:BioService.FingerprintAcquiredData)
  SharedDtor();
}

void FingerprintAcquiredData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FingerprintAcquiredData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FingerprintAcquiredData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FingerprintAcquiredData_descriptor_;
}

const FingerprintAcquiredData& FingerprintAcquiredData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

FingerprintAcquiredData* FingerprintAcquiredData::default_instance_ = NULL;

FingerprintAcquiredData* FingerprintAcquiredData::New(::google::protobuf::Arena* arena) const {
  FingerprintAcquiredData* n = new FingerprintAcquiredData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FingerprintAcquiredData::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.FingerprintAcquiredData)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
  position_ = 0;
}

bool FingerprintAcquiredData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.FingerprintAcquiredData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.AcquiredData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional .BioService.Finger position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position(static_cast< ::BioService::Finger >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.FingerprintAcquiredData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.FingerprintAcquiredData)
  return false;
#undef DO_
}

void FingerprintAcquiredData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.FingerprintAcquiredData)
  // optional .BioService.AcquiredData data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // optional .BioService.Finger position = 2;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->position(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.FingerprintAcquiredData)
}

::google::protobuf::uint8* FingerprintAcquiredData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.FingerprintAcquiredData)
  // optional .BioService.AcquiredData data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->data_, target);
  }

  // optional .BioService.Finger position = 2;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->position(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.FingerprintAcquiredData)
  return target;
}

int FingerprintAcquiredData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.FingerprintAcquiredData)
  int total_size = 0;

  // optional .BioService.AcquiredData data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // optional .BioService.Finger position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FingerprintAcquiredData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.FingerprintAcquiredData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FingerprintAcquiredData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FingerprintAcquiredData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.FingerprintAcquiredData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.FingerprintAcquiredData)
    MergeFrom(*source);
  }
}

void FingerprintAcquiredData::MergeFrom(const FingerprintAcquiredData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.FingerprintAcquiredData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_data()) {
    mutable_data()->::BioService::AcquiredData::MergeFrom(from.data());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void FingerprintAcquiredData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.FingerprintAcquiredData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerprintAcquiredData::CopyFrom(const FingerprintAcquiredData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.FingerprintAcquiredData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerprintAcquiredData::IsInitialized() const {

  return true;
}

void FingerprintAcquiredData::Swap(FingerprintAcquiredData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FingerprintAcquiredData::InternalSwap(FingerprintAcquiredData* other) {
  std::swap(data_, other->data_);
  std::swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FingerprintAcquiredData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FingerprintAcquiredData_descriptor_;
  metadata.reflection = FingerprintAcquiredData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FingerprintAcquiredData

// optional .BioService.AcquiredData data = 1;
bool FingerprintAcquiredData::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
void FingerprintAcquiredData::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::BioService::AcquiredData& FingerprintAcquiredData::data() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintAcquiredData.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::BioService::AcquiredData* FingerprintAcquiredData::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::BioService::AcquiredData;
  }
  // @@protoc_insertion_point(field_mutable:BioService.FingerprintAcquiredData.data)
  return data_;
}
::BioService::AcquiredData* FingerprintAcquiredData::release_data() {
  // @@protoc_insertion_point(field_release:BioService.FingerprintAcquiredData.data)
  
  ::BioService::AcquiredData* temp = data_;
  data_ = NULL;
  return temp;
}
void FingerprintAcquiredData::set_allocated_data(::BioService::AcquiredData* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.FingerprintAcquiredData.data)
}

// optional .BioService.Finger position = 2;
void FingerprintAcquiredData::clear_position() {
  position_ = 0;
}
 ::BioService::Finger FingerprintAcquiredData::position() const {
  // @@protoc_insertion_point(field_get:BioService.FingerprintAcquiredData.position)
  return static_cast< ::BioService::Finger >(position_);
}
 void FingerprintAcquiredData::set_position(::BioService::Finger value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:BioService.FingerprintAcquiredData.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnrollmentFeedback::kCharacteristicIdFieldNumber;
const int EnrollmentFeedback::kPhotoIdFieldNumber;
const int EnrollmentFeedback::kQualityFieldNumber;
const int EnrollmentFeedback::kExceptionFieldNumber;
const int EnrollmentFeedback::kProgressFieldNumber;
const int EnrollmentFeedback::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnrollmentFeedback::EnrollmentFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.EnrollmentFeedback)
}

void EnrollmentFeedback::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  exception_ = const_cast< ::BioService::ServiceException*>(&::BioService::ServiceException::default_instance());
}

EnrollmentFeedback::EnrollmentFeedback(const EnrollmentFeedback& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.EnrollmentFeedback)
}

void EnrollmentFeedback::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  characteristic_id_ = GOOGLE_LONGLONG(0);
  photo_id_ = GOOGLE_LONGLONG(0);
  quality_ = 0;
  exception_ = NULL;
  progress_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EnrollmentFeedback::~EnrollmentFeedback() {
  // @@protoc_insertion_point(destructor:BioService.EnrollmentFeedback)
  SharedDtor();
}

void EnrollmentFeedback::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete exception_;
  }
}

void EnrollmentFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnrollmentFeedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnrollmentFeedback_descriptor_;
}

const EnrollmentFeedback& EnrollmentFeedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

EnrollmentFeedback* EnrollmentFeedback::default_instance_ = NULL;

EnrollmentFeedback* EnrollmentFeedback::New(::google::protobuf::Arena* arena) const {
  EnrollmentFeedback* n = new EnrollmentFeedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnrollmentFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.EnrollmentFeedback)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EnrollmentFeedback, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EnrollmentFeedback*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(characteristic_id_, photo_id_);
  ZR_(quality_, progress_);
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool EnrollmentFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.EnrollmentFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 characteristic_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &characteristic_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_photo_id;
        break;
      }

      // optional int64 photo_id = 2;
      case 2: {
        if (tag == 16) {
         parse_photo_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &photo_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_quality;
        break;
      }

      // optional sfixed32 quality = 3;
      case 3: {
        if (tag == 29) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &quality_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Exception;
        break;
      }

      // optional .BioService.ServiceException Exception = 4;
      case 4: {
        if (tag == 34) {
         parse_Exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_progress;
        break;
      }

      // optional sfixed32 progress = 5;
      case 5: {
        if (tag == 45) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &progress_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_message;
        break;
      }

      // optional string message = 6;
      case 6: {
        if (tag == 50) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.EnrollmentFeedback.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.EnrollmentFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.EnrollmentFeedback)
  return false;
#undef DO_
}

void EnrollmentFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.EnrollmentFeedback)
  // optional int64 characteristic_id = 1;
  if (this->characteristic_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->characteristic_id(), output);
  }

  // optional int64 photo_id = 2;
  if (this->photo_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->photo_id(), output);
  }

  // optional sfixed32 quality = 3;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->quality(), output);
  }

  // optional .BioService.ServiceException Exception = 4;
  if (this->has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->exception_, output);
  }

  // optional sfixed32 progress = 5;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->progress(), output);
  }

  // optional string message = 6;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.EnrollmentFeedback.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.EnrollmentFeedback)
}

::google::protobuf::uint8* EnrollmentFeedback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.EnrollmentFeedback)
  // optional int64 characteristic_id = 1;
  if (this->characteristic_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->characteristic_id(), target);
  }

  // optional int64 photo_id = 2;
  if (this->photo_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->photo_id(), target);
  }

  // optional sfixed32 quality = 3;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->quality(), target);
  }

  // optional .BioService.ServiceException Exception = 4;
  if (this->has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->exception_, target);
  }

  // optional sfixed32 progress = 5;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->progress(), target);
  }

  // optional string message = 6;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.EnrollmentFeedback.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.EnrollmentFeedback)
  return target;
}

int EnrollmentFeedback::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.EnrollmentFeedback)
  int total_size = 0;

  // optional int64 characteristic_id = 1;
  if (this->characteristic_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->characteristic_id());
  }

  // optional int64 photo_id = 2;
  if (this->photo_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->photo_id());
  }

  // optional sfixed32 quality = 3;
  if (this->quality() != 0) {
    total_size += 1 + 4;
  }

  // optional .BioService.ServiceException Exception = 4;
  if (this->has_exception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exception_);
  }

  // optional sfixed32 progress = 5;
  if (this->progress() != 0) {
    total_size += 1 + 4;
  }

  // optional string message = 6;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnrollmentFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.EnrollmentFeedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EnrollmentFeedback* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnrollmentFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.EnrollmentFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.EnrollmentFeedback)
    MergeFrom(*source);
  }
}

void EnrollmentFeedback::MergeFrom(const EnrollmentFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.EnrollmentFeedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.characteristic_id() != 0) {
    set_characteristic_id(from.characteristic_id());
  }
  if (from.photo_id() != 0) {
    set_photo_id(from.photo_id());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.has_exception()) {
    mutable_exception()->::BioService::ServiceException::MergeFrom(from.exception());
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void EnrollmentFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.EnrollmentFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnrollmentFeedback::CopyFrom(const EnrollmentFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.EnrollmentFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollmentFeedback::IsInitialized() const {

  return true;
}

void EnrollmentFeedback::Swap(EnrollmentFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnrollmentFeedback::InternalSwap(EnrollmentFeedback* other) {
  std::swap(characteristic_id_, other->characteristic_id_);
  std::swap(photo_id_, other->photo_id_);
  std::swap(quality_, other->quality_);
  std::swap(exception_, other->exception_);
  std::swap(progress_, other->progress_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnrollmentFeedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnrollmentFeedback_descriptor_;
  metadata.reflection = EnrollmentFeedback_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnrollmentFeedback

// optional int64 characteristic_id = 1;
void EnrollmentFeedback::clear_characteristic_id() {
  characteristic_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 EnrollmentFeedback::characteristic_id() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.characteristic_id)
  return characteristic_id_;
}
 void EnrollmentFeedback::set_characteristic_id(::google::protobuf::int64 value) {
  
  characteristic_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.characteristic_id)
}

// optional int64 photo_id = 2;
void EnrollmentFeedback::clear_photo_id() {
  photo_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 EnrollmentFeedback::photo_id() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.photo_id)
  return photo_id_;
}
 void EnrollmentFeedback::set_photo_id(::google::protobuf::int64 value) {
  
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.photo_id)
}

// optional sfixed32 quality = 3;
void EnrollmentFeedback::clear_quality() {
  quality_ = 0;
}
 ::google::protobuf::int32 EnrollmentFeedback::quality() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.quality)
  return quality_;
}
 void EnrollmentFeedback::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.quality)
}

// optional .BioService.ServiceException Exception = 4;
bool EnrollmentFeedback::has_exception() const {
  return !_is_default_instance_ && exception_ != NULL;
}
void EnrollmentFeedback::clear_exception() {
  if (GetArenaNoVirtual() == NULL && exception_ != NULL) delete exception_;
  exception_ = NULL;
}
const ::BioService::ServiceException& EnrollmentFeedback::exception() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.Exception)
  return exception_ != NULL ? *exception_ : *default_instance_->exception_;
}
::BioService::ServiceException* EnrollmentFeedback::mutable_exception() {
  
  if (exception_ == NULL) {
    exception_ = new ::BioService::ServiceException;
  }
  // @@protoc_insertion_point(field_mutable:BioService.EnrollmentFeedback.Exception)
  return exception_;
}
::BioService::ServiceException* EnrollmentFeedback::release_exception() {
  // @@protoc_insertion_point(field_release:BioService.EnrollmentFeedback.Exception)
  
  ::BioService::ServiceException* temp = exception_;
  exception_ = NULL;
  return temp;
}
void EnrollmentFeedback::set_allocated_exception(::BioService::ServiceException* exception) {
  delete exception_;
  exception_ = exception;
  if (exception) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.EnrollmentFeedback.Exception)
}

// optional sfixed32 progress = 5;
void EnrollmentFeedback::clear_progress() {
  progress_ = 0;
}
 ::google::protobuf::int32 EnrollmentFeedback::progress() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.progress)
  return progress_;
}
 void EnrollmentFeedback::set_progress(::google::protobuf::int32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.progress)
}

// optional string message = 6;
void EnrollmentFeedback::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EnrollmentFeedback::message() const {
  // @@protoc_insertion_point(field_get:BioService.EnrollmentFeedback.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnrollmentFeedback::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.EnrollmentFeedback.message)
}
 void EnrollmentFeedback::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.EnrollmentFeedback.message)
}
 void EnrollmentFeedback::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.EnrollmentFeedback.message)
}
 ::std::string* EnrollmentFeedback::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BioService.EnrollmentFeedback.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EnrollmentFeedback::release_message() {
  // @@protoc_insertion_point(field_release:BioService.EnrollmentFeedback.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnrollmentFeedback::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BioService.EnrollmentFeedback.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerificationFeedback::kEnrollmentFeedbackFieldNumber;
const int VerificationFeedback::kMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerificationFeedback::VerificationFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.VerificationFeedback)
}

void VerificationFeedback::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  enrollment_feedback_ = const_cast< ::BioService::EnrollmentFeedback*>(&::BioService::EnrollmentFeedback::default_instance());
}

VerificationFeedback::VerificationFeedback(const VerificationFeedback& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.VerificationFeedback)
}

void VerificationFeedback::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  enrollment_feedback_ = NULL;
  match_ = 0;
}

VerificationFeedback::~VerificationFeedback() {
  // @@protoc_insertion_point(destructor:BioService.VerificationFeedback)
  SharedDtor();
}

void VerificationFeedback::SharedDtor() {
  if (this != default_instance_) {
    delete enrollment_feedback_;
  }
}

void VerificationFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerificationFeedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerificationFeedback_descriptor_;
}

const VerificationFeedback& VerificationFeedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

VerificationFeedback* VerificationFeedback::default_instance_ = NULL;

VerificationFeedback* VerificationFeedback::New(::google::protobuf::Arena* arena) const {
  VerificationFeedback* n = new VerificationFeedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerificationFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.VerificationFeedback)
  if (GetArenaNoVirtual() == NULL && enrollment_feedback_ != NULL) delete enrollment_feedback_;
  enrollment_feedback_ = NULL;
  match_ = 0;
}

bool VerificationFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.VerificationFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enrollment_feedback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_match;
        break;
      }

      // optional float match = 2;
      case 2: {
        if (tag == 21) {
         parse_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &match_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.VerificationFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.VerificationFeedback)
  return false;
#undef DO_
}

void VerificationFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.VerificationFeedback)
  // optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
  if (this->has_enrollment_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->enrollment_feedback_, output);
  }

  // optional float match = 2;
  if (this->match() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->match(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.VerificationFeedback)
}

::google::protobuf::uint8* VerificationFeedback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.VerificationFeedback)
  // optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
  if (this->has_enrollment_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->enrollment_feedback_, target);
  }

  // optional float match = 2;
  if (this->match() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->match(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.VerificationFeedback)
  return target;
}

int VerificationFeedback::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.VerificationFeedback)
  int total_size = 0;

  // optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
  if (this->has_enrollment_feedback()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->enrollment_feedback_);
  }

  // optional float match = 2;
  if (this->match() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerificationFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.VerificationFeedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VerificationFeedback* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VerificationFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.VerificationFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.VerificationFeedback)
    MergeFrom(*source);
  }
}

void VerificationFeedback::MergeFrom(const VerificationFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.VerificationFeedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_enrollment_feedback()) {
    mutable_enrollment_feedback()->::BioService::EnrollmentFeedback::MergeFrom(from.enrollment_feedback());
  }
  if (from.match() != 0) {
    set_match(from.match());
  }
}

void VerificationFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.VerificationFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerificationFeedback::CopyFrom(const VerificationFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.VerificationFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerificationFeedback::IsInitialized() const {

  return true;
}

void VerificationFeedback::Swap(VerificationFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerificationFeedback::InternalSwap(VerificationFeedback* other) {
  std::swap(enrollment_feedback_, other->enrollment_feedback_);
  std::swap(match_, other->match_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerificationFeedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerificationFeedback_descriptor_;
  metadata.reflection = VerificationFeedback_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerificationFeedback

// optional .BioService.EnrollmentFeedback enrollment_feedback = 1;
bool VerificationFeedback::has_enrollment_feedback() const {
  return !_is_default_instance_ && enrollment_feedback_ != NULL;
}
void VerificationFeedback::clear_enrollment_feedback() {
  if (GetArenaNoVirtual() == NULL && enrollment_feedback_ != NULL) delete enrollment_feedback_;
  enrollment_feedback_ = NULL;
}
const ::BioService::EnrollmentFeedback& VerificationFeedback::enrollment_feedback() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationFeedback.enrollment_feedback)
  return enrollment_feedback_ != NULL ? *enrollment_feedback_ : *default_instance_->enrollment_feedback_;
}
::BioService::EnrollmentFeedback* VerificationFeedback::mutable_enrollment_feedback() {
  
  if (enrollment_feedback_ == NULL) {
    enrollment_feedback_ = new ::BioService::EnrollmentFeedback;
  }
  // @@protoc_insertion_point(field_mutable:BioService.VerificationFeedback.enrollment_feedback)
  return enrollment_feedback_;
}
::BioService::EnrollmentFeedback* VerificationFeedback::release_enrollment_feedback() {
  // @@protoc_insertion_point(field_release:BioService.VerificationFeedback.enrollment_feedback)
  
  ::BioService::EnrollmentFeedback* temp = enrollment_feedback_;
  enrollment_feedback_ = NULL;
  return temp;
}
void VerificationFeedback::set_allocated_enrollment_feedback(::BioService::EnrollmentFeedback* enrollment_feedback) {
  delete enrollment_feedback_;
  enrollment_feedback_ = enrollment_feedback;
  if (enrollment_feedback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:BioService.VerificationFeedback.enrollment_feedback)
}

// optional float match = 2;
void VerificationFeedback::clear_match() {
  match_ = 0;
}
 float VerificationFeedback::match() const {
  // @@protoc_insertion_point(field_get:BioService.VerificationFeedback.match)
  return match_;
}
 void VerificationFeedback::set_match(float value) {
  
  match_ = value;
  // @@protoc_insertion_point(field_set:BioService.VerificationFeedback.match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* QueryPhoto_PhotoResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPhoto_PhotoResponseType_descriptor_;
}
bool QueryPhoto_PhotoResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const QueryPhoto_PhotoResponseType QueryPhoto::Undefined;
const QueryPhoto_PhotoResponseType QueryPhoto::Full;
const QueryPhoto_PhotoResponseType QueryPhoto::OnlyBytes;
const QueryPhoto_PhotoResponseType QueryPhoto::NoBytes;
const QueryPhoto_PhotoResponseType QueryPhoto::PhotoResponseType_MIN;
const QueryPhoto_PhotoResponseType QueryPhoto::PhotoResponseType_MAX;
const int QueryPhoto::PhotoResponseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryPhoto::kWithBytesFieldNumber;
const int QueryPhoto::kPersonsFieldNumber;
const int QueryPhoto::kPhotosFieldNumber;
const int QueryPhoto::kItemsPerPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryPhoto::QueryPhoto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.QueryPhoto)
}

void QueryPhoto::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QueryPhoto::QueryPhoto(const QueryPhoto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.QueryPhoto)
}

void QueryPhoto::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  with_bytes_ = 0;
  items_per_page_ = GOOGLE_LONGLONG(0);
}

QueryPhoto::~QueryPhoto() {
  // @@protoc_insertion_point(destructor:BioService.QueryPhoto)
  SharedDtor();
}

void QueryPhoto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryPhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPhoto_descriptor_;
}

const QueryPhoto& QueryPhoto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

QueryPhoto* QueryPhoto::default_instance_ = NULL;

QueryPhoto* QueryPhoto::New(::google::protobuf::Arena* arena) const {
  QueryPhoto* n = new QueryPhoto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryPhoto::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.QueryPhoto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QueryPhoto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryPhoto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(items_per_page_, with_bytes_);

#undef ZR_HELPER_
#undef ZR_

  persons_.Clear();
  photos_.Clear();
}

bool QueryPhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.QueryPhoto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BioService.QueryPhoto.PhotoResponseType with_bytes = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_with_bytes(static_cast< ::BioService::QueryPhoto_PhotoResponseType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_persons;
        break;
      }

      // repeated int64 persons = 2;
      case 2: {
        if (tag == 18) {
         parse_persons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_persons())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_persons())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_photos;
        break;
      }

      // repeated int64 photos = 3;
      case 3: {
        if (tag == 26) {
         parse_photos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_photos())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_photos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_items_per_page;
        break;
      }

      // optional int64 items_per_page = 4;
      case 4: {
        if (tag == 32) {
         parse_items_per_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &items_per_page_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.QueryPhoto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.QueryPhoto)
  return false;
#undef DO_
}

void QueryPhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.QueryPhoto)
  // optional .BioService.QueryPhoto.PhotoResponseType with_bytes = 1;
  if (this->with_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->with_bytes(), output);
  }

  // repeated int64 persons = 2;
  if (this->persons_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_persons_cached_byte_size_);
  }
  for (int i = 0; i < this->persons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->persons(i), output);
  }

  // repeated int64 photos = 3;
  if (this->photos_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_photos_cached_byte_size_);
  }
  for (int i = 0; i < this->photos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->photos(i), output);
  }

  // optional int64 items_per_page = 4;
  if (this->items_per_page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->items_per_page(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.QueryPhoto)
}

::google::protobuf::uint8* QueryPhoto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.QueryPhoto)
  // optional .BioService.QueryPhoto.PhotoResponseType with_bytes = 1;
  if (this->with_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->with_bytes(), target);
  }

  // repeated int64 persons = 2;
  if (this->persons_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _persons_cached_byte_size_, target);
  }
  for (int i = 0; i < this->persons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->persons(i), target);
  }

  // repeated int64 photos = 3;
  if (this->photos_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _photos_cached_byte_size_, target);
  }
  for (int i = 0; i < this->photos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->photos(i), target);
  }

  // optional int64 items_per_page = 4;
  if (this->items_per_page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->items_per_page(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.QueryPhoto)
  return target;
}

int QueryPhoto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.QueryPhoto)
  int total_size = 0;

  // optional .BioService.QueryPhoto.PhotoResponseType with_bytes = 1;
  if (this->with_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->with_bytes());
  }

  // optional int64 items_per_page = 4;
  if (this->items_per_page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->items_per_page());
  }

  // repeated int64 persons = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->persons_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->persons(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _persons_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 photos = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->photos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->photos(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _photos_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPhoto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.QueryPhoto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryPhoto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryPhoto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.QueryPhoto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.QueryPhoto)
    MergeFrom(*source);
  }
}

void QueryPhoto::MergeFrom(const QueryPhoto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.QueryPhoto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  persons_.MergeFrom(from.persons_);
  photos_.MergeFrom(from.photos_);
  if (from.with_bytes() != 0) {
    set_with_bytes(from.with_bytes());
  }
  if (from.items_per_page() != 0) {
    set_items_per_page(from.items_per_page());
  }
}

void QueryPhoto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.QueryPhoto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPhoto::CopyFrom(const QueryPhoto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.QueryPhoto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPhoto::IsInitialized() const {

  return true;
}

void QueryPhoto::Swap(QueryPhoto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryPhoto::InternalSwap(QueryPhoto* other) {
  std::swap(with_bytes_, other->with_bytes_);
  persons_.UnsafeArenaSwap(&other->persons_);
  photos_.UnsafeArenaSwap(&other->photos_);
  std::swap(items_per_page_, other->items_per_page_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryPhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPhoto_descriptor_;
  metadata.reflection = QueryPhoto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryPhoto

// optional .BioService.QueryPhoto.PhotoResponseType with_bytes = 1;
void QueryPhoto::clear_with_bytes() {
  with_bytes_ = 0;
}
 ::BioService::QueryPhoto_PhotoResponseType QueryPhoto::with_bytes() const {
  // @@protoc_insertion_point(field_get:BioService.QueryPhoto.with_bytes)
  return static_cast< ::BioService::QueryPhoto_PhotoResponseType >(with_bytes_);
}
 void QueryPhoto::set_with_bytes(::BioService::QueryPhoto_PhotoResponseType value) {
  
  with_bytes_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryPhoto.with_bytes)
}

// repeated int64 persons = 2;
int QueryPhoto::persons_size() const {
  return persons_.size();
}
void QueryPhoto::clear_persons() {
  persons_.Clear();
}
 ::google::protobuf::int64 QueryPhoto::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.QueryPhoto.persons)
  return persons_.Get(index);
}
 void QueryPhoto::set_persons(int index, ::google::protobuf::int64 value) {
  persons_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.QueryPhoto.persons)
}
 void QueryPhoto::add_persons(::google::protobuf::int64 value) {
  persons_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.QueryPhoto.persons)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
QueryPhoto::persons() const {
  // @@protoc_insertion_point(field_list:BioService.QueryPhoto.persons)
  return persons_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
QueryPhoto::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.QueryPhoto.persons)
  return &persons_;
}

// repeated int64 photos = 3;
int QueryPhoto::photos_size() const {
  return photos_.size();
}
void QueryPhoto::clear_photos() {
  photos_.Clear();
}
 ::google::protobuf::int64 QueryPhoto::photos(int index) const {
  // @@protoc_insertion_point(field_get:BioService.QueryPhoto.photos)
  return photos_.Get(index);
}
 void QueryPhoto::set_photos(int index, ::google::protobuf::int64 value) {
  photos_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.QueryPhoto.photos)
}
 void QueryPhoto::add_photos(::google::protobuf::int64 value) {
  photos_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.QueryPhoto.photos)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
QueryPhoto::photos() const {
  // @@protoc_insertion_point(field_list:BioService.QueryPhoto.photos)
  return photos_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
QueryPhoto::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:BioService.QueryPhoto.photos)
  return &photos_;
}

// optional int64 items_per_page = 4;
void QueryPhoto::clear_items_per_page() {
  items_per_page_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryPhoto::items_per_page() const {
  // @@protoc_insertion_point(field_get:BioService.QueryPhoto.items_per_page)
  return items_per_page_;
}
 void QueryPhoto::set_items_per_page(::google::protobuf::int64 value) {
  
  items_per_page_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryPhoto.items_per_page)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryPersons::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryPersons::QueryPersons()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.QueryPersons)
}

void QueryPersons::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QueryPersons::QueryPersons(const QueryPersons& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.QueryPersons)
}

void QueryPersons::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  count_ = GOOGLE_LONGLONG(0);
}

QueryPersons::~QueryPersons() {
  // @@protoc_insertion_point(destructor:BioService.QueryPersons)
  SharedDtor();
}

void QueryPersons::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryPersons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPersons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPersons_descriptor_;
}

const QueryPersons& QueryPersons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

QueryPersons* QueryPersons::default_instance_ = NULL;

QueryPersons* QueryPersons::New(::google::protobuf::Arena* arena) const {
  QueryPersons* n = new QueryPersons;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryPersons::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.QueryPersons)
  count_ = GOOGLE_LONGLONG(0);
}

bool QueryPersons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.QueryPersons)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.QueryPersons)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.QueryPersons)
  return false;
#undef DO_
}

void QueryPersons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.QueryPersons)
  // optional int64 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.QueryPersons)
}

::google::protobuf::uint8* QueryPersons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.QueryPersons)
  // optional int64 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.QueryPersons)
  return target;
}

int QueryPersons::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.QueryPersons)
  int total_size = 0;

  // optional int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPersons::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.QueryPersons)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryPersons* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryPersons>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.QueryPersons)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.QueryPersons)
    MergeFrom(*source);
  }
}

void QueryPersons::MergeFrom(const QueryPersons& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.QueryPersons)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void QueryPersons::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.QueryPersons)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPersons::CopyFrom(const QueryPersons& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.QueryPersons)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPersons::IsInitialized() const {

  return true;
}

void QueryPersons::Swap(QueryPersons* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryPersons::InternalSwap(QueryPersons* other) {
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryPersons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPersons_descriptor_;
  metadata.reflection = QueryPersons_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryPersons

// optional int64 count = 1;
void QueryPersons::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryPersons::count() const {
  // @@protoc_insertion_point(field_get:BioService.QueryPersons.count)
  return count_;
}
 void QueryPersons::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryPersons.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryLocations::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryLocations::QueryLocations()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.QueryLocations)
}

void QueryLocations::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QueryLocations::QueryLocations(const QueryLocations& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.QueryLocations)
}

void QueryLocations::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  count_ = GOOGLE_LONGLONG(0);
}

QueryLocations::~QueryLocations() {
  // @@protoc_insertion_point(destructor:BioService.QueryLocations)
  SharedDtor();
}

void QueryLocations::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryLocations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLocations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryLocations_descriptor_;
}

const QueryLocations& QueryLocations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

QueryLocations* QueryLocations::default_instance_ = NULL;

QueryLocations* QueryLocations::New(::google::protobuf::Arena* arena) const {
  QueryLocations* n = new QueryLocations;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryLocations::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.QueryLocations)
  count_ = GOOGLE_LONGLONG(0);
}

bool QueryLocations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.QueryLocations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.QueryLocations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.QueryLocations)
  return false;
#undef DO_
}

void QueryLocations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.QueryLocations)
  // optional int64 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.QueryLocations)
}

::google::protobuf::uint8* QueryLocations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.QueryLocations)
  // optional int64 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.QueryLocations)
  return target;
}

int QueryLocations::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.QueryLocations)
  int total_size = 0;

  // optional int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLocations::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.QueryLocations)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryLocations* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryLocations>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.QueryLocations)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.QueryLocations)
    MergeFrom(*source);
  }
}

void QueryLocations::MergeFrom(const QueryLocations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.QueryLocations)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void QueryLocations::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.QueryLocations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLocations::CopyFrom(const QueryLocations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.QueryLocations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLocations::IsInitialized() const {

  return true;
}

void QueryLocations::Swap(QueryLocations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryLocations::InternalSwap(QueryLocations* other) {
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryLocations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryLocations_descriptor_;
  metadata.reflection = QueryLocations_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryLocations

// optional int64 count = 1;
void QueryLocations::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryLocations::count() const {
  // @@protoc_insertion_point(field_get:BioService.QueryLocations.count)
  return count_;
}
 void QueryLocations::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryLocations.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryVisitors::kCountriesFieldNumber;
const int QueryVisitors::kLocationsFieldNumber;
const int QueryVisitors::kPersonsFieldNumber;
const int QueryVisitors::kDatetimeFromFieldNumber;
const int QueryVisitors::kDatetimeToFieldNumber;
const int QueryVisitors::kItemsPerPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryVisitors::QueryVisitors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.QueryVisitors)
}

void QueryVisitors::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QueryVisitors::QueryVisitors(const QueryVisitors& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.QueryVisitors)
}

void QueryVisitors::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  datetime_from_ = GOOGLE_LONGLONG(0);
  datetime_to_ = GOOGLE_LONGLONG(0);
  items_per_page_ = GOOGLE_LONGLONG(0);
}

QueryVisitors::~QueryVisitors() {
  // @@protoc_insertion_point(destructor:BioService.QueryVisitors)
  SharedDtor();
}

void QueryVisitors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryVisitors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryVisitors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryVisitors_descriptor_;
}

const QueryVisitors& QueryVisitors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

QueryVisitors* QueryVisitors::default_instance_ = NULL;

QueryVisitors* QueryVisitors::New(::google::protobuf::Arena* arena) const {
  QueryVisitors* n = new QueryVisitors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryVisitors::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.QueryVisitors)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QueryVisitors, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryVisitors*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(datetime_from_, items_per_page_);

#undef ZR_HELPER_
#undef ZR_

  countries_.Clear();
  locations_.Clear();
  persons_.Clear();
}

bool QueryVisitors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.QueryVisitors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string countries = 2;
      case 2: {
        if (tag == 18) {
         parse_countries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_countries()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->countries(this->countries_size() - 1).data(),
            this->countries(this->countries_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.QueryVisitors.countries"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_countries;
        if (input->ExpectTag(26)) goto parse_locations;
        break;
      }

      // repeated int64 locations = 3;
      case 3: {
        if (tag == 26) {
         parse_locations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_locations())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_locations())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_persons;
        break;
      }

      // repeated int64 persons = 4;
      case 4: {
        if (tag == 34) {
         parse_persons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_persons())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34, input, this->mutable_persons())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_datetime_from;
        break;
      }

      // optional int64 datetime_from = 5;
      case 5: {
        if (tag == 40) {
         parse_datetime_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datetime_from_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_datetime_to;
        break;
      }

      // optional int64 datetime_to = 6;
      case 6: {
        if (tag == 48) {
         parse_datetime_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datetime_to_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_items_per_page;
        break;
      }

      // optional int64 items_per_page = 7;
      case 7: {
        if (tag == 56) {
         parse_items_per_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &items_per_page_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.QueryVisitors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.QueryVisitors)
  return false;
#undef DO_
}

void QueryVisitors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.QueryVisitors)
  // repeated string countries = 2;
  for (int i = 0; i < this->countries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->countries(i).data(), this->countries(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.QueryVisitors.countries");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->countries(i), output);
  }

  // repeated int64 locations = 3;
  if (this->locations_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_locations_cached_byte_size_);
  }
  for (int i = 0; i < this->locations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->locations(i), output);
  }

  // repeated int64 persons = 4;
  if (this->persons_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_persons_cached_byte_size_);
  }
  for (int i = 0; i < this->persons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->persons(i), output);
  }

  // optional int64 datetime_from = 5;
  if (this->datetime_from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->datetime_from(), output);
  }

  // optional int64 datetime_to = 6;
  if (this->datetime_to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->datetime_to(), output);
  }

  // optional int64 items_per_page = 7;
  if (this->items_per_page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->items_per_page(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.QueryVisitors)
}

::google::protobuf::uint8* QueryVisitors::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.QueryVisitors)
  // repeated string countries = 2;
  for (int i = 0; i < this->countries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->countries(i).data(), this->countries(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.QueryVisitors.countries");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->countries(i), target);
  }

  // repeated int64 locations = 3;
  if (this->locations_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _locations_cached_byte_size_, target);
  }
  for (int i = 0; i < this->locations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->locations(i), target);
  }

  // repeated int64 persons = 4;
  if (this->persons_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _persons_cached_byte_size_, target);
  }
  for (int i = 0; i < this->persons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->persons(i), target);
  }

  // optional int64 datetime_from = 5;
  if (this->datetime_from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->datetime_from(), target);
  }

  // optional int64 datetime_to = 6;
  if (this->datetime_to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->datetime_to(), target);
  }

  // optional int64 items_per_page = 7;
  if (this->items_per_page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->items_per_page(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.QueryVisitors)
  return target;
}

int QueryVisitors::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.QueryVisitors)
  int total_size = 0;

  // optional int64 datetime_from = 5;
  if (this->datetime_from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->datetime_from());
  }

  // optional int64 datetime_to = 6;
  if (this->datetime_to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->datetime_to());
  }

  // optional int64 items_per_page = 7;
  if (this->items_per_page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->items_per_page());
  }

  // repeated string countries = 2;
  total_size += 1 * this->countries_size();
  for (int i = 0; i < this->countries_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->countries(i));
  }

  // repeated int64 locations = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->locations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->locations(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _locations_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 persons = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->persons_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->persons(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _persons_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryVisitors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.QueryVisitors)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryVisitors* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryVisitors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.QueryVisitors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.QueryVisitors)
    MergeFrom(*source);
  }
}

void QueryVisitors::MergeFrom(const QueryVisitors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.QueryVisitors)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  countries_.MergeFrom(from.countries_);
  locations_.MergeFrom(from.locations_);
  persons_.MergeFrom(from.persons_);
  if (from.datetime_from() != 0) {
    set_datetime_from(from.datetime_from());
  }
  if (from.datetime_to() != 0) {
    set_datetime_to(from.datetime_to());
  }
  if (from.items_per_page() != 0) {
    set_items_per_page(from.items_per_page());
  }
}

void QueryVisitors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.QueryVisitors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryVisitors::CopyFrom(const QueryVisitors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.QueryVisitors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVisitors::IsInitialized() const {

  return true;
}

void QueryVisitors::Swap(QueryVisitors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryVisitors::InternalSwap(QueryVisitors* other) {
  countries_.UnsafeArenaSwap(&other->countries_);
  locations_.UnsafeArenaSwap(&other->locations_);
  persons_.UnsafeArenaSwap(&other->persons_);
  std::swap(datetime_from_, other->datetime_from_);
  std::swap(datetime_to_, other->datetime_to_);
  std::swap(items_per_page_, other->items_per_page_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryVisitors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryVisitors_descriptor_;
  metadata.reflection = QueryVisitors_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryVisitors

// repeated string countries = 2;
int QueryVisitors::countries_size() const {
  return countries_.size();
}
void QueryVisitors::clear_countries() {
  countries_.Clear();
}
 const ::std::string& QueryVisitors::countries(int index) const {
  // @@protoc_insertion_point(field_get:BioService.QueryVisitors.countries)
  return countries_.Get(index);
}
 ::std::string* QueryVisitors::mutable_countries(int index) {
  // @@protoc_insertion_point(field_mutable:BioService.QueryVisitors.countries)
  return countries_.Mutable(index);
}
 void QueryVisitors::set_countries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BioService.QueryVisitors.countries)
  countries_.Mutable(index)->assign(value);
}
 void QueryVisitors::set_countries(int index, const char* value) {
  countries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BioService.QueryVisitors.countries)
}
 void QueryVisitors::set_countries(int index, const char* value, size_t size) {
  countries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BioService.QueryVisitors.countries)
}
 ::std::string* QueryVisitors::add_countries() {
  // @@protoc_insertion_point(field_add_mutable:BioService.QueryVisitors.countries)
  return countries_.Add();
}
 void QueryVisitors::add_countries(const ::std::string& value) {
  countries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BioService.QueryVisitors.countries)
}
 void QueryVisitors::add_countries(const char* value) {
  countries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BioService.QueryVisitors.countries)
}
 void QueryVisitors::add_countries(const char* value, size_t size) {
  countries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BioService.QueryVisitors.countries)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryVisitors::countries() const {
  // @@protoc_insertion_point(field_list:BioService.QueryVisitors.countries)
  return countries_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryVisitors::mutable_countries() {
  // @@protoc_insertion_point(field_mutable_list:BioService.QueryVisitors.countries)
  return &countries_;
}

// repeated int64 locations = 3;
int QueryVisitors::locations_size() const {
  return locations_.size();
}
void QueryVisitors::clear_locations() {
  locations_.Clear();
}
 ::google::protobuf::int64 QueryVisitors::locations(int index) const {
  // @@protoc_insertion_point(field_get:BioService.QueryVisitors.locations)
  return locations_.Get(index);
}
 void QueryVisitors::set_locations(int index, ::google::protobuf::int64 value) {
  locations_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.QueryVisitors.locations)
}
 void QueryVisitors::add_locations(::google::protobuf::int64 value) {
  locations_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.QueryVisitors.locations)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
QueryVisitors::locations() const {
  // @@protoc_insertion_point(field_list:BioService.QueryVisitors.locations)
  return locations_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
QueryVisitors::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:BioService.QueryVisitors.locations)
  return &locations_;
}

// repeated int64 persons = 4;
int QueryVisitors::persons_size() const {
  return persons_.size();
}
void QueryVisitors::clear_persons() {
  persons_.Clear();
}
 ::google::protobuf::int64 QueryVisitors::persons(int index) const {
  // @@protoc_insertion_point(field_get:BioService.QueryVisitors.persons)
  return persons_.Get(index);
}
 void QueryVisitors::set_persons(int index, ::google::protobuf::int64 value) {
  persons_.Set(index, value);
  // @@protoc_insertion_point(field_set:BioService.QueryVisitors.persons)
}
 void QueryVisitors::add_persons(::google::protobuf::int64 value) {
  persons_.Add(value);
  // @@protoc_insertion_point(field_add:BioService.QueryVisitors.persons)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
QueryVisitors::persons() const {
  // @@protoc_insertion_point(field_list:BioService.QueryVisitors.persons)
  return persons_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
QueryVisitors::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:BioService.QueryVisitors.persons)
  return &persons_;
}

// optional int64 datetime_from = 5;
void QueryVisitors::clear_datetime_from() {
  datetime_from_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryVisitors::datetime_from() const {
  // @@protoc_insertion_point(field_get:BioService.QueryVisitors.datetime_from)
  return datetime_from_;
}
 void QueryVisitors::set_datetime_from(::google::protobuf::int64 value) {
  
  datetime_from_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryVisitors.datetime_from)
}

// optional int64 datetime_to = 6;
void QueryVisitors::clear_datetime_to() {
  datetime_to_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryVisitors::datetime_to() const {
  // @@protoc_insertion_point(field_get:BioService.QueryVisitors.datetime_to)
  return datetime_to_;
}
 void QueryVisitors::set_datetime_to(::google::protobuf::int64 value) {
  
  datetime_to_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryVisitors.datetime_to)
}

// optional int64 items_per_page = 7;
void QueryVisitors::clear_items_per_page() {
  items_per_page_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 QueryVisitors::items_per_page() const {
  // @@protoc_insertion_point(field_get:BioService.QueryVisitors.items_per_page)
  return items_per_page_;
}
 void QueryVisitors::set_items_per_page(::google::protobuf::int64 value) {
  
  items_per_page_ = value;
  // @@protoc_insertion_point(field_set:BioService.QueryVisitors.items_per_page)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocketConfiguration::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocketConfiguration::SocketConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.SocketConfiguration)
}

void SocketConfiguration::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SocketConfiguration::SocketConfiguration(const SocketConfiguration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.SocketConfiguration)
}

void SocketConfiguration::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SocketConfiguration::~SocketConfiguration() {
  // @@protoc_insertion_point(destructor:BioService.SocketConfiguration)
  SharedDtor();
}

void SocketConfiguration::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SocketConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocketConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocketConfiguration_descriptor_;
}

const SocketConfiguration& SocketConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

SocketConfiguration* SocketConfiguration::default_instance_ = NULL;

SocketConfiguration* SocketConfiguration::New(::google::protobuf::Arena* arena) const {
  SocketConfiguration* n = new SocketConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SocketConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.SocketConfiguration)
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SocketConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.SocketConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.SocketConfiguration.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.SocketConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.SocketConfiguration)
  return false;
#undef DO_
}

void SocketConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.SocketConfiguration)
  // optional string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.SocketConfiguration.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.SocketConfiguration)
}

::google::protobuf::uint8* SocketConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.SocketConfiguration)
  // optional string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.SocketConfiguration.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.SocketConfiguration)
  return target;
}

int SocketConfiguration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.SocketConfiguration)
  int total_size = 0;

  // optional string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.SocketConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SocketConfiguration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SocketConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.SocketConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.SocketConfiguration)
    MergeFrom(*source);
  }
}

void SocketConfiguration::MergeFrom(const SocketConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.SocketConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void SocketConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.SocketConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketConfiguration::CopyFrom(const SocketConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.SocketConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketConfiguration::IsInitialized() const {

  return true;
}

void SocketConfiguration::Swap(SocketConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocketConfiguration::InternalSwap(SocketConfiguration* other) {
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SocketConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocketConfiguration_descriptor_;
  metadata.reflection = SocketConfiguration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SocketConfiguration

// optional string address = 1;
void SocketConfiguration::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SocketConfiguration::address() const {
  // @@protoc_insertion_point(field_get:BioService.SocketConfiguration.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SocketConfiguration::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.SocketConfiguration.address)
}
 void SocketConfiguration::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.SocketConfiguration.address)
}
 void SocketConfiguration::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.SocketConfiguration.address)
}
 ::std::string* SocketConfiguration::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:BioService.SocketConfiguration.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SocketConfiguration::release_address() {
  // @@protoc_insertion_point(field_release:BioService.SocketConfiguration.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SocketConfiguration::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:BioService.SocketConfiguration.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BioClient::kIpAddressFieldNumber;
const int BioClient::kPortNumberFieldNumber;
const int BioClient::kMacAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BioClient::BioClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BioService.BioClient)
}

void BioClient::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BioClient::BioClient(const BioClient& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BioService.BioClient)
}

void BioClient::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_number_ = GOOGLE_LONGLONG(0);
  mac_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BioClient::~BioClient() {
  // @@protoc_insertion_point(destructor:BioService.BioClient)
  SharedDtor();
}

void BioClient::SharedDtor() {
  ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BioClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BioClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BioClient_descriptor_;
}

const BioClient& BioClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bio_5fservice_2eproto();
  return *default_instance_;
}

BioClient* BioClient::default_instance_ = NULL;

BioClient* BioClient::New(::google::protobuf::Arena* arena) const {
  BioClient* n = new BioClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BioClient::Clear() {
// @@protoc_insertion_point(message_clear_start:BioService.BioClient)
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_number_ = GOOGLE_LONGLONG(0);
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BioClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BioService.BioClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip_address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_address().data(), this->ip_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.BioClient.ip_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port_number;
        break;
      }

      // optional int64 port_number = 2;
      case 2: {
        if (tag == 16) {
         parse_port_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &port_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mac_address;
        break;
      }

      // optional string mac_address = 3;
      case 3: {
        if (tag == 26) {
         parse_mac_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac_address().data(), this->mac_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BioService.BioClient.mac_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BioService.BioClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BioService.BioClient)
  return false;
#undef DO_
}

void BioClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BioService.BioClient)
  // optional string ip_address = 1;
  if (this->ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_address().data(), this->ip_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.BioClient.ip_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_address(), output);
  }

  // optional int64 port_number = 2;
  if (this->port_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->port_number(), output);
  }

  // optional string mac_address = 3;
  if (this->mac_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_address().data(), this->mac_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.BioClient.mac_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mac_address(), output);
  }

  // @@protoc_insertion_point(serialize_end:BioService.BioClient)
}

::google::protobuf::uint8* BioClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BioService.BioClient)
  // optional string ip_address = 1;
  if (this->ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_address().data(), this->ip_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.BioClient.ip_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_address(), target);
  }

  // optional int64 port_number = 2;
  if (this->port_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->port_number(), target);
  }

  // optional string mac_address = 3;
  if (this->mac_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac_address().data(), this->mac_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BioService.BioClient.mac_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mac_address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BioService.BioClient)
  return target;
}

int BioClient::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BioService.BioClient)
  int total_size = 0;

  // optional string ip_address = 1;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_address());
  }

  // optional int64 port_number = 2;
  if (this->port_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->port_number());
  }

  // optional string mac_address = 3;
  if (this->mac_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac_address());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BioClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BioService.BioClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BioClient* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BioClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BioService.BioClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BioService.BioClient)
    MergeFrom(*source);
  }
}

void BioClient::MergeFrom(const BioClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BioService.BioClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.ip_address().size() > 0) {

    ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  if (from.port_number() != 0) {
    set_port_number(from.port_number());
  }
  if (from.mac_address().size() > 0) {

    mac_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
}

void BioClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BioService.BioClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BioClient::CopyFrom(const BioClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BioService.BioClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BioClient::IsInitialized() const {

  return true;
}

void BioClient::Swap(BioClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BioClient::InternalSwap(BioClient* other) {
  ip_address_.Swap(&other->ip_address_);
  std::swap(port_number_, other->port_number_);
  mac_address_.Swap(&other->mac_address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BioClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BioClient_descriptor_;
  metadata.reflection = BioClient_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BioClient

// optional string ip_address = 1;
void BioClient::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BioClient::ip_address() const {
  // @@protoc_insertion_point(field_get:BioService.BioClient.ip_address)
  return ip_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BioClient::set_ip_address(const ::std::string& value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.BioClient.ip_address)
}
 void BioClient::set_ip_address(const char* value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.BioClient.ip_address)
}
 void BioClient::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.BioClient.ip_address)
}
 ::std::string* BioClient::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:BioService.BioClient.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BioClient::release_ip_address() {
  // @@protoc_insertion_point(field_release:BioService.BioClient.ip_address)
  
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BioClient::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:BioService.BioClient.ip_address)
}

// optional int64 port_number = 2;
void BioClient::clear_port_number() {
  port_number_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BioClient::port_number() const {
  // @@protoc_insertion_point(field_get:BioService.BioClient.port_number)
  return port_number_;
}
 void BioClient::set_port_number(::google::protobuf::int64 value) {
  
  port_number_ = value;
  // @@protoc_insertion_point(field_set:BioService.BioClient.port_number)
}

// optional string mac_address = 3;
void BioClient::clear_mac_address() {
  mac_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BioClient::mac_address() const {
  // @@protoc_insertion_point(field_get:BioService.BioClient.mac_address)
  return mac_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BioClient::set_mac_address(const ::std::string& value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BioService.BioClient.mac_address)
}
 void BioClient::set_mac_address(const char* value) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BioService.BioClient.mac_address)
}
 void BioClient::set_mac_address(const char* value, size_t size) {
  
  mac_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BioService.BioClient.mac_address)
}
 ::std::string* BioClient::mutable_mac_address() {
  
  // @@protoc_insertion_point(field_mutable:BioService.BioClient.mac_address)
  return mac_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BioClient::release_mac_address() {
  // @@protoc_insertion_point(field_release:BioService.BioClient.mac_address)
  
  return mac_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BioClient::set_allocated_mac_address(::std::string* mac_address) {
  if (mac_address != NULL) {
    
  } else {
    
  }
  mac_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_address);
  // @@protoc_insertion_point(field_set_allocated:BioService.BioClient.mac_address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace BioService

// @@protoc_insertion_point(global_scope)
